
testegeral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002214  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  080022d4  080022d4  000122d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080030a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000528  2000000c  080030ac  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000534  080030ac  00020534  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000162e8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000291a  00000000  00000000  0003631c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009b87  00000000  00000000  00038c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a10  00000000  00000000  000427c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e98  00000000  00000000  000431d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006438  00000000  00000000  00044068  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003980  00000000  00000000  0004a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004de20  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f7c  00000000  00000000  0004de9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022bc 	.word	0x080022bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022bc 	.word	0x080022bc

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 feaa 	bl	8000f90 <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f866 	bl	8000314 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f830 	bl	80002b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f001 feed 	bl	8002048 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000430 	.word	0x20000430

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000430 	.word	0x20000430

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b8:	2800      	cmp	r0, #0
 80002ba:	da14      	bge.n	80002e6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	230f      	movs	r3, #15
 80002be:	b2c0      	uxtb	r0, r0
 80002c0:	4003      	ands	r3, r0
 80002c2:	3b08      	subs	r3, #8
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_NVIC_SetPriority+0x58>)
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	4010      	ands	r0, r2
 80002d0:	4090      	lsls	r0, r2
 80002d2:	32fc      	adds	r2, #252	; 0xfc
 80002d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002da:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002dc:	69dc      	ldr	r4, [r3, #28]
 80002de:	43ac      	bics	r4, r5
 80002e0:	4321      	orrs	r1, r4
 80002e2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	2503      	movs	r5, #3
 80002e8:	0883      	lsrs	r3, r0, #2
 80002ea:	4028      	ands	r0, r5
 80002ec:	40a8      	lsls	r0, r5
 80002ee:	35fc      	adds	r5, #252	; 0xfc
 80002f0:	002e      	movs	r6, r5
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_NVIC_SetPriority+0x5c>)
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	22c0      	movs	r2, #192	; 0xc0
 80002fa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fc:	4029      	ands	r1, r5
 80002fe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	589c      	ldr	r4, [r3, r2]
 8000304:	43b4      	bics	r4, r6
 8000306:	4321      	orrs	r1, r4
 8000308:	5099      	str	r1, [r3, r2]
 800030a:	e7eb      	b.n	80002e4 <HAL_NVIC_SetPriority+0x30>
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <HAL_SYSTICK_Config+0x28>)
 8000316:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000318:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031a:	4293      	cmp	r3, r2
 800031c:	d80d      	bhi.n	800033a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	4808      	ldr	r0, [pc, #32]	; (8000344 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	0609      	lsls	r1, r1, #24
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	430b      	orrs	r3, r1
 8000330:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000332:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000334:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033a:	4770      	bx	lr
 800033c:	00ffffff 	.word	0x00ffffff
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800034a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800034c:	2804      	cmp	r0, #4
 800034e:	d102      	bne.n	8000356 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000350:	4310      	orrs	r0, r2
 8000352:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000354:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000356:	2104      	movs	r1, #4
 8000358:	438a      	bics	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	e7fa      	b.n	8000354 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	e000e010 	.word	0xe000e010

08000364 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000364:	4770      	bx	lr

08000366 <HAL_SYSTICK_IRQHandler>:
{
 8000366:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000368:	f7ff fffc 	bl	8000364 <HAL_SYSTICK_Callback>
}
 800036c:	bd10      	pop	{r4, pc}
	...

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000372:	680b      	ldr	r3, [r1, #0]
{ 
 8000374:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000376:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000378:	2300      	movs	r3, #0
{ 
 800037a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800037c:	9a02      	ldr	r2, [sp, #8]
 800037e:	40da      	lsrs	r2, r3
 8000380:	d101      	bne.n	8000386 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000382:	b007      	add	sp, #28
 8000384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000386:	2201      	movs	r2, #1
 8000388:	409a      	lsls	r2, r3
 800038a:	9203      	str	r2, [sp, #12]
 800038c:	9903      	ldr	r1, [sp, #12]
 800038e:	9a02      	ldr	r2, [sp, #8]
 8000390:	400a      	ands	r2, r1
 8000392:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000394:	d100      	bne.n	8000398 <HAL_GPIO_Init+0x28>
 8000396:	e08c      	b.n	80004b2 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000398:	9a01      	ldr	r2, [sp, #4]
 800039a:	2110      	movs	r1, #16
 800039c:	6852      	ldr	r2, [r2, #4]
 800039e:	0016      	movs	r6, r2
 80003a0:	438e      	bics	r6, r1
 80003a2:	2e02      	cmp	r6, #2
 80003a4:	d10e      	bne.n	80003c4 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003a6:	2507      	movs	r5, #7
 80003a8:	401d      	ands	r5, r3
 80003aa:	00ad      	lsls	r5, r5, #2
 80003ac:	3901      	subs	r1, #1
 80003ae:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80003b0:	08dc      	lsrs	r4, r3, #3
 80003b2:	00a4      	lsls	r4, r4, #2
 80003b4:	1904      	adds	r4, r0, r4
 80003b6:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003b8:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	6909      	ldr	r1, [r1, #16]
 80003be:	40a9      	lsls	r1, r5
 80003c0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003c2:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003c4:	2403      	movs	r4, #3
 80003c6:	005f      	lsls	r7, r3, #1
 80003c8:	40bc      	lsls	r4, r7
 80003ca:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003cc:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ce:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003d0:	4025      	ands	r5, r4
 80003d2:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003d4:	2503      	movs	r5, #3
 80003d6:	4015      	ands	r5, r2
 80003d8:	40bd      	lsls	r5, r7
 80003da:	4661      	mov	r1, ip
 80003dc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003de:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e0:	2e01      	cmp	r6, #1
 80003e2:	d80f      	bhi.n	8000404 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003e4:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003e6:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003e8:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003ea:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003ec:	40bd      	lsls	r5, r7
 80003ee:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003f0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003f2:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003f4:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003f6:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003f8:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003fa:	2101      	movs	r1, #1
 80003fc:	400d      	ands	r5, r1
 80003fe:	409d      	lsls	r5, r3
 8000400:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000402:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000404:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000406:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000408:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800040a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800040c:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800040e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000410:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000412:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000414:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000416:	420a      	tst	r2, r1
 8000418:	d04b      	beq.n	80004b2 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	2101      	movs	r1, #1
 800041c:	4c26      	ldr	r4, [pc, #152]	; (80004b8 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000420:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000422:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000424:	430d      	orrs	r5, r1
 8000426:	61a5      	str	r5, [r4, #24]
 8000428:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800042a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042c:	400c      	ands	r4, r1
 800042e:	9405      	str	r4, [sp, #20]
 8000430:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000432:	240f      	movs	r4, #15
 8000434:	4921      	ldr	r1, [pc, #132]	; (80004bc <HAL_GPIO_Init+0x14c>)
 8000436:	00ad      	lsls	r5, r5, #2
 8000438:	00b6      	lsls	r6, r6, #2
 800043a:	186d      	adds	r5, r5, r1
 800043c:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000440:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000442:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000444:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000446:	2400      	movs	r4, #0
 8000448:	4288      	cmp	r0, r1
 800044a:	d00c      	beq.n	8000466 <HAL_GPIO_Init+0xf6>
 800044c:	491c      	ldr	r1, [pc, #112]	; (80004c0 <HAL_GPIO_Init+0x150>)
 800044e:	3401      	adds	r4, #1
 8000450:	4288      	cmp	r0, r1
 8000452:	d008      	beq.n	8000466 <HAL_GPIO_Init+0xf6>
 8000454:	491b      	ldr	r1, [pc, #108]	; (80004c4 <HAL_GPIO_Init+0x154>)
 8000456:	3401      	adds	r4, #1
 8000458:	4288      	cmp	r0, r1
 800045a:	d004      	beq.n	8000466 <HAL_GPIO_Init+0xf6>
 800045c:	491a      	ldr	r1, [pc, #104]	; (80004c8 <HAL_GPIO_Init+0x158>)
 800045e:	3403      	adds	r4, #3
 8000460:	4288      	cmp	r0, r1
 8000462:	d100      	bne.n	8000466 <HAL_GPIO_Init+0xf6>
 8000464:	3c02      	subs	r4, #2
 8000466:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000468:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800046a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 800046c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800046e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000470:	4c16      	ldr	r4, [pc, #88]	; (80004cc <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000472:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000474:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000476:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000478:	03d1      	lsls	r1, r2, #15
 800047a:	d401      	bmi.n	8000480 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800047c:	003e      	movs	r6, r7
 800047e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000480:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000482:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000484:	9e00      	ldr	r6, [sp, #0]
 8000486:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000488:	0391      	lsls	r1, r2, #14
 800048a:	d401      	bmi.n	8000490 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800048c:	003e      	movs	r6, r7
 800048e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000490:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000492:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000494:	9e00      	ldr	r6, [sp, #0]
 8000496:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000498:	02d1      	lsls	r1, r2, #11
 800049a:	d401      	bmi.n	80004a0 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800049c:	003e      	movs	r6, r7
 800049e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80004a0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80004a2:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80004a4:	9f00      	ldr	r7, [sp, #0]
 80004a6:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a8:	0292      	lsls	r2, r2, #10
 80004aa:	d401      	bmi.n	80004b0 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004ac:	402e      	ands	r6, r5
 80004ae:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80004b0:	60e7      	str	r7, [r4, #12]
    position++;
 80004b2:	3301      	adds	r3, #1
 80004b4:	e762      	b.n	800037c <HAL_GPIO_Init+0xc>
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000
 80004c0:	48000400 	.word	0x48000400
 80004c4:	48000800 	.word	0x48000800
 80004c8:	48000c00 	.word	0x48000c00
 80004cc:	40010400 	.word	0x40010400

080004d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	d001      	beq.n	80004d8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004d4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004d6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004d8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004da:	e7fc      	b.n	80004d6 <HAL_GPIO_WritePin+0x6>

080004dc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004dc:	6943      	ldr	r3, [r0, #20]
 80004de:	4059      	eors	r1, r3
 80004e0:	6141      	str	r1, [r0, #20]
}
 80004e2:	4770      	bx	lr

080004e4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80004e4:	6803      	ldr	r3, [r0, #0]
 80004e6:	699a      	ldr	r2, [r3, #24]
 80004e8:	0792      	lsls	r2, r2, #30
 80004ea:	d501      	bpl.n	80004f0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80004ec:	2200      	movs	r2, #0
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80004f0:	2201      	movs	r2, #1
 80004f2:	6999      	ldr	r1, [r3, #24]
 80004f4:	4211      	tst	r1, r2
 80004f6:	d102      	bne.n	80004fe <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80004f8:	6999      	ldr	r1, [r3, #24]
 80004fa:	430a      	orrs	r2, r1
 80004fc:	619a      	str	r2, [r3, #24]
  }
}
 80004fe:	4770      	bx	lr

08000500 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000500:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000502:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 8000506:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000508:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800050a:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800050c:	9d03      	ldr	r5, [sp, #12]
 800050e:	0d89      	lsrs	r1, r1, #22
 8000510:	432b      	orrs	r3, r5
 8000512:	4319      	orrs	r1, r3
 8000514:	0412      	lsls	r2, r2, #16
 8000516:	430a      	orrs	r2, r1
 8000518:	4302      	orrs	r2, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800051a:	6062      	str	r2, [r4, #4]
}
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	fc009800 	.word	0xfc009800

08000524 <I2C_WaitOnFlagUntilTimeout>:
{
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	0004      	movs	r4, r0
 8000528:	000e      	movs	r6, r1
 800052a:	0017      	movs	r7, r2
 800052c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800052e:	6822      	ldr	r2, [r4, #0]
 8000530:	6993      	ldr	r3, [r2, #24]
 8000532:	4033      	ands	r3, r6
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	4259      	negs	r1, r3
 8000538:	414b      	adcs	r3, r1
 800053a:	42bb      	cmp	r3, r7
 800053c:	d001      	beq.n	8000542 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800053e:	2000      	movs	r0, #0
 8000540:	e00e      	b.n	8000560 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8000542:	1c6b      	adds	r3, r5, #1
 8000544:	d0f4      	beq.n	8000530 <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000546:	2d00      	cmp	r5, #0
 8000548:	d10b      	bne.n	8000562 <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State = HAL_I2C_STATE_READY;
 800054a:	0023      	movs	r3, r4
 800054c:	2220      	movs	r2, #32
 800054e:	3341      	adds	r3, #65	; 0x41
 8000550:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000552:	0022      	movs	r2, r4
 8000554:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000556:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000558:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800055a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800055c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800055e:	7023      	strb	r3, [r4, #0]
}
 8000560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000562:	f7ff fe91 	bl	8000288 <HAL_GetTick>
 8000566:	9b06      	ldr	r3, [sp, #24]
 8000568:	1ac0      	subs	r0, r0, r3
 800056a:	4285      	cmp	r5, r0
 800056c:	d2df      	bcs.n	800052e <I2C_WaitOnFlagUntilTimeout+0xa>
 800056e:	e7ec      	b.n	800054a <I2C_WaitOnFlagUntilTimeout+0x26>

08000570 <I2C_IsAcknowledgeFailed>:
{
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000572:	6803      	ldr	r3, [r0, #0]
{
 8000574:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000576:	6998      	ldr	r0, [r3, #24]
 8000578:	2310      	movs	r3, #16
{
 800057a:	000e      	movs	r6, r1
 800057c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800057e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000580:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000582:	2800      	cmp	r0, #0
 8000584:	d115      	bne.n	80005b2 <I2C_IsAcknowledgeFailed+0x42>
}
 8000586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000588:	1c72      	adds	r2, r6, #1
 800058a:	d013      	beq.n	80005b4 <I2C_IsAcknowledgeFailed+0x44>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800058c:	2e00      	cmp	r6, #0
 800058e:	d10b      	bne.n	80005a8 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 8000590:	0023      	movs	r3, r4
 8000592:	2220      	movs	r2, #32
 8000594:	3341      	adds	r3, #65	; 0x41
 8000596:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000598:	0022      	movs	r2, r4
 800059a:	2300      	movs	r3, #0
 800059c:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800059e:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80005a0:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 80005a2:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 80005a4:	7023      	strb	r3, [r4, #0]
 80005a6:	e7ee      	b.n	8000586 <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80005a8:	f7ff fe6e 	bl	8000288 <HAL_GetTick>
 80005ac:	1bc0      	subs	r0, r0, r7
 80005ae:	4286      	cmp	r6, r0
 80005b0:	d3ee      	bcc.n	8000590 <I2C_IsAcknowledgeFailed+0x20>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80005b2:	6823      	ldr	r3, [r4, #0]
 80005b4:	699a      	ldr	r2, [r3, #24]
 80005b6:	422a      	tst	r2, r5
 80005b8:	d0e6      	beq.n	8000588 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005ba:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80005bc:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005be:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80005c0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80005c2:	f7ff ff8f 	bl	80004e4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80005c6:	6822      	ldr	r2, [r4, #0]
 80005c8:	4908      	ldr	r1, [pc, #32]	; (80005ec <I2C_IsAcknowledgeFailed+0x7c>)
 80005ca:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 80005cc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80005ce:	400b      	ands	r3, r1
 80005d0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80005d2:	2304      	movs	r3, #4
 80005d4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80005d6:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005d8:	0022      	movs	r2, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80005da:	3341      	adds	r3, #65	; 0x41
 80005dc:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005de:	2300      	movs	r3, #0
 80005e0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80005e2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005e4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80005e6:	7023      	strb	r3, [r4, #0]
 80005e8:	e7cd      	b.n	8000586 <I2C_IsAcknowledgeFailed+0x16>
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	fe00e800 	.word	0xfe00e800

080005f0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	0004      	movs	r4, r0
 80005f4:	000d      	movs	r5, r1
 80005f6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80005f8:	2702      	movs	r7, #2
 80005fa:	6823      	ldr	r3, [r4, #0]
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	423b      	tst	r3, r7
 8000600:	d001      	beq.n	8000606 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000602:	2000      	movs	r0, #0
 8000604:	e018      	b.n	8000638 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000606:	0032      	movs	r2, r6
 8000608:	0029      	movs	r1, r5
 800060a:	0020      	movs	r0, r4
 800060c:	f7ff ffb0 	bl	8000570 <I2C_IsAcknowledgeFailed>
 8000610:	2800      	cmp	r0, #0
 8000612:	d118      	bne.n	8000646 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8000614:	1c6b      	adds	r3, r5, #1
 8000616:	d0f0      	beq.n	80005fa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000618:	2d00      	cmp	r5, #0
 800061a:	d10e      	bne.n	800063a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800061c:	2220      	movs	r2, #32
 800061e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000620:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000622:	4313      	orrs	r3, r2
 8000624:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000626:	0023      	movs	r3, r4
 8000628:	3341      	adds	r3, #65	; 0x41
 800062a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800062c:	0022      	movs	r2, r4
 800062e:	2300      	movs	r3, #0
 8000630:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000632:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000634:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000636:	7023      	strb	r3, [r4, #0]
}
 8000638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800063a:	f7ff fe25 	bl	8000288 <HAL_GetTick>
 800063e:	1b80      	subs	r0, r0, r6
 8000640:	4285      	cmp	r5, r0
 8000642:	d2da      	bcs.n	80005fa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8000644:	e7ea      	b.n	800061c <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 8000646:	2001      	movs	r0, #1
 8000648:	e7f6      	b.n	8000638 <I2C_WaitOnTXISFlagUntilTimeout+0x48>

0800064a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800064a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064c:	0004      	movs	r4, r0
 800064e:	000d      	movs	r5, r1
 8000650:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000652:	2720      	movs	r7, #32
 8000654:	6823      	ldr	r3, [r4, #0]
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	423b      	tst	r3, r7
 800065a:	d001      	beq.n	8000660 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800065c:	2000      	movs	r0, #0
 800065e:	e016      	b.n	800068e <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000660:	0032      	movs	r2, r6
 8000662:	0029      	movs	r1, r5
 8000664:	0020      	movs	r0, r4
 8000666:	f7ff ff83 	bl	8000570 <I2C_IsAcknowledgeFailed>
 800066a:	2800      	cmp	r0, #0
 800066c:	d116      	bne.n	800069c <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800066e:	2d00      	cmp	r5, #0
 8000670:	d10e      	bne.n	8000690 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000672:	2220      	movs	r2, #32
 8000674:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000676:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000678:	4313      	orrs	r3, r2
 800067a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800067c:	0023      	movs	r3, r4
 800067e:	3341      	adds	r3, #65	; 0x41
 8000680:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000682:	0022      	movs	r2, r4
 8000684:	2300      	movs	r3, #0
 8000686:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000688:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800068a:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800068c:	7023      	strb	r3, [r4, #0]
}
 800068e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000690:	f7ff fdfa 	bl	8000288 <HAL_GetTick>
 8000694:	1b80      	subs	r0, r0, r6
 8000696:	4285      	cmp	r5, r0
 8000698:	d2dc      	bcs.n	8000654 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800069a:	e7ea      	b.n	8000672 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 800069c:	2001      	movs	r0, #1
 800069e:	e7f6      	b.n	800068e <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

080006a0 <HAL_I2C_Init>:
{
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80006a4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80006a6:	2c00      	cmp	r4, #0
 80006a8:	d03f      	beq.n	800072a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80006aa:	0025      	movs	r5, r4
 80006ac:	3541      	adds	r5, #65	; 0x41
 80006ae:	782b      	ldrb	r3, [r5, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80006b6:	0022      	movs	r2, r4
 80006b8:	3240      	adds	r2, #64	; 0x40
 80006ba:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80006bc:	0020      	movs	r0, r4
 80006be:	f001 fceb 	bl	8002098 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006c2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80006c4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006c6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80006c8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80006ca:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	68a6      	ldr	r6, [r4, #8]
 80006d0:	438a      	bics	r2, r1
 80006d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80006d4:	6861      	ldr	r1, [r4, #4]
 80006d6:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <HAL_I2C_Init+0xa0>)
 80006d8:	400a      	ands	r2, r1
 80006da:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80006dc:	6899      	ldr	r1, [r3, #8]
 80006de:	4a19      	ldr	r2, [pc, #100]	; (8000744 <HAL_I2C_Init+0xa4>)
 80006e0:	4011      	ands	r1, r2
 80006e2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80006e4:	2801      	cmp	r0, #1
 80006e6:	d121      	bne.n	800072c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	0209      	lsls	r1, r1, #8
 80006ec:	4331      	orrs	r1, r6
 80006ee:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80006f0:	6858      	ldr	r0, [r3, #4]
 80006f2:	4915      	ldr	r1, [pc, #84]	; (8000748 <HAL_I2C_Init+0xa8>)
 80006f4:	4301      	orrs	r1, r0
 80006f6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80006f8:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006fa:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80006fc:	400a      	ands	r2, r1
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000700:	6961      	ldr	r1, [r4, #20]
 8000702:	6922      	ldr	r2, [r4, #16]
 8000704:	430a      	orrs	r2, r1
 8000706:	69a1      	ldr	r1, [r4, #24]
 8000708:	0209      	lsls	r1, r1, #8
 800070a:	430a      	orrs	r2, r1
 800070c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800070e:	6a21      	ldr	r1, [r4, #32]
 8000710:	69e2      	ldr	r2, [r4, #28]
 8000712:	430a      	orrs	r2, r1
 8000714:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000716:	2201      	movs	r2, #1
 8000718:	6819      	ldr	r1, [r3, #0]
 800071a:	430a      	orrs	r2, r1
 800071c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800071e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000720:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000722:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000724:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000726:	3442      	adds	r4, #66	; 0x42
 8000728:	7020      	strb	r0, [r4, #0]
}
 800072a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800072c:	2184      	movs	r1, #132	; 0x84
 800072e:	0209      	lsls	r1, r1, #8
 8000730:	4331      	orrs	r1, r6
 8000732:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000734:	2802      	cmp	r0, #2
 8000736:	d1db      	bne.n	80006f0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	0109      	lsls	r1, r1, #4
 800073c:	6059      	str	r1, [r3, #4]
 800073e:	e7d7      	b.n	80006f0 <HAL_I2C_Init+0x50>
 8000740:	f0ffffff 	.word	0xf0ffffff
 8000744:	ffff7fff 	.word	0xffff7fff
 8000748:	02008000 	.word	0x02008000

0800074c <HAL_I2C_Master_Transmit>:
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800074e:	0005      	movs	r5, r0
{
 8000750:	b087      	sub	sp, #28
 8000752:	9103      	str	r1, [sp, #12]
 8000754:	9204      	str	r2, [sp, #16]
 8000756:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000758:	3541      	adds	r5, #65	; 0x41
 800075a:	782b      	ldrb	r3, [r5, #0]
{
 800075c:	0004      	movs	r4, r0
    return HAL_BUSY;
 800075e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000760:	2b20      	cmp	r3, #32
 8000762:	d157      	bne.n	8000814 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_LOCK(hi2c);
 8000764:	0023      	movs	r3, r4
 8000766:	3340      	adds	r3, #64	; 0x40
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	2a01      	cmp	r2, #1
 800076c:	d052      	beq.n	8000814 <HAL_I2C_Master_Transmit+0xc8>
 800076e:	2601      	movs	r6, #1
 8000770:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000772:	f7ff fd89 	bl	8000288 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000776:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000778:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800077a:	9000      	str	r0, [sp, #0]
 800077c:	2319      	movs	r3, #25
 800077e:	0032      	movs	r2, r6
 8000780:	0209      	lsls	r1, r1, #8
 8000782:	0020      	movs	r0, r4
 8000784:	f7ff fece 	bl	8000524 <I2C_WaitOnFlagUntilTimeout>
 8000788:	2800      	cmp	r0, #0
 800078a:	d142      	bne.n	8000812 <HAL_I2C_Master_Transmit+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800078c:	2321      	movs	r3, #33	; 0x21
 800078e:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000790:	3b11      	subs	r3, #17
 8000792:	19ad      	adds	r5, r5, r6
 8000794:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000796:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000798:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800079a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800079c:	466b      	mov	r3, sp
 800079e:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 80007a0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80007a2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80007a4:	2380      	movs	r3, #128	; 0x80
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80007a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	2aff      	cmp	r2, #255	; 0xff
 80007ac:	d921      	bls.n	80007f2 <HAL_I2C_Master_Transmit+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80007ae:	22ff      	movs	r2, #255	; 0xff
 80007b0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	045b      	lsls	r3, r3, #17
 80007b8:	9903      	ldr	r1, [sp, #12]
 80007ba:	0020      	movs	r0, r4
 80007bc:	f7ff fea0 	bl	8000500 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80007c0:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 80007c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007c4:	003a      	movs	r2, r7
 80007c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80007c8:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d119      	bne.n	8000802 <HAL_I2C_Master_Transmit+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007ce:	f7ff ff3c 	bl	800064a <I2C_WaitOnSTOPFlagUntilTimeout>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d119      	bne.n	800080a <HAL_I2C_Master_Transmit+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007d6:	2120      	movs	r1, #32
 80007d8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80007da:	4e27      	ldr	r6, [pc, #156]	; (8000878 <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007dc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	4032      	ands	r2, r6
 80007e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80007e4:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80007e6:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80007e8:	3341      	adds	r3, #65	; 0x41
 80007ea:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80007ec:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80007ee:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80007f0:	e010      	b.n	8000814 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 80007f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80007f4:	b292      	uxth	r2, r2
 80007f6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	049b      	lsls	r3, r3, #18
 8000800:	e7da      	b.n	80007b8 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000802:	f7ff fef5 	bl	80005f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8000806:	2800      	cmp	r0, #0
 8000808:	d006      	beq.n	8000818 <HAL_I2C_Master_Transmit+0xcc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800080a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800080c:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800080e:	2b04      	cmp	r3, #4
 8000810:	d000      	beq.n	8000814 <HAL_I2C_Master_Transmit+0xc8>
          return HAL_TIMEOUT;
 8000812:	2003      	movs	r0, #3
}
 8000814:	b007      	add	sp, #28
 8000816:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800081a:	6822      	ldr	r2, [r4, #0]
 800081c:	1c59      	adds	r1, r3, #1
 800081e:	6261      	str	r1, [r4, #36]	; 0x24
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000824:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000826:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000828:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800082a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800082c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800082e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000830:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000832:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000834:	2a00      	cmp	r2, #0
 8000836:	d1c4      	bne.n	80007c2 <HAL_I2C_Master_Transmit+0x76>
 8000838:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0c1      	beq.n	80007c2 <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800083e:	9700      	str	r7, [sp, #0]
 8000840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	0020      	movs	r0, r4
 8000846:	f7ff fe6d 	bl	8000524 <I2C_WaitOnFlagUntilTimeout>
 800084a:	2800      	cmp	r0, #0
 800084c:	d1e1      	bne.n	8000812 <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800084e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000850:	2bff      	cmp	r3, #255	; 0xff
 8000852:	d909      	bls.n	8000868 <HAL_I2C_Master_Transmit+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000858:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800085a:	045b      	lsls	r3, r3, #17
 800085c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800085e:	9903      	ldr	r1, [sp, #12]
 8000860:	0020      	movs	r0, r4
 8000862:	f7ff fe4d 	bl	8000500 <I2C_TransferConfig>
 8000866:	e7ac      	b.n	80007c2 <HAL_I2C_Master_Transmit+0x76>
 8000868:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800086a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800086c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800086e:	b292      	uxth	r2, r2
 8000870:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	9000      	str	r0, [sp, #0]
 8000876:	e7f2      	b.n	800085e <HAL_I2C_Master_Transmit+0x112>
 8000878:	fe00e800 	.word	0xfe00e800

0800087c <HAL_I2C_IsDeviceReady>:
{
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	9105      	str	r1, [sp, #20]
 8000882:	001d      	movs	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000884:	0001      	movs	r1, r0
  __IO uint32_t I2C_Trials = 0U;
 8000886:	2300      	movs	r3, #0
{
 8000888:	9204      	str	r2, [sp, #16]
  __IO uint32_t I2C_Trials = 0U;
 800088a:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800088c:	3141      	adds	r1, #65	; 0x41
 800088e:	780b      	ldrb	r3, [r1, #0]
{
 8000890:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000892:	b2db      	uxtb	r3, r3
    return HAL_BUSY;
 8000894:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000896:	2b20      	cmp	r3, #32
 8000898:	d155      	bne.n	8000946 <HAL_I2C_IsDeviceReady+0xca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800089a:	6822      	ldr	r2, [r4, #0]
 800089c:	6996      	ldr	r6, [r2, #24]
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	0212      	lsls	r2, r2, #8
 80008a2:	4032      	ands	r2, r6
 80008a4:	d14f      	bne.n	8000946 <HAL_I2C_IsDeviceReady+0xca>
    __HAL_LOCK(hi2c);
 80008a6:	0026      	movs	r6, r4
 80008a8:	3640      	adds	r6, #64	; 0x40
 80008aa:	7837      	ldrb	r7, [r6, #0]
 80008ac:	2f01      	cmp	r7, #1
 80008ae:	d04a      	beq.n	8000946 <HAL_I2C_IsDeviceReady+0xca>
 80008b0:	3801      	subs	r0, #1
 80008b2:	7030      	strb	r0, [r6, #0]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80008b4:	001e      	movs	r6, r3
    hi2c->State = HAL_I2C_STATE_BUSY;
 80008b6:	3023      	adds	r0, #35	; 0x23
 80008b8:	7008      	strb	r0, [r1, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008ba:	6462      	str	r2, [r4, #68]	; 0x44
 80008bc:	9b05      	ldr	r3, [sp, #20]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80008be:	68e1      	ldr	r1, [r4, #12]
 80008c0:	059b      	lsls	r3, r3, #22
 80008c2:	6822      	ldr	r2, [r4, #0]
 80008c4:	0d9b      	lsrs	r3, r3, #22
 80008c6:	2901      	cmp	r1, #1
 80008c8:	d11a      	bne.n	8000900 <HAL_I2C_IsDeviceReady+0x84>
 80008ca:	4936      	ldr	r1, [pc, #216]	; (80009a4 <HAL_I2C_IsDeviceReady+0x128>)
 80008cc:	430b      	orrs	r3, r1
 80008ce:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 80008d0:	f7ff fcda 	bl	8000288 <HAL_GetTick>
 80008d4:	9003      	str	r0, [sp, #12]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80008d6:	0027      	movs	r7, r4
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	3741      	adds	r7, #65	; 0x41
 80008dc:	699a      	ldr	r2, [r3, #24]
 80008de:	4232      	tst	r2, r6
 80008e0:	d018      	beq.n	8000914 <HAL_I2C_IsDeviceReady+0x98>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80008e2:	2710      	movs	r7, #16
 80008e4:	699a      	ldr	r2, [r3, #24]
 80008e6:	403a      	ands	r2, r7
 80008e8:	d12f      	bne.n	800094a <HAL_I2C_IsDeviceReady+0xce>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80008ea:	9b03      	ldr	r3, [sp, #12]
 80008ec:	2120      	movs	r1, #32
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	0020      	movs	r0, r4
 80008f2:	002b      	movs	r3, r5
 80008f4:	f7ff fe16 	bl	8000524 <I2C_WaitOnFlagUntilTimeout>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d01c      	beq.n	8000936 <HAL_I2C_IsDeviceReady+0xba>
    return HAL_TIMEOUT;
 80008fc:	2003      	movs	r0, #3
 80008fe:	e022      	b.n	8000946 <HAL_I2C_IsDeviceReady+0xca>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000900:	21a0      	movs	r1, #160	; 0xa0
 8000902:	0189      	lsls	r1, r1, #6
 8000904:	e7e2      	b.n	80008cc <HAL_I2C_IsDeviceReady+0x50>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000906:	f7ff fcbf 	bl	8000288 <HAL_GetTick>
 800090a:	9b03      	ldr	r3, [sp, #12]
 800090c:	1ac0      	subs	r0, r0, r3
 800090e:	4285      	cmp	r5, r0
 8000910:	d2e1      	bcs.n	80008d6 <HAL_I2C_IsDeviceReady+0x5a>
 8000912:	e00a      	b.n	800092a <HAL_I2C_IsDeviceReady+0xae>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000914:	2110      	movs	r1, #16
 8000916:	699a      	ldr	r2, [r3, #24]
 8000918:	420a      	tst	r2, r1
 800091a:	d1e2      	bne.n	80008e2 <HAL_I2C_IsDeviceReady+0x66>
 800091c:	783a      	ldrb	r2, [r7, #0]
 800091e:	2aa0      	cmp	r2, #160	; 0xa0
 8000920:	d0df      	beq.n	80008e2 <HAL_I2C_IsDeviceReady+0x66>
        if (Timeout != HAL_MAX_DELAY)
 8000922:	1c6a      	adds	r2, r5, #1
 8000924:	d0da      	beq.n	80008dc <HAL_I2C_IsDeviceReady+0x60>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000926:	2d00      	cmp	r5, #0
 8000928:	d1ed      	bne.n	8000906 <HAL_I2C_IsDeviceReady+0x8a>
            hi2c->State = HAL_I2C_STATE_READY;
 800092a:	2320      	movs	r3, #32
 800092c:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(hi2c);
 800092e:	2300      	movs	r3, #0
 8000930:	3440      	adds	r4, #64	; 0x40
 8000932:	7023      	strb	r3, [r4, #0]
 8000934:	e7e2      	b.n	80008fc <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000936:	2320      	movs	r3, #32
 8000938:	6822      	ldr	r2, [r4, #0]
 800093a:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800093c:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 800093e:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8000940:	3241      	adds	r2, #65	; 0x41
 8000942:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000944:	7020      	strb	r0, [r4, #0]
}
 8000946:	b009      	add	sp, #36	; 0x24
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800094a:	9b03      	ldr	r3, [sp, #12]
 800094c:	2200      	movs	r2, #0
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	0031      	movs	r1, r6
 8000952:	002b      	movs	r3, r5
 8000954:	0020      	movs	r0, r4
 8000956:	f7ff fde5 	bl	8000524 <I2C_WaitOnFlagUntilTimeout>
 800095a:	1e02      	subs	r2, r0, #0
 800095c:	d1ce      	bne.n	80008fc <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000962:	61de      	str	r6, [r3, #28]
      if (I2C_Trials++ == Trials)
 8000964:	9907      	ldr	r1, [sp, #28]
 8000966:	1c48      	adds	r0, r1, #1
 8000968:	9007      	str	r0, [sp, #28]
 800096a:	9804      	ldr	r0, [sp, #16]
 800096c:	4281      	cmp	r1, r0
 800096e:	d10f      	bne.n	8000990 <HAL_I2C_IsDeviceReady+0x114>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	6858      	ldr	r0, [r3, #4]
 8000974:	01c9      	lsls	r1, r1, #7
 8000976:	4301      	orrs	r1, r0
 8000978:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800097a:	9b03      	ldr	r3, [sp, #12]
 800097c:	0031      	movs	r1, r6
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	0020      	movs	r0, r4
 8000982:	002b      	movs	r3, r5
 8000984:	f7ff fdce 	bl	8000524 <I2C_WaitOnFlagUntilTimeout>
 8000988:	2800      	cmp	r0, #0
 800098a:	d1b7      	bne.n	80008fc <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	61de      	str	r6, [r3, #28]
    while (I2C_Trials < Trials);
 8000990:	9b07      	ldr	r3, [sp, #28]
 8000992:	9a04      	ldr	r2, [sp, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d900      	bls.n	800099a <HAL_I2C_IsDeviceReady+0x11e>
 8000998:	e790      	b.n	80008bc <HAL_I2C_IsDeviceReady+0x40>
    hi2c->State = HAL_I2C_STATE_READY;
 800099a:	0023      	movs	r3, r4
 800099c:	2220      	movs	r2, #32
 800099e:	3341      	adds	r3, #65	; 0x41
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e7c4      	b.n	800092e <HAL_I2C_IsDeviceReady+0xb2>
 80009a4:	02002000 	.word	0x02002000

080009a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009aa:	0004      	movs	r4, r0
 80009ac:	3441      	adds	r4, #65	; 0x41
 80009ae:	7822      	ldrb	r2, [r4, #0]
{
 80009b0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009b2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80009b4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009b6:	2a20      	cmp	r2, #32
 80009b8:	d118      	bne.n	80009ec <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80009ba:	001d      	movs	r5, r3
 80009bc:	3540      	adds	r5, #64	; 0x40
 80009be:	782e      	ldrb	r6, [r5, #0]
 80009c0:	2e01      	cmp	r6, #1
 80009c2:	d013      	beq.n	80009ec <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80009c4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80009c6:	3022      	adds	r0, #34	; 0x22
 80009c8:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80009ca:	681e      	ldr	r6, [r3, #0]
 80009cc:	3823      	subs	r0, #35	; 0x23
 80009ce:	4386      	bics	r6, r0
 80009d0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80009d2:	681e      	ldr	r6, [r3, #0]
 80009d4:	4f06      	ldr	r7, [pc, #24]	; (80009f0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80009d6:	403e      	ands	r6, r7
 80009d8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80009da:	681e      	ldr	r6, [r3, #0]
 80009dc:	4331      	orrs	r1, r6
 80009de:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80009e0:	6819      	ldr	r1, [r3, #0]
 80009e2:	4308      	orrs	r0, r1
 80009e4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80009e6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80009e8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80009ea:	7028      	strb	r0, [r5, #0]
  }
}
 80009ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	ffffefff 	.word	0xffffefff

080009f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009f6:	0005      	movs	r5, r0
 80009f8:	3541      	adds	r5, #65	; 0x41
 80009fa:	782a      	ldrb	r2, [r5, #0]
{
 80009fc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009fe:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000a00:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a02:	2a20      	cmp	r2, #32
 8000a04:	d117      	bne.n	8000a36 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000a06:	001c      	movs	r4, r3
 8000a08:	3440      	adds	r4, #64	; 0x40
 8000a0a:	7826      	ldrb	r6, [r4, #0]
 8000a0c:	2e01      	cmp	r6, #1
 8000a0e:	d012      	beq.n	8000a36 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000a10:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a12:	3022      	adds	r0, #34	; 0x22
 8000a14:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000a16:	681e      	ldr	r6, [r3, #0]
 8000a18:	3823      	subs	r0, #35	; 0x23
 8000a1a:	4386      	bics	r6, r0
 8000a1c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000a1e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000a20:	4f05      	ldr	r7, [pc, #20]	; (8000a38 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000a22:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000a24:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000a26:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000a28:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000a2a:	6819      	ldr	r1, [r3, #0]
 8000a2c:	4308      	orrs	r0, r1
 8000a2e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000a30:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a32:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000a34:	7020      	strb	r0, [r4, #0]
  }
}
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	fffff0ff 	.word	0xfffff0ff

08000a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a3e:	6803      	ldr	r3, [r0, #0]
{
 8000a40:	b085      	sub	sp, #20
 8000a42:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a44:	07db      	lsls	r3, r3, #31
 8000a46:	d42f      	bmi.n	8000aa8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	079b      	lsls	r3, r3, #30
 8000a4c:	d500      	bpl.n	8000a50 <HAL_RCC_OscConfig+0x14>
 8000a4e:	e081      	b.n	8000b54 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	071b      	lsls	r3, r3, #28
 8000a54:	d500      	bpl.n	8000a58 <HAL_RCC_OscConfig+0x1c>
 8000a56:	e0bc      	b.n	8000bd2 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	075b      	lsls	r3, r3, #29
 8000a5c:	d500      	bpl.n	8000a60 <HAL_RCC_OscConfig+0x24>
 8000a5e:	e0df      	b.n	8000c20 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	06db      	lsls	r3, r3, #27
 8000a64:	d51a      	bpl.n	8000a9c <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000a66:	696a      	ldr	r2, [r5, #20]
 8000a68:	4cb5      	ldr	r4, [pc, #724]	; (8000d40 <HAL_RCC_OscConfig+0x304>)
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	2a01      	cmp	r2, #1
 8000a6e:	d000      	beq.n	8000a72 <HAL_RCC_OscConfig+0x36>
 8000a70:	e14b      	b.n	8000d0a <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a72:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a74:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a80:	f7ff fc02 	bl	8000288 <HAL_GetTick>
 8000a84:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a88:	4233      	tst	r3, r6
 8000a8a:	d100      	bne.n	8000a8e <HAL_RCC_OscConfig+0x52>
 8000a8c:	e136      	b.n	8000cfc <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000a8e:	21f8      	movs	r1, #248	; 0xf8
 8000a90:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a92:	69ab      	ldr	r3, [r5, #24]
 8000a94:	438a      	bics	r2, r1
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a9c:	6a29      	ldr	r1, [r5, #32]
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	d000      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x68>
 8000aa2:	e159      	b.n	8000d58 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e013      	b.n	8000ad0 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000aa8:	210c      	movs	r1, #12
 8000aaa:	4ca5      	ldr	r4, [pc, #660]	; (8000d40 <HAL_RCC_OscConfig+0x304>)
 8000aac:	6862      	ldr	r2, [r4, #4]
 8000aae:	400a      	ands	r2, r1
 8000ab0:	2a04      	cmp	r2, #4
 8000ab2:	d006      	beq.n	8000ac2 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ab4:	6863      	ldr	r3, [r4, #4]
 8000ab6:	400b      	ands	r3, r1
 8000ab8:	2b08      	cmp	r3, #8
 8000aba:	d10b      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x98>
 8000abc:	6863      	ldr	r3, [r4, #4]
 8000abe:	03db      	lsls	r3, r3, #15
 8000ac0:	d508      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	039b      	lsls	r3, r3, #14
 8000ac6:	d5bf      	bpl.n	8000a48 <HAL_RCC_OscConfig+0xc>
 8000ac8:	686b      	ldr	r3, [r5, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1bc      	bne.n	8000a48 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ace:	2001      	movs	r0, #1
}
 8000ad0:	b005      	add	sp, #20
 8000ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad4:	686b      	ldr	r3, [r5, #4]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d113      	bne.n	8000b02 <HAL_RCC_OscConfig+0xc6>
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	6822      	ldr	r2, [r4, #0]
 8000ade:	025b      	lsls	r3, r3, #9
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fbd0 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000aea:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aec:	02b6      	lsls	r6, r6, #10
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	4233      	tst	r3, r6
 8000af2:	d1a9      	bne.n	8000a48 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000af4:	f7ff fbc8 	bl	8000288 <HAL_GetTick>
 8000af8:	1bc0      	subs	r0, r0, r7
 8000afa:	2864      	cmp	r0, #100	; 0x64
 8000afc:	d9f7      	bls.n	8000aee <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000afe:	2003      	movs	r0, #3
 8000b00:	e7e6      	b.n	8000ad0 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d116      	bne.n	8000b34 <HAL_RCC_OscConfig+0xf8>
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	4a8e      	ldr	r2, [pc, #568]	; (8000d44 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b0a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	6023      	str	r3, [r4, #0]
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	4a8d      	ldr	r2, [pc, #564]	; (8000d48 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b14:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b16:	4013      	ands	r3, r2
 8000b18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b1a:	f7ff fbb5 	bl	8000288 <HAL_GetTick>
 8000b1e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	4233      	tst	r3, r6
 8000b24:	d100      	bne.n	8000b28 <HAL_RCC_OscConfig+0xec>
 8000b26:	e78f      	b.n	8000a48 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b28:	f7ff fbae 	bl	8000288 <HAL_GetTick>
 8000b2c:	1bc0      	subs	r0, r0, r7
 8000b2e:	2864      	cmp	r0, #100	; 0x64
 8000b30:	d9f6      	bls.n	8000b20 <HAL_RCC_OscConfig+0xe4>
 8000b32:	e7e4      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b34:	2b05      	cmp	r3, #5
 8000b36:	d105      	bne.n	8000b44 <HAL_RCC_OscConfig+0x108>
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	6822      	ldr	r2, [r4, #0]
 8000b3c:	02db      	lsls	r3, r3, #11
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	e7ca      	b.n	8000ada <HAL_RCC_OscConfig+0x9e>
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	4a7f      	ldr	r2, [pc, #508]	; (8000d44 <HAL_RCC_OscConfig+0x308>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	6023      	str	r3, [r4, #0]
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	4a7e      	ldr	r2, [pc, #504]	; (8000d48 <HAL_RCC_OscConfig+0x30c>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	e7c6      	b.n	8000ae2 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b54:	220c      	movs	r2, #12
 8000b56:	4c7a      	ldr	r4, [pc, #488]	; (8000d40 <HAL_RCC_OscConfig+0x304>)
 8000b58:	6863      	ldr	r3, [r4, #4]
 8000b5a:	4213      	tst	r3, r2
 8000b5c:	d006      	beq.n	8000b6c <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b5e:	6863      	ldr	r3, [r4, #4]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d110      	bne.n	8000b88 <HAL_RCC_OscConfig+0x14c>
 8000b66:	6863      	ldr	r3, [r4, #4]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	d40d      	bmi.n	8000b88 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b6c:	6823      	ldr	r3, [r4, #0]
 8000b6e:	079b      	lsls	r3, r3, #30
 8000b70:	d502      	bpl.n	8000b78 <HAL_RCC_OscConfig+0x13c>
 8000b72:	68eb      	ldr	r3, [r5, #12]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d1aa      	bne.n	8000ace <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b78:	21f8      	movs	r1, #248	; 0xf8
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	692b      	ldr	r3, [r5, #16]
 8000b7e:	438a      	bics	r2, r1
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	e763      	b.n	8000a50 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b88:	68ea      	ldr	r2, [r5, #12]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d00f      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000b90:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b92:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000b94:	4313      	orrs	r3, r2
 8000b96:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b98:	f7ff fb76 	bl	8000288 <HAL_GetTick>
 8000b9c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	4233      	tst	r3, r6
 8000ba2:	d1e9      	bne.n	8000b78 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba4:	f7ff fb70 	bl	8000288 <HAL_GetTick>
 8000ba8:	1bc0      	subs	r0, r0, r7
 8000baa:	2802      	cmp	r0, #2
 8000bac:	d9f7      	bls.n	8000b9e <HAL_RCC_OscConfig+0x162>
 8000bae:	e7a6      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000bb0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bb2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000bb4:	439a      	bics	r2, r3
 8000bb6:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fb66 	bl	8000288 <HAL_GetTick>
 8000bbc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	4233      	tst	r3, r6
 8000bc2:	d100      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x18a>
 8000bc4:	e744      	b.n	8000a50 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fb5f 	bl	8000288 <HAL_GetTick>
 8000bca:	1bc0      	subs	r0, r0, r7
 8000bcc:	2802      	cmp	r0, #2
 8000bce:	d9f6      	bls.n	8000bbe <HAL_RCC_OscConfig+0x182>
 8000bd0:	e795      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bd2:	69ea      	ldr	r2, [r5, #28]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	4c5a      	ldr	r4, [pc, #360]	; (8000d40 <HAL_RCC_OscConfig+0x304>)
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	d010      	beq.n	8000bfe <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000bdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bde:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000be0:	4313      	orrs	r3, r2
 8000be2:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000be4:	f7ff fb50 	bl	8000288 <HAL_GetTick>
 8000be8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bec:	4233      	tst	r3, r6
 8000bee:	d000      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x1b6>
 8000bf0:	e732      	b.n	8000a58 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bf2:	f7ff fb49 	bl	8000288 <HAL_GetTick>
 8000bf6:	1bc0      	subs	r0, r0, r7
 8000bf8:	2802      	cmp	r0, #2
 8000bfa:	d9f6      	bls.n	8000bea <HAL_RCC_OscConfig+0x1ae>
 8000bfc:	e77f      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000bfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c00:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000c02:	439a      	bics	r2, r3
 8000c04:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c06:	f7ff fb3f 	bl	8000288 <HAL_GetTick>
 8000c0a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c0e:	4233      	tst	r3, r6
 8000c10:	d100      	bne.n	8000c14 <HAL_RCC_OscConfig+0x1d8>
 8000c12:	e721      	b.n	8000a58 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c14:	f7ff fb38 	bl	8000288 <HAL_GetTick>
 8000c18:	1bc0      	subs	r0, r0, r7
 8000c1a:	2802      	cmp	r0, #2
 8000c1c:	d9f6      	bls.n	8000c0c <HAL_RCC_OscConfig+0x1d0>
 8000c1e:	e76e      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c20:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c22:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c24:	4c46      	ldr	r4, [pc, #280]	; (8000d40 <HAL_RCC_OscConfig+0x304>)
 8000c26:	0552      	lsls	r2, r2, #21
 8000c28:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000c2a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c2c:	4213      	tst	r3, r2
 8000c2e:	d108      	bne.n	8000c42 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	69e3      	ldr	r3, [r4, #28]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61e3      	str	r3, [r4, #28]
 8000c36:	69e3      	ldr	r3, [r4, #28]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	9303      	str	r3, [sp, #12]
 8000c3c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c42:	2780      	movs	r7, #128	; 0x80
 8000c44:	4e41      	ldr	r6, [pc, #260]	; (8000d4c <HAL_RCC_OscConfig+0x310>)
 8000c46:	007f      	lsls	r7, r7, #1
 8000c48:	6833      	ldr	r3, [r6, #0]
 8000c4a:	423b      	tst	r3, r7
 8000c4c:	d006      	beq.n	8000c5c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c4e:	68ab      	ldr	r3, [r5, #8]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d113      	bne.n	8000c7c <HAL_RCC_OscConfig+0x240>
 8000c54:	6a22      	ldr	r2, [r4, #32]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	6223      	str	r3, [r4, #32]
 8000c5a:	e030      	b.n	8000cbe <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c5c:	6833      	ldr	r3, [r6, #0]
 8000c5e:	433b      	orrs	r3, r7
 8000c60:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c62:	f7ff fb11 	bl	8000288 <HAL_GetTick>
 8000c66:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c68:	6833      	ldr	r3, [r6, #0]
 8000c6a:	423b      	tst	r3, r7
 8000c6c:	d1ef      	bne.n	8000c4e <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c6e:	f7ff fb0b 	bl	8000288 <HAL_GetTick>
 8000c72:	9b01      	ldr	r3, [sp, #4]
 8000c74:	1ac0      	subs	r0, r0, r3
 8000c76:	2864      	cmp	r0, #100	; 0x64
 8000c78:	d9f6      	bls.n	8000c68 <HAL_RCC_OscConfig+0x22c>
 8000c7a:	e740      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
 8000c7c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d114      	bne.n	8000cac <HAL_RCC_OscConfig+0x270>
 8000c82:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c84:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c86:	4393      	bics	r3, r2
 8000c88:	6223      	str	r3, [r4, #32]
 8000c8a:	6a23      	ldr	r3, [r4, #32]
 8000c8c:	3203      	adds	r2, #3
 8000c8e:	4393      	bics	r3, r2
 8000c90:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c92:	f7ff faf9 	bl	8000288 <HAL_GetTick>
 8000c96:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c98:	6a23      	ldr	r3, [r4, #32]
 8000c9a:	423b      	tst	r3, r7
 8000c9c:	d025      	beq.n	8000cea <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c9e:	f7ff faf3 	bl	8000288 <HAL_GetTick>
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HAL_RCC_OscConfig+0x314>)
 8000ca4:	1b80      	subs	r0, r0, r6
 8000ca6:	4298      	cmp	r0, r3
 8000ca8:	d9f6      	bls.n	8000c98 <HAL_RCC_OscConfig+0x25c>
 8000caa:	e728      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cac:	2b05      	cmp	r3, #5
 8000cae:	d10b      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x28c>
 8000cb0:	6a21      	ldr	r1, [r4, #32]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6223      	str	r3, [r4, #32]
 8000cb8:	6a23      	ldr	r3, [r4, #32]
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fae3 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000cc4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc6:	e00d      	b.n	8000ce4 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc8:	6a23      	ldr	r3, [r4, #32]
 8000cca:	4393      	bics	r3, r2
 8000ccc:	2204      	movs	r2, #4
 8000cce:	6223      	str	r3, [r4, #32]
 8000cd0:	6a23      	ldr	r3, [r4, #32]
 8000cd2:	4393      	bics	r3, r2
 8000cd4:	e7c0      	b.n	8000c58 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cd6:	f7ff fad7 	bl	8000288 <HAL_GetTick>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <HAL_RCC_OscConfig+0x314>)
 8000cdc:	1b80      	subs	r0, r0, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d900      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x2a8>
 8000ce2:	e70c      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ce4:	6a23      	ldr	r3, [r4, #32]
 8000ce6:	423b      	tst	r3, r7
 8000ce8:	d0f5      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000cea:	9b00      	ldr	r3, [sp, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d000      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x2b6>
 8000cf0:	e6b6      	b.n	8000a60 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cf2:	69e3      	ldr	r3, [r4, #28]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <HAL_RCC_OscConfig+0x318>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61e3      	str	r3, [r4, #28]
 8000cfa:	e6b1      	b.n	8000a60 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cfc:	f7ff fac4 	bl	8000288 <HAL_GetTick>
 8000d00:	1bc0      	subs	r0, r0, r7
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d800      	bhi.n	8000d08 <HAL_RCC_OscConfig+0x2cc>
 8000d06:	e6be      	b.n	8000a86 <HAL_RCC_OscConfig+0x4a>
 8000d08:	e6f9      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d0a:	3205      	adds	r2, #5
 8000d0c:	d103      	bne.n	8000d16 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d0e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d10:	439a      	bics	r2, r3
 8000d12:	6362      	str	r2, [r4, #52]	; 0x34
 8000d14:	e6bb      	b.n	8000a8e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d16:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d18:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d1a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000d1c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d1e:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000d20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d22:	4393      	bics	r3, r2
 8000d24:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000d26:	f7ff faaf 	bl	8000288 <HAL_GetTick>
 8000d2a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d2e:	4233      	tst	r3, r6
 8000d30:	d100      	bne.n	8000d34 <HAL_RCC_OscConfig+0x2f8>
 8000d32:	e6b3      	b.n	8000a9c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d34:	f7ff faa8 	bl	8000288 <HAL_GetTick>
 8000d38:	1bc0      	subs	r0, r0, r7
 8000d3a:	2802      	cmp	r0, #2
 8000d3c:	d9f6      	bls.n	8000d2c <HAL_RCC_OscConfig+0x2f0>
 8000d3e:	e6de      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
 8000d40:	40021000 	.word	0x40021000
 8000d44:	fffeffff 	.word	0xfffeffff
 8000d48:	fffbffff 	.word	0xfffbffff
 8000d4c:	40007000 	.word	0x40007000
 8000d50:	00001388 	.word	0x00001388
 8000d54:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d58:	220c      	movs	r2, #12
 8000d5a:	4c26      	ldr	r4, [pc, #152]	; (8000df4 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000d5c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d5e:	6863      	ldr	r3, [r4, #4]
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d100      	bne.n	8000d68 <HAL_RCC_OscConfig+0x32c>
 8000d66:	e6b3      	b.n	8000ad0 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <HAL_RCC_OscConfig+0x3bc>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d70:	2902      	cmp	r1, #2
 8000d72:	d12f      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000d74:	f7ff fa88 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d78:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d7a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d7c:	04b6      	lsls	r6, r6, #18
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	4233      	tst	r3, r6
 8000d82:	d121      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d84:	220f      	movs	r2, #15
 8000d86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d88:	4393      	bics	r3, r2
 8000d8a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d90:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d92:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d94:	6862      	ldr	r2, [r4, #4]
 8000d96:	430b      	orrs	r3, r1
 8000d98:	4918      	ldr	r1, [pc, #96]	; (8000dfc <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d9a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	6822      	ldr	r2, [r4, #0]
 8000da6:	045b      	lsls	r3, r3, #17
 8000da8:	4313      	orrs	r3, r2
 8000daa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dac:	f7ff fa6c 	bl	8000288 <HAL_GetTick>
 8000db0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000db2:	04ad      	lsls	r5, r5, #18
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	422b      	tst	r3, r5
 8000db8:	d000      	beq.n	8000dbc <HAL_RCC_OscConfig+0x380>
 8000dba:	e673      	b.n	8000aa4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dbc:	f7ff fa64 	bl	8000288 <HAL_GetTick>
 8000dc0:	1b80      	subs	r0, r0, r6
 8000dc2:	2802      	cmp	r0, #2
 8000dc4:	d9f6      	bls.n	8000db4 <HAL_RCC_OscConfig+0x378>
 8000dc6:	e69a      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc8:	f7ff fa5e 	bl	8000288 <HAL_GetTick>
 8000dcc:	1bc0      	subs	r0, r0, r7
 8000dce:	2802      	cmp	r0, #2
 8000dd0:	d9d5      	bls.n	8000d7e <HAL_RCC_OscConfig+0x342>
 8000dd2:	e694      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fa58 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000dda:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ddc:	04ad      	lsls	r5, r5, #18
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	422b      	tst	r3, r5
 8000de2:	d100      	bne.n	8000de6 <HAL_RCC_OscConfig+0x3aa>
 8000de4:	e65e      	b.n	8000aa4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de6:	f7ff fa4f 	bl	8000288 <HAL_GetTick>
 8000dea:	1b80      	subs	r0, r0, r6
 8000dec:	2802      	cmp	r0, #2
 8000dee:	d9f6      	bls.n	8000dde <HAL_RCC_OscConfig+0x3a2>
 8000df0:	e685      	b.n	8000afe <HAL_RCC_OscConfig+0xc2>
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40021000 	.word	0x40021000
 8000df8:	feffffff 	.word	0xfeffffff
 8000dfc:	ffc2ffff 	.word	0xffc2ffff

08000e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e00:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e02:	4c14      	ldr	r4, [pc, #80]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000e04:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e06:	2210      	movs	r2, #16
 8000e08:	0021      	movs	r1, r4
 8000e0a:	4668      	mov	r0, sp
 8000e0c:	f001 fa44 	bl	8002298 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000e10:	0021      	movs	r1, r4
 8000e12:	ad04      	add	r5, sp, #16
 8000e14:	2210      	movs	r2, #16
 8000e16:	3110      	adds	r1, #16
 8000e18:	0028      	movs	r0, r5
 8000e1a:	f001 fa3d 	bl	8002298 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e1e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000e20:	4e0d      	ldr	r6, [pc, #52]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e22:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e24:	401a      	ands	r2, r3
 8000e26:	2a08      	cmp	r2, #8
 8000e28:	d111      	bne.n	8000e4e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	466a      	mov	r2, sp
 8000e2e:	0c99      	lsrs	r1, r3, #18
 8000e30:	4001      	ands	r1, r0
 8000e32:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e34:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000e36:	4002      	ands	r2, r0
 8000e38:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e3a:	03db      	lsls	r3, r3, #15
 8000e3c:	d505      	bpl.n	8000e4a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x5c>)
 8000e40:	f7ff f96c 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000e44:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e46:	b008      	add	sp, #32
 8000e48:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_RCC_GetSysClockFreq+0x60>)
 8000e4c:	e7fa      	b.n	8000e44 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000e50:	e7f9      	b.n	8000e46 <HAL_RCC_GetSysClockFreq+0x46>
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	080022d4 	.word	0x080022d4
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	007a1200 	.word	0x007a1200
 8000e60:	003d0900 	.word	0x003d0900

08000e64 <HAL_RCC_ClockConfig>:
{
 8000e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e66:	2201      	movs	r2, #1
 8000e68:	4c43      	ldr	r4, [pc, #268]	; (8000f78 <HAL_RCC_ClockConfig+0x114>)
{
 8000e6a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e6c:	6823      	ldr	r3, [r4, #0]
{
 8000e6e:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e70:	4013      	ands	r3, r2
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d31c      	bcc.n	8000eb0 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e76:	6832      	ldr	r2, [r6, #0]
 8000e78:	0793      	lsls	r3, r2, #30
 8000e7a:	d423      	bmi.n	8000ec4 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e7c:	07d3      	lsls	r3, r2, #31
 8000e7e:	d429      	bmi.n	8000ed4 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e80:	2301      	movs	r3, #1
 8000e82:	6822      	ldr	r2, [r4, #0]
 8000e84:	401a      	ands	r2, r3
 8000e86:	4297      	cmp	r7, r2
 8000e88:	d367      	bcc.n	8000f5a <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e8a:	6833      	ldr	r3, [r6, #0]
 8000e8c:	4c3b      	ldr	r4, [pc, #236]	; (8000f7c <HAL_RCC_ClockConfig+0x118>)
 8000e8e:	075b      	lsls	r3, r3, #29
 8000e90:	d46a      	bmi.n	8000f68 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000e92:	f7ff ffb5 	bl	8000e00 <HAL_RCC_GetSysClockFreq>
 8000e96:	6863      	ldr	r3, [r4, #4]
 8000e98:	4a39      	ldr	r2, [pc, #228]	; (8000f80 <HAL_RCC_ClockConfig+0x11c>)
 8000e9a:	061b      	lsls	r3, r3, #24
 8000e9c:	0f1b      	lsrs	r3, r3, #28
 8000e9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ea0:	40d8      	lsrs	r0, r3
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <HAL_RCC_ClockConfig+0x120>)
 8000ea4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff f9c4 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000eac:	2000      	movs	r0, #0
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	4393      	bics	r3, r2
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d0da      	beq.n	8000e76 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000ec0:	2001      	movs	r0, #1
}
 8000ec2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ec4:	20f0      	movs	r0, #240	; 0xf0
 8000ec6:	492d      	ldr	r1, [pc, #180]	; (8000f7c <HAL_RCC_ClockConfig+0x118>)
 8000ec8:	684b      	ldr	r3, [r1, #4]
 8000eca:	4383      	bics	r3, r0
 8000ecc:	68b0      	ldr	r0, [r6, #8]
 8000ece:	4303      	orrs	r3, r0
 8000ed0:	604b      	str	r3, [r1, #4]
 8000ed2:	e7d3      	b.n	8000e7c <HAL_RCC_ClockConfig+0x18>
 8000ed4:	4d29      	ldr	r5, [pc, #164]	; (8000f7c <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ed6:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eda:	2a01      	cmp	r2, #1
 8000edc:	d11a      	bne.n	8000f14 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ede:	039b      	lsls	r3, r3, #14
 8000ee0:	d5ee      	bpl.n	8000ec0 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	686b      	ldr	r3, [r5, #4]
 8000ee6:	438b      	bics	r3, r1
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000eec:	f7ff f9cc 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ef2:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d115      	bne.n	8000f24 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef8:	220c      	movs	r2, #12
 8000efa:	686b      	ldr	r3, [r5, #4]
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d0be      	beq.n	8000e80 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f02:	f7ff f9c1 	bl	8000288 <HAL_GetTick>
 8000f06:	9b01      	ldr	r3, [sp, #4]
 8000f08:	1ac0      	subs	r0, r0, r3
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <HAL_RCC_ClockConfig+0x124>)
 8000f0c:	4298      	cmp	r0, r3
 8000f0e:	d9f3      	bls.n	8000ef8 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000f10:	2003      	movs	r0, #3
 8000f12:	e7d6      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f14:	2a02      	cmp	r2, #2
 8000f16:	d102      	bne.n	8000f1e <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f18:	019b      	lsls	r3, r3, #6
 8000f1a:	d4e2      	bmi.n	8000ee2 <HAL_RCC_ClockConfig+0x7e>
 8000f1c:	e7d0      	b.n	8000ec0 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1e:	079b      	lsls	r3, r3, #30
 8000f20:	d4df      	bmi.n	8000ee2 <HAL_RCC_ClockConfig+0x7e>
 8000f22:	e7cd      	b.n	8000ec0 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d012      	beq.n	8000f4e <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f28:	220c      	movs	r2, #12
 8000f2a:	686b      	ldr	r3, [r5, #4]
 8000f2c:	4213      	tst	r3, r2
 8000f2e:	d0a7      	beq.n	8000e80 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f30:	f7ff f9aa 	bl	8000288 <HAL_GetTick>
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	1ac0      	subs	r0, r0, r3
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_RCC_ClockConfig+0x124>)
 8000f3a:	4298      	cmp	r0, r3
 8000f3c:	d9f4      	bls.n	8000f28 <HAL_RCC_ClockConfig+0xc4>
 8000f3e:	e7e7      	b.n	8000f10 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f40:	f7ff f9a2 	bl	8000288 <HAL_GetTick>
 8000f44:	9b01      	ldr	r3, [sp, #4]
 8000f46:	1ac0      	subs	r0, r0, r3
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_RCC_ClockConfig+0x124>)
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d8e0      	bhi.n	8000f10 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	686b      	ldr	r3, [r5, #4]
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d1f3      	bne.n	8000f40 <HAL_RCC_ClockConfig+0xdc>
 8000f58:	e792      	b.n	8000e80 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	439a      	bics	r2, r3
 8000f5e:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f60:	6822      	ldr	r2, [r4, #0]
 8000f62:	421a      	tst	r2, r3
 8000f64:	d1ac      	bne.n	8000ec0 <HAL_RCC_ClockConfig+0x5c>
 8000f66:	e790      	b.n	8000e8a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f68:	6863      	ldr	r3, [r4, #4]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_RCC_ClockConfig+0x128>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	68f2      	ldr	r2, [r6, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	6063      	str	r3, [r4, #4]
 8000f74:	e78d      	b.n	8000e92 <HAL_RCC_ClockConfig+0x2e>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40022000 	.word	0x40022000
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	08003080 	.word	0x08003080
 8000f84:	20000008 	.word	0x20000008
 8000f88:	00001388 	.word	0x00001388
 8000f8c:	fffff8ff 	.word	0xfffff8ff

08000f90 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000f90:	4b01      	ldr	r3, [pc, #4]	; (8000f98 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f92:	6818      	ldr	r0, [r3, #0]
}
 8000f94:	4770      	bx	lr
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	20000008 	.word	0x20000008

08000f9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	055b      	lsls	r3, r3, #21
 8000fa4:	0f5b      	lsrs	r3, r3, #29
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000faa:	6810      	ldr	r0, [r2, #0]
 8000fac:	40d8      	lsrs	r0, r3
}    
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	08003090 	.word	0x08003090
 8000fb8:	20000008 	.word	0x20000008

08000fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000fbc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000fbe:	6803      	ldr	r3, [r0, #0]
{
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000fc4:	03db      	lsls	r3, r3, #15
 8000fc6:	d528      	bpl.n	800101a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000fca:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fcc:	4c37      	ldr	r4, [pc, #220]	; (80010ac <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000fce:	0552      	lsls	r2, r2, #21
 8000fd0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000fd2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd4:	4213      	tst	r3, r2
 8000fd6:	d108      	bne.n	8000fea <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	69e3      	ldr	r3, [r4, #28]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61e3      	str	r3, [r4, #28]
 8000fde:	69e3      	ldr	r3, [r4, #28]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	9303      	str	r3, [sp, #12]
 8000fe4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fea:	2780      	movs	r7, #128	; 0x80
 8000fec:	4e30      	ldr	r6, [pc, #192]	; (80010b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000fee:	007f      	lsls	r7, r7, #1
 8000ff0:	6833      	ldr	r3, [r6, #0]
 8000ff2:	423b      	tst	r3, r7
 8000ff4:	d026      	beq.n	8001044 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ff6:	22c0      	movs	r2, #192	; 0xc0
 8000ff8:	6a23      	ldr	r3, [r4, #32]
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	4e2d      	ldr	r6, [pc, #180]	; (80010b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001000:	d132      	bne.n	8001068 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001002:	6a23      	ldr	r3, [r4, #32]
 8001004:	401e      	ands	r6, r3
 8001006:	686b      	ldr	r3, [r5, #4]
 8001008:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800100a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800100c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800100e:	2b01      	cmp	r3, #1
 8001010:	d103      	bne.n	800101a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001012:	69e3      	ldr	r3, [r4, #28]
 8001014:	4a28      	ldr	r2, [pc, #160]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8001016:	4013      	ands	r3, r2
 8001018:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800101a:	682a      	ldr	r2, [r5, #0]
 800101c:	07d3      	lsls	r3, r2, #31
 800101e:	d506      	bpl.n	800102e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001020:	2003      	movs	r0, #3
 8001022:	4922      	ldr	r1, [pc, #136]	; (80010ac <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001024:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001026:	4383      	bics	r3, r0
 8001028:	68a8      	ldr	r0, [r5, #8]
 800102a:	4303      	orrs	r3, r0
 800102c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800102e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001030:	0693      	lsls	r3, r2, #26
 8001032:	d517      	bpl.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001034:	2110      	movs	r1, #16
 8001036:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001038:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800103a:	438b      	bics	r3, r1
 800103c:	68e9      	ldr	r1, [r5, #12]
 800103e:	430b      	orrs	r3, r1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	e00f      	b.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001044:	6833      	ldr	r3, [r6, #0]
 8001046:	433b      	orrs	r3, r7
 8001048:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800104a:	f7ff f91d 	bl	8000288 <HAL_GetTick>
 800104e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001050:	6833      	ldr	r3, [r6, #0]
 8001052:	423b      	tst	r3, r7
 8001054:	d1cf      	bne.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001056:	f7ff f917 	bl	8000288 <HAL_GetTick>
 800105a:	9b01      	ldr	r3, [sp, #4]
 800105c:	1ac0      	subs	r0, r0, r3
 800105e:	2864      	cmp	r0, #100	; 0x64
 8001060:	d9f6      	bls.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8001062:	2003      	movs	r0, #3
}
 8001064:	b005      	add	sp, #20
 8001066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001068:	6869      	ldr	r1, [r5, #4]
 800106a:	400a      	ands	r2, r1
 800106c:	4293      	cmp	r3, r2
 800106e:	d0c8      	beq.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001070:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001072:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001074:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001076:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001078:	025b      	lsls	r3, r3, #9
 800107a:	4303      	orrs	r3, r0
 800107c:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800107e:	6a23      	ldr	r3, [r4, #32]
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001082:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001084:	4003      	ands	r3, r0
 8001086:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001088:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800108a:	07d3      	lsls	r3, r2, #31
 800108c:	d5b9      	bpl.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800108e:	f7ff f8fb 	bl	8000288 <HAL_GetTick>
 8001092:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001094:	2202      	movs	r2, #2
 8001096:	6a23      	ldr	r3, [r4, #32]
 8001098:	4213      	tst	r3, r2
 800109a:	d1b2      	bne.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109c:	f7ff f8f4 	bl	8000288 <HAL_GetTick>
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80010a2:	1bc0      	subs	r0, r0, r7
 80010a4:	4298      	cmp	r0, r3
 80010a6:	d9f5      	bls.n	8001094 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80010a8:	e7db      	b.n	8001062 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40007000 	.word	0x40007000
 80010b4:	fffffcff 	.word	0xfffffcff
 80010b8:	efffffff 	.word	0xefffffff
 80010bc:	fffeffff 	.word	0xfffeffff
 80010c0:	00001388 	.word	0x00001388

080010c4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010c4:	2201      	movs	r2, #1
 80010c6:	6a03      	ldr	r3, [r0, #32]
{
 80010c8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010ca:	4393      	bics	r3, r2
 80010cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010d2:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80010d4:	3272      	adds	r2, #114	; 0x72
 80010d6:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010d8:	680a      	ldr	r2, [r1, #0]
 80010da:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80010dc:	2202      	movs	r2, #2
 80010de:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80010e0:	688a      	ldr	r2, [r1, #8]
 80010e2:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <TIM_OC1_SetConfig+0x68>)
 80010e6:	4290      	cmp	r0, r2
 80010e8:	d005      	beq.n	80010f6 <TIM_OC1_SetConfig+0x32>
 80010ea:	4e11      	ldr	r6, [pc, #68]	; (8001130 <TIM_OC1_SetConfig+0x6c>)
 80010ec:	42b0      	cmp	r0, r6
 80010ee:	d002      	beq.n	80010f6 <TIM_OC1_SetConfig+0x32>
 80010f0:	4e10      	ldr	r6, [pc, #64]	; (8001134 <TIM_OC1_SetConfig+0x70>)
 80010f2:	42b0      	cmp	r0, r6
 80010f4:	d113      	bne.n	800111e <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80010f6:	2608      	movs	r6, #8
 80010f8:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80010fa:	68ce      	ldr	r6, [r1, #12]
 80010fc:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80010fe:	2604      	movs	r6, #4
 8001100:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001102:	4290      	cmp	r0, r2
 8001104:	d005      	beq.n	8001112 <TIM_OC1_SetConfig+0x4e>
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <TIM_OC1_SetConfig+0x6c>)
 8001108:	4290      	cmp	r0, r2
 800110a:	d002      	beq.n	8001112 <TIM_OC1_SetConfig+0x4e>
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <TIM_OC1_SetConfig+0x70>)
 800110e:	4290      	cmp	r0, r2
 8001110:	d105      	bne.n	800111e <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001114:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001116:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001118:	694c      	ldr	r4, [r1, #20]
 800111a:	4334      	orrs	r4, r6
 800111c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800111e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001120:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001122:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001124:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001126:	6203      	str	r3, [r0, #32]
}
 8001128:	bd70      	pop	{r4, r5, r6, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	40012c00 	.word	0x40012c00
 8001130:	40014400 	.word	0x40014400
 8001134:	40014800 	.word	0x40014800
 8001138:	fffffcff 	.word	0xfffffcff

0800113c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800113c:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800113e:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001140:	6a03      	ldr	r3, [r0, #32]
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <TIM_OC3_SetConfig+0x60>)
 8001144:	4013      	ands	r3, r2
 8001146:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001148:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800114a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800114c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800114e:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001150:	680d      	ldr	r5, [r1, #0]
 8001152:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001154:	4d12      	ldr	r5, [pc, #72]	; (80011a0 <TIM_OC3_SetConfig+0x64>)
 8001156:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001158:	688d      	ldr	r5, [r1, #8]
 800115a:	022d      	lsls	r5, r5, #8
 800115c:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800115e:	4d11      	ldr	r5, [pc, #68]	; (80011a4 <TIM_OC3_SetConfig+0x68>)
 8001160:	42a8      	cmp	r0, r5
 8001162:	d10e      	bne.n	8001182 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001164:	4d10      	ldr	r5, [pc, #64]	; (80011a8 <TIM_OC3_SetConfig+0x6c>)
 8001166:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001168:	68cb      	ldr	r3, [r1, #12]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800116e:	4d0f      	ldr	r5, [pc, #60]	; (80011ac <TIM_OC3_SetConfig+0x70>)
 8001170:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001172:	4d0f      	ldr	r5, [pc, #60]	; (80011b0 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001174:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001176:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001178:	698a      	ldr	r2, [r1, #24]
 800117a:	4332      	orrs	r2, r6
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	432a      	orrs	r2, r5
 8001180:	e005      	b.n	800118e <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001182:	4d0c      	ldr	r5, [pc, #48]	; (80011b4 <TIM_OC3_SetConfig+0x78>)
 8001184:	42a8      	cmp	r0, r5
 8001186:	d0f4      	beq.n	8001172 <TIM_OC3_SetConfig+0x36>
 8001188:	4d0b      	ldr	r5, [pc, #44]	; (80011b8 <TIM_OC3_SetConfig+0x7c>)
 800118a:	42a8      	cmp	r0, r5
 800118c:	d0f1      	beq.n	8001172 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800118e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001190:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001192:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001194:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001196:	6203      	str	r3, [r0, #32]
}
 8001198:	bd70      	pop	{r4, r5, r6, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	fffffeff 	.word	0xfffffeff
 80011a0:	fffffdff 	.word	0xfffffdff
 80011a4:	40012c00 	.word	0x40012c00
 80011a8:	fffff7ff 	.word	0xfffff7ff
 80011ac:	fffffbff 	.word	0xfffffbff
 80011b0:	ffffcfff 	.word	0xffffcfff
 80011b4:	40014400 	.word	0x40014400
 80011b8:	40014800 	.word	0x40014800

080011bc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80011bc:	6a03      	ldr	r3, [r0, #32]
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <TIM_OC4_SetConfig+0x4c>)
{
 80011c0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80011c2:	4013      	ands	r3, r2
 80011c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011c6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80011c8:	4c10      	ldr	r4, [pc, #64]	; (800120c <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 80011ca:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80011cc:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80011ce:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011d0:	680c      	ldr	r4, [r1, #0]
 80011d2:	0224      	lsls	r4, r4, #8
 80011d4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80011d6:	4c0e      	ldr	r4, [pc, #56]	; (8001210 <TIM_OC4_SetConfig+0x54>)
 80011d8:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80011da:	688c      	ldr	r4, [r1, #8]
 80011dc:	0324      	lsls	r4, r4, #12
 80011de:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011e0:	4c0c      	ldr	r4, [pc, #48]	; (8001214 <TIM_OC4_SetConfig+0x58>)
 80011e2:	42a0      	cmp	r0, r4
 80011e4:	d005      	beq.n	80011f2 <TIM_OC4_SetConfig+0x36>
 80011e6:	4c0c      	ldr	r4, [pc, #48]	; (8001218 <TIM_OC4_SetConfig+0x5c>)
 80011e8:	42a0      	cmp	r0, r4
 80011ea:	d002      	beq.n	80011f2 <TIM_OC4_SetConfig+0x36>
 80011ec:	4c0b      	ldr	r4, [pc, #44]	; (800121c <TIM_OC4_SetConfig+0x60>)
 80011ee:	42a0      	cmp	r0, r4
 80011f0:	d104      	bne.n	80011fc <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80011f2:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <TIM_OC4_SetConfig+0x64>)
 80011f4:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80011f6:	694c      	ldr	r4, [r1, #20]
 80011f8:	01a4      	lsls	r4, r4, #6
 80011fa:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011fc:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80011fe:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001200:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001202:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001204:	6202      	str	r2, [r0, #32]
}
 8001206:	bd30      	pop	{r4, r5, pc}
 8001208:	ffffefff 	.word	0xffffefff
 800120c:	ffff8cff 	.word	0xffff8cff
 8001210:	ffffdfff 	.word	0xffffdfff
 8001214:	40012c00 	.word	0x40012c00
 8001218:	40014400 	.word	0x40014400
 800121c:	40014800 	.word	0x40014800
 8001220:	ffffbfff 	.word	0xffffbfff

08001224 <HAL_TIM_PWM_MspInit>:
 8001224:	4770      	bx	lr
	...

08001228 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <TIM_Base_SetConfig+0x68>)
{
 800122a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800122c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800122e:	4290      	cmp	r0, r2
 8001230:	d002      	beq.n	8001238 <TIM_Base_SetConfig+0x10>
 8001232:	4c18      	ldr	r4, [pc, #96]	; (8001294 <TIM_Base_SetConfig+0x6c>)
 8001234:	42a0      	cmp	r0, r4
 8001236:	d108      	bne.n	800124a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001238:	2470      	movs	r4, #112	; 0x70
 800123a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800123c:	684c      	ldr	r4, [r1, #4]
 800123e:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001240:	4290      	cmp	r0, r2
 8001242:	d00b      	beq.n	800125c <TIM_Base_SetConfig+0x34>
 8001244:	4c13      	ldr	r4, [pc, #76]	; (8001294 <TIM_Base_SetConfig+0x6c>)
 8001246:	42a0      	cmp	r0, r4
 8001248:	d008      	beq.n	800125c <TIM_Base_SetConfig+0x34>
 800124a:	4c13      	ldr	r4, [pc, #76]	; (8001298 <TIM_Base_SetConfig+0x70>)
 800124c:	42a0      	cmp	r0, r4
 800124e:	d005      	beq.n	800125c <TIM_Base_SetConfig+0x34>
 8001250:	4c12      	ldr	r4, [pc, #72]	; (800129c <TIM_Base_SetConfig+0x74>)
 8001252:	42a0      	cmp	r0, r4
 8001254:	d002      	beq.n	800125c <TIM_Base_SetConfig+0x34>
 8001256:	4c12      	ldr	r4, [pc, #72]	; (80012a0 <TIM_Base_SetConfig+0x78>)
 8001258:	42a0      	cmp	r0, r4
 800125a:	d103      	bne.n	8001264 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800125c:	4c11      	ldr	r4, [pc, #68]	; (80012a4 <TIM_Base_SetConfig+0x7c>)
 800125e:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001260:	68cc      	ldr	r4, [r1, #12]
 8001262:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001264:	2480      	movs	r4, #128	; 0x80
 8001266:	43a3      	bics	r3, r4
 8001268:	694c      	ldr	r4, [r1, #20]
 800126a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800126c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800126e:	688b      	ldr	r3, [r1, #8]
 8001270:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001272:	680b      	ldr	r3, [r1, #0]
 8001274:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001276:	4290      	cmp	r0, r2
 8001278:	d005      	beq.n	8001286 <TIM_Base_SetConfig+0x5e>
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <TIM_Base_SetConfig+0x74>)
 800127c:	4298      	cmp	r0, r3
 800127e:	d002      	beq.n	8001286 <TIM_Base_SetConfig+0x5e>
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <TIM_Base_SetConfig+0x78>)
 8001282:	4298      	cmp	r0, r3
 8001284:	d101      	bne.n	800128a <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8001286:	690b      	ldr	r3, [r1, #16]
 8001288:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800128a:	2301      	movs	r3, #1
 800128c:	6143      	str	r3, [r0, #20]
}
 800128e:	bd10      	pop	{r4, pc}
 8001290:	40012c00 	.word	0x40012c00
 8001294:	40000400 	.word	0x40000400
 8001298:	40002000 	.word	0x40002000
 800129c:	40014400 	.word	0x40014400
 80012a0:	40014800 	.word	0x40014800
 80012a4:	fffffcff 	.word	0xfffffcff

080012a8 <HAL_TIM_Base_Init>:
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	0004      	movs	r4, r0
    return HAL_ERROR;
 80012ac:	2001      	movs	r0, #1
  if(htim == NULL)
 80012ae:	2c00      	cmp	r4, #0
 80012b0:	d014      	beq.n	80012dc <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80012b2:	0025      	movs	r5, r4
 80012b4:	353d      	adds	r5, #61	; 0x3d
 80012b6:	782b      	ldrb	r3, [r5, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d105      	bne.n	80012ca <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80012be:	0022      	movs	r2, r4
 80012c0:	323c      	adds	r2, #60	; 0x3c
 80012c2:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80012c4:	0020      	movs	r0, r4
 80012c6:	f000 ff0d 	bl	80020e4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80012ca:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012cc:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80012ce:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012d0:	1d21      	adds	r1, r4, #4
 80012d2:	f7ff ffa9 	bl	8001228 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80012d6:	2301      	movs	r3, #1
  return HAL_OK;
 80012d8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80012da:	702b      	strb	r3, [r5, #0]
}
 80012dc:	bd70      	pop	{r4, r5, r6, pc}

080012de <HAL_TIM_PWM_Init>:
{
 80012de:	b570      	push	{r4, r5, r6, lr}
 80012e0:	0004      	movs	r4, r0
    return HAL_ERROR;
 80012e2:	2001      	movs	r0, #1
  if(htim == NULL)
 80012e4:	2c00      	cmp	r4, #0
 80012e6:	d014      	beq.n	8001312 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80012e8:	0025      	movs	r5, r4
 80012ea:	353d      	adds	r5, #61	; 0x3d
 80012ec:	782b      	ldrb	r3, [r5, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d105      	bne.n	8001300 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80012f4:	0022      	movs	r2, r4
 80012f6:	323c      	adds	r2, #60	; 0x3c
 80012f8:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 80012fa:	0020      	movs	r0, r4
 80012fc:	f7ff ff92 	bl	8001224 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001300:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001302:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001304:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001306:	1d21      	adds	r1, r4, #4
 8001308:	f7ff ff8e 	bl	8001228 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800130c:	2301      	movs	r3, #1
  return HAL_OK;
 800130e:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001310:	702b      	strb	r3, [r5, #0]
}
 8001312:	bd70      	pop	{r4, r5, r6, pc}

08001314 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001314:	2210      	movs	r2, #16
 8001316:	6a03      	ldr	r3, [r0, #32]
{
 8001318:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800131a:	4393      	bics	r3, r2
 800131c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800131e:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001320:	4d15      	ldr	r5, [pc, #84]	; (8001378 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8001322:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001324:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001326:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001328:	680d      	ldr	r5, [r1, #0]
 800132a:	022d      	lsls	r5, r5, #8
 800132c:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 800132e:	2520      	movs	r5, #32
 8001330:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001332:	688d      	ldr	r5, [r1, #8]
 8001334:	012d      	lsls	r5, r5, #4
 8001336:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001338:	4d10      	ldr	r5, [pc, #64]	; (800137c <TIM_OC2_SetConfig+0x68>)
 800133a:	42a8      	cmp	r0, r5
 800133c:	d10f      	bne.n	800135e <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800133e:	2580      	movs	r5, #128	; 0x80
 8001340:	43aa      	bics	r2, r5
 8001342:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001344:	68ca      	ldr	r2, [r1, #12]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800134a:	2540      	movs	r5, #64	; 0x40
 800134c:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800134e:	4d0c      	ldr	r5, [pc, #48]	; (8001380 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001350:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001352:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001354:	698b      	ldr	r3, [r1, #24]
 8001356:	4333      	orrs	r3, r6
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	432b      	orrs	r3, r5
 800135c:	e005      	b.n	800136a <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800135e:	4d09      	ldr	r5, [pc, #36]	; (8001384 <TIM_OC2_SetConfig+0x70>)
 8001360:	42a8      	cmp	r0, r5
 8001362:	d0f4      	beq.n	800134e <TIM_OC2_SetConfig+0x3a>
 8001364:	4d08      	ldr	r5, [pc, #32]	; (8001388 <TIM_OC2_SetConfig+0x74>)
 8001366:	42a8      	cmp	r0, r5
 8001368:	d0f1      	beq.n	800134e <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800136a:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800136c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800136e:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001370:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001372:	6202      	str	r2, [r0, #32]
}
 8001374:	bd70      	pop	{r4, r5, r6, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	ffff8cff 	.word	0xffff8cff
 800137c:	40012c00 	.word	0x40012c00
 8001380:	fffff3ff 	.word	0xfffff3ff
 8001384:	40014400 	.word	0x40014400
 8001388:	40014800 	.word	0x40014800

0800138c <HAL_TIM_PWM_ConfigChannel>:
{
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800138e:	0006      	movs	r6, r0
 8001390:	2302      	movs	r3, #2
 8001392:	363c      	adds	r6, #60	; 0x3c
{
 8001394:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8001396:	7831      	ldrb	r1, [r6, #0]
{
 8001398:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800139a:	0018      	movs	r0, r3
 800139c:	2901      	cmp	r1, #1
 800139e:	d025      	beq.n	80013ec <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 80013a0:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 80013a2:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80013a4:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 80013a6:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80013a8:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 80013aa:	2a0c      	cmp	r2, #12
 80013ac:	d81a      	bhi.n	80013e4 <HAL_TIM_PWM_ConfigChannel+0x58>
 80013ae:	0010      	movs	r0, r2
 80013b0:	f7fe feaa 	bl	8000108 <__gnu_thumb1_case_uqi>
 80013b4:	18181807 	.word	0x18181807
 80013b8:	1818181d 	.word	0x1818181d
 80013bc:	1818182f 	.word	0x1818182f
 80013c0:	41          	.byte	0x41
 80013c1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013c2:	0029      	movs	r1, r5
 80013c4:	6820      	ldr	r0, [r4, #0]
 80013c6:	f7ff fe7d 	bl	80010c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013ca:	2208      	movs	r2, #8
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	6999      	ldr	r1, [r3, #24]
 80013d0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013d2:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013d6:	699a      	ldr	r2, [r3, #24]
 80013d8:	438a      	bics	r2, r1
 80013da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013e0:	430a      	orrs	r2, r1
 80013e2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80013e4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013e6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013e8:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 80013ea:	7030      	strb	r0, [r6, #0]
}
 80013ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013ee:	0029      	movs	r1, r5
 80013f0:	6820      	ldr	r0, [r4, #0]
 80013f2:	f7ff ff8f 	bl	8001314 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	6999      	ldr	r1, [r3, #24]
 80013fe:	430a      	orrs	r2, r1
 8001400:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	4915      	ldr	r1, [pc, #84]	; (800145c <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8001406:	400a      	ands	r2, r1
 8001408:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800140a:	692a      	ldr	r2, [r5, #16]
 800140c:	6999      	ldr	r1, [r3, #24]
 800140e:	0212      	lsls	r2, r2, #8
 8001410:	e7e6      	b.n	80013e0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001412:	0029      	movs	r1, r5
 8001414:	6820      	ldr	r0, [r4, #0]
 8001416:	f7ff fe91 	bl	800113c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800141a:	2208      	movs	r2, #8
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	69d9      	ldr	r1, [r3, #28]
 8001420:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001422:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	438a      	bics	r2, r1
 800142a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800142c:	69da      	ldr	r2, [r3, #28]
 800142e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001430:	430a      	orrs	r2, r1
 8001432:	61da      	str	r2, [r3, #28]
    break;
 8001434:	e7d6      	b.n	80013e4 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001436:	0029      	movs	r1, r5
 8001438:	6820      	ldr	r0, [r4, #0]
 800143a:	f7ff febf 	bl	80011bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	69d9      	ldr	r1, [r3, #28]
 8001446:	430a      	orrs	r2, r1
 8001448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	4903      	ldr	r1, [pc, #12]	; (800145c <HAL_TIM_PWM_ConfigChannel+0xd0>)
 800144e:	400a      	ands	r2, r1
 8001450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001452:	692a      	ldr	r2, [r5, #16]
 8001454:	69d9      	ldr	r1, [r3, #28]
 8001456:	0212      	lsls	r2, r2, #8
 8001458:	e7ea      	b.n	8001430 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	fffffbff 	.word	0xfffffbff

08001460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001464:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001466:	69c2      	ldr	r2, [r0, #28]
 8001468:	6883      	ldr	r3, [r0, #8]
 800146a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800146c:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800146e:	4303      	orrs	r3, r0
 8001470:	6960      	ldr	r0, [r4, #20]
 8001472:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001474:	4835      	ldr	r0, [pc, #212]	; (800154c <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001476:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001478:	4001      	ands	r1, r0
 800147a:	430b      	orrs	r3, r1
 800147c:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800147e:	686b      	ldr	r3, [r5, #4]
 8001480:	4933      	ldr	r1, [pc, #204]	; (8001550 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001482:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001484:	400b      	ands	r3, r1
 8001486:	68e1      	ldr	r1, [r4, #12]
 8001488:	430b      	orrs	r3, r1
 800148a:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800148c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800148e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001490:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001492:	4830      	ldr	r0, [pc, #192]	; (8001554 <UART_SetConfig+0xf4>)
 8001494:	4001      	ands	r1, r0
 8001496:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001498:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800149a:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <UART_SetConfig+0xf8>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	400b      	ands	r3, r1
 80014a2:	492e      	ldr	r1, [pc, #184]	; (800155c <UART_SetConfig+0xfc>)
 80014a4:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d12c      	bne.n	8001508 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 80014ae:	2808      	cmp	r0, #8
 80014b0:	d827      	bhi.n	8001502 <UART_SetConfig+0xa2>
 80014b2:	f7fe fe29 	bl	8000108 <__gnu_thumb1_case_uqi>
 80014b6:	2605      	.short	0x2605
 80014b8:	261e260b 	.word	0x261e260b
 80014bc:	2626      	.short	0x2626
 80014be:	21          	.byte	0x21
 80014bf:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014c0:	f7ff fd6c 	bl	8000f9c <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	0040      	lsls	r0, r0, #1
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	e002      	b.n	80014d2 <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80014cc:	6863      	ldr	r3, [r4, #4]
 80014ce:	0858      	lsrs	r0, r3, #1
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80014d2:	18c0      	adds	r0, r0, r3
 80014d4:	6861      	ldr	r1, [r4, #4]
 80014d6:	f7fe fe21 	bl	800011c <__udivsi3>
 80014da:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80014dc:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80014de:	220f      	movs	r2, #15
 80014e0:	0019      	movs	r1, r3
 80014e2:	4391      	bics	r1, r2
 80014e4:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014e6:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80014e8:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014ea:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014f2:	f7ff fc85 	bl	8000e00 <HAL_RCC_GetSysClockFreq>
 80014f6:	e7e5      	b.n	80014c4 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80014f8:	6863      	ldr	r3, [r4, #4]
 80014fa:	0858      	lsrs	r0, r3, #1
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	025b      	lsls	r3, r3, #9
 8001500:	e7e7      	b.n	80014d2 <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8001502:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001504:	2300      	movs	r3, #0
 8001506:	e7ea      	b.n	80014de <UART_SetConfig+0x7e>
    switch (clocksource)
 8001508:	2808      	cmp	r0, #8
 800150a:	d81d      	bhi.n	8001548 <UART_SetConfig+0xe8>
 800150c:	f7fe fdfc 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001510:	1c0a1c05 	.word	0x1c0a1c05
 8001514:	1c1c1c14 	.word	0x1c1c1c14
 8001518:	17          	.byte	0x17
 8001519:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800151a:	f7ff fd3f 	bl	8000f9c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800151e:	6861      	ldr	r1, [r4, #4]
 8001520:	084b      	lsrs	r3, r1, #1
 8001522:	e002      	b.n	800152a <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001524:	6861      	ldr	r1, [r4, #4]
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <UART_SetConfig+0x104>)
 8001528:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800152a:	18c0      	adds	r0, r0, r3
 800152c:	f7fe fdf6 	bl	800011c <__udivsi3>
 8001530:	b280      	uxth	r0, r0
 8001532:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001534:	2000      	movs	r0, #0
        break;
 8001536:	e7db      	b.n	80014f0 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001538:	f7ff fc62 	bl	8000e00 <HAL_RCC_GetSysClockFreq>
 800153c:	e7ef      	b.n	800151e <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	6861      	ldr	r1, [r4, #4]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	0848      	lsrs	r0, r1, #1
 8001546:	e7f0      	b.n	800152a <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001548:	2001      	movs	r0, #1
 800154a:	e7d1      	b.n	80014f0 <UART_SetConfig+0x90>
 800154c:	ffff69f3 	.word	0xffff69f3
 8001550:	ffffcfff 	.word	0xffffcfff
 8001554:	fffff4ff 	.word	0xfffff4ff
 8001558:	40021000 	.word	0x40021000
 800155c:	080022f4 	.word	0x080022f4
 8001560:	00f42400 	.word	0x00f42400
 8001564:	007a1200 	.word	0x007a1200

08001568 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001568:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800156a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800156c:	07da      	lsls	r2, r3, #31
 800156e:	d506      	bpl.n	800157e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001570:	6801      	ldr	r1, [r0, #0]
 8001572:	4c28      	ldr	r4, [pc, #160]	; (8001614 <UART_AdvFeatureConfig+0xac>)
 8001574:	684a      	ldr	r2, [r1, #4]
 8001576:	4022      	ands	r2, r4
 8001578:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800157a:	4322      	orrs	r2, r4
 800157c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800157e:	079a      	lsls	r2, r3, #30
 8001580:	d506      	bpl.n	8001590 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001582:	6801      	ldr	r1, [r0, #0]
 8001584:	4c24      	ldr	r4, [pc, #144]	; (8001618 <UART_AdvFeatureConfig+0xb0>)
 8001586:	684a      	ldr	r2, [r1, #4]
 8001588:	4022      	ands	r2, r4
 800158a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800158c:	4322      	orrs	r2, r4
 800158e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001590:	075a      	lsls	r2, r3, #29
 8001592:	d506      	bpl.n	80015a2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001594:	6801      	ldr	r1, [r0, #0]
 8001596:	4c21      	ldr	r4, [pc, #132]	; (800161c <UART_AdvFeatureConfig+0xb4>)
 8001598:	684a      	ldr	r2, [r1, #4]
 800159a:	4022      	ands	r2, r4
 800159c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800159e:	4322      	orrs	r2, r4
 80015a0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80015a2:	071a      	lsls	r2, r3, #28
 80015a4:	d506      	bpl.n	80015b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80015a6:	6801      	ldr	r1, [r0, #0]
 80015a8:	4c1d      	ldr	r4, [pc, #116]	; (8001620 <UART_AdvFeatureConfig+0xb8>)
 80015aa:	684a      	ldr	r2, [r1, #4]
 80015ac:	4022      	ands	r2, r4
 80015ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80015b0:	4322      	orrs	r2, r4
 80015b2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80015b4:	06da      	lsls	r2, r3, #27
 80015b6:	d506      	bpl.n	80015c6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80015b8:	6801      	ldr	r1, [r0, #0]
 80015ba:	4c1a      	ldr	r4, [pc, #104]	; (8001624 <UART_AdvFeatureConfig+0xbc>)
 80015bc:	688a      	ldr	r2, [r1, #8]
 80015be:	4022      	ands	r2, r4
 80015c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80015c2:	4322      	orrs	r2, r4
 80015c4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80015c6:	069a      	lsls	r2, r3, #26
 80015c8:	d506      	bpl.n	80015d8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80015ca:	6801      	ldr	r1, [r0, #0]
 80015cc:	4c16      	ldr	r4, [pc, #88]	; (8001628 <UART_AdvFeatureConfig+0xc0>)
 80015ce:	688a      	ldr	r2, [r1, #8]
 80015d0:	4022      	ands	r2, r4
 80015d2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80015d4:	4322      	orrs	r2, r4
 80015d6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80015d8:	065a      	lsls	r2, r3, #25
 80015da:	d510      	bpl.n	80015fe <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015dc:	6801      	ldr	r1, [r0, #0]
 80015de:	4d13      	ldr	r5, [pc, #76]	; (800162c <UART_AdvFeatureConfig+0xc4>)
 80015e0:	684a      	ldr	r2, [r1, #4]
 80015e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80015e4:	402a      	ands	r2, r5
 80015e6:	4322      	orrs	r2, r4
 80015e8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	0352      	lsls	r2, r2, #13
 80015ee:	4294      	cmp	r4, r2
 80015f0:	d105      	bne.n	80015fe <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015f2:	684a      	ldr	r2, [r1, #4]
 80015f4:	4c0e      	ldr	r4, [pc, #56]	; (8001630 <UART_AdvFeatureConfig+0xc8>)
 80015f6:	4022      	ands	r2, r4
 80015f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80015fa:	4322      	orrs	r2, r4
 80015fc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80015fe:	061b      	lsls	r3, r3, #24
 8001600:	d506      	bpl.n	8001610 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001602:	6802      	ldr	r2, [r0, #0]
 8001604:	490b      	ldr	r1, [pc, #44]	; (8001634 <UART_AdvFeatureConfig+0xcc>)
 8001606:	6853      	ldr	r3, [r2, #4]
 8001608:	400b      	ands	r3, r1
 800160a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800160c:	430b      	orrs	r3, r1
 800160e:	6053      	str	r3, [r2, #4]
  }
}
 8001610:	bd30      	pop	{r4, r5, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	fffdffff 	.word	0xfffdffff
 8001618:	fffeffff 	.word	0xfffeffff
 800161c:	fffbffff 	.word	0xfffbffff
 8001620:	ffff7fff 	.word	0xffff7fff
 8001624:	ffffefff 	.word	0xffffefff
 8001628:	ffffdfff 	.word	0xffffdfff
 800162c:	ffefffff 	.word	0xffefffff
 8001630:	ff9fffff 	.word	0xff9fffff
 8001634:	fff7ffff 	.word	0xfff7ffff

08001638 <HAL_UART_Init>:
{
 8001638:	b570      	push	{r4, r5, r6, lr}
 800163a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800163c:	d101      	bne.n	8001642 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800163e:	2001      	movs	r0, #1
}
 8001640:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001642:	0005      	movs	r5, r0
 8001644:	3569      	adds	r5, #105	; 0x69
 8001646:	782b      	ldrb	r3, [r5, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d104      	bne.n	8001658 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800164e:	0002      	movs	r2, r0
 8001650:	3268      	adds	r2, #104	; 0x68
 8001652:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001654:	f000 fd74 	bl	8002140 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001658:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800165a:	2101      	movs	r1, #1
 800165c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800165e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001660:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001662:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001664:	438b      	bics	r3, r1
 8001666:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001668:	f7ff fefa 	bl	8001460 <UART_SetConfig>
 800166c:	2801      	cmp	r0, #1
 800166e:	d0e6      	beq.n	800163e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001676:	0020      	movs	r0, r4
 8001678:	f7ff ff76 	bl	8001568 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	490b      	ldr	r1, [pc, #44]	; (80016ac <HAL_UART_Init+0x74>)
 8001680:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001682:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001684:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001686:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001688:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	438a      	bics	r2, r1
 800168e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001690:	2201      	movs	r2, #1
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001698:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 800169a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800169c:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 800169e:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80016a0:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80016a2:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80016a4:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80016a6:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80016a8:	e7ca      	b.n	8001640 <HAL_UART_Init+0x8>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	fffff7ff 	.word	0xfffff7ff

080016b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	0004      	movs	r4, r0
 80016b4:	000e      	movs	r6, r1
 80016b6:	0015      	movs	r5, r2
 80016b8:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016ba:	6822      	ldr	r2, [r4, #0]
 80016bc:	69d3      	ldr	r3, [r2, #28]
 80016be:	4033      	ands	r3, r6
 80016c0:	1b9b      	subs	r3, r3, r6
 80016c2:	4259      	negs	r1, r3
 80016c4:	414b      	adcs	r3, r1
 80016c6:	42ab      	cmp	r3, r5
 80016c8:	d001      	beq.n	80016ce <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80016ca:	2000      	movs	r0, #0
 80016cc:	e018      	b.n	8001700 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80016ce:	9b06      	ldr	r3, [sp, #24]
 80016d0:	3301      	adds	r3, #1
 80016d2:	d0f3      	beq.n	80016bc <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80016d4:	9b06      	ldr	r3, [sp, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d113      	bne.n	8001702 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <UART_WaitOnFlagUntilTimeout+0x60>)
 80016de:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80016e0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016e2:	400a      	ands	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	31a3      	adds	r1, #163	; 0xa3
 80016ea:	31ff      	adds	r1, #255	; 0xff
 80016ec:	438a      	bics	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80016f0:	0022      	movs	r2, r4
 80016f2:	2320      	movs	r3, #32
 80016f4:	3269      	adds	r2, #105	; 0x69
 80016f6:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80016f8:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80016fa:	2300      	movs	r3, #0
 80016fc:	3468      	adds	r4, #104	; 0x68
 80016fe:	7023      	strb	r3, [r4, #0]
}
 8001700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001702:	f7fe fdc1 	bl	8000288 <HAL_GetTick>
 8001706:	9b06      	ldr	r3, [sp, #24]
 8001708:	1bc0      	subs	r0, r0, r7
 800170a:	4283      	cmp	r3, r0
 800170c:	d2d5      	bcs.n	80016ba <UART_WaitOnFlagUntilTimeout+0xa>
 800170e:	e7e4      	b.n	80016da <UART_WaitOnFlagUntilTimeout+0x2a>
 8001710:	fffffe5f 	.word	0xfffffe5f

08001714 <HAL_UART_Transmit>:
{
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8001716:	0007      	movs	r7, r0
{
 8001718:	b085      	sub	sp, #20
 800171a:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 800171c:	3769      	adds	r7, #105	; 0x69
 800171e:	783b      	ldrb	r3, [r7, #0]
{
 8001720:	0004      	movs	r4, r0
 8001722:	000d      	movs	r5, r1
 8001724:	0016      	movs	r6, r2
    return HAL_BUSY;
 8001726:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001728:	2b20      	cmp	r3, #32
 800172a:	d146      	bne.n	80017ba <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 800172c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800172e:	2900      	cmp	r1, #0
 8001730:	d043      	beq.n	80017ba <HAL_UART_Transmit+0xa6>
 8001732:	2a00      	cmp	r2, #0
 8001734:	d041      	beq.n	80017ba <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	68a2      	ldr	r2, [r4, #8]
 800173a:	015b      	lsls	r3, r3, #5
 800173c:	429a      	cmp	r2, r3
 800173e:	d104      	bne.n	800174a <HAL_UART_Transmit+0x36>
 8001740:	6923      	ldr	r3, [r4, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8001746:	4201      	tst	r1, r0
 8001748:	d137      	bne.n	80017ba <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800174a:	0023      	movs	r3, r4
 800174c:	3368      	adds	r3, #104	; 0x68
 800174e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001750:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001752:	2a01      	cmp	r2, #1
 8001754:	d031      	beq.n	80017ba <HAL_UART_Transmit+0xa6>
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800175a:	2300      	movs	r3, #0
 800175c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800175e:	3321      	adds	r3, #33	; 0x21
 8001760:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001762:	f7fe fd91 	bl	8000288 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001766:	0023      	movs	r3, r4
 8001768:	3350      	adds	r3, #80	; 0x50
 800176a:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800176c:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800176e:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001770:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001772:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001774:	0021      	movs	r1, r4
 8001776:	3152      	adds	r1, #82	; 0x52
 8001778:	880a      	ldrh	r2, [r1, #0]
 800177a:	b292      	uxth	r2, r2
 800177c:	2a00      	cmp	r2, #0
 800177e:	d10d      	bne.n	800179c <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001780:	9b03      	ldr	r3, [sp, #12]
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	0020      	movs	r0, r4
 8001788:	9b02      	ldr	r3, [sp, #8]
 800178a:	f7ff ff91 	bl	80016b0 <UART_WaitOnFlagUntilTimeout>
 800178e:	2800      	cmp	r0, #0
 8001790:	d112      	bne.n	80017b8 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8001792:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001794:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001796:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8001798:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800179a:	e00e      	b.n	80017ba <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 800179c:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800179e:	2200      	movs	r2, #0
      huart->TxXferCount--;
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017a6:	9b03      	ldr	r3, [sp, #12]
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	0020      	movs	r0, r4
 80017ae:	9b02      	ldr	r3, [sp, #8]
 80017b0:	f7ff ff7e 	bl	80016b0 <UART_WaitOnFlagUntilTimeout>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d002      	beq.n	80017be <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80017b8:	2003      	movs	r0, #3
}
 80017ba:	b005      	add	sp, #20
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017be:	68a3      	ldr	r3, [r4, #8]
 80017c0:	6822      	ldr	r2, [r4, #0]
 80017c2:	42b3      	cmp	r3, r6
 80017c4:	d108      	bne.n	80017d8 <HAL_UART_Transmit+0xc4>
 80017c6:	6923      	ldr	r3, [r4, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80017cc:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80017ce:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80017d0:	05db      	lsls	r3, r3, #23
 80017d2:	0ddb      	lsrs	r3, r3, #23
 80017d4:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80017d6:	e7cd      	b.n	8001774 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80017d8:	782b      	ldrb	r3, [r5, #0]
 80017da:	3501      	adds	r5, #1
 80017dc:	8513      	strh	r3, [r2, #40]	; 0x28
 80017de:	e7c9      	b.n	8001774 <HAL_UART_Transmit+0x60>

080017e0 <HAL_UART_Receive>:
{
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	001f      	movs	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80017e4:	0003      	movs	r3, r0
 80017e6:	336a      	adds	r3, #106	; 0x6a
{
 80017e8:	0016      	movs	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80017ea:	781a      	ldrb	r2, [r3, #0]
{
 80017ec:	0004      	movs	r4, r0
 80017ee:	b085      	sub	sp, #20
 80017f0:	000d      	movs	r5, r1
    return HAL_BUSY;
 80017f2:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 80017f4:	2a20      	cmp	r2, #32
 80017f6:	d139      	bne.n	800186c <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 80017f8:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80017fa:	2900      	cmp	r1, #0
 80017fc:	d036      	beq.n	800186c <HAL_UART_Receive+0x8c>
 80017fe:	2e00      	cmp	r6, #0
 8001800:	d034      	beq.n	800186c <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	68a1      	ldr	r1, [r4, #8]
 8001806:	0152      	lsls	r2, r2, #5
 8001808:	4291      	cmp	r1, r2
 800180a:	d104      	bne.n	8001816 <HAL_UART_Receive+0x36>
 800180c:	6922      	ldr	r2, [r4, #16]
 800180e:	2a00      	cmp	r2, #0
 8001810:	d101      	bne.n	8001816 <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8001812:	4205      	tst	r5, r0
 8001814:	d12a      	bne.n	800186c <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 8001816:	0022      	movs	r2, r4
 8001818:	3268      	adds	r2, #104	; 0x68
 800181a:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 800181c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800181e:	2901      	cmp	r1, #1
 8001820:	d024      	beq.n	800186c <HAL_UART_Receive+0x8c>
 8001822:	2101      	movs	r1, #1
 8001824:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001826:	2200      	movs	r2, #0
 8001828:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800182a:	3222      	adds	r2, #34	; 0x22
 800182c:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800182e:	f7fe fd2b 	bl	8000288 <HAL_GetTick>
    huart->RxXferSize = Size;
 8001832:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8001838:	3358      	adds	r3, #88	; 0x58
 800183a:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 800183c:	805e      	strh	r6, [r3, #2]
    tickstart = HAL_GetTick();
 800183e:	9003      	str	r0, [sp, #12]
    UART_MASK_COMPUTATION(huart);
 8001840:	0149      	lsls	r1, r1, #5
 8001842:	3304      	adds	r3, #4
 8001844:	428a      	cmp	r2, r1
 8001846:	d115      	bne.n	8001874 <HAL_UART_Receive+0x94>
 8001848:	6922      	ldr	r2, [r4, #16]
 800184a:	2a00      	cmp	r2, #0
 800184c:	d110      	bne.n	8001870 <HAL_UART_Receive+0x90>
 800184e:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <HAL_UART_Receive+0xe8>)
 8001850:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 8001852:	881e      	ldrh	r6, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001854:	0022      	movs	r2, r4
 8001856:	325a      	adds	r2, #90	; 0x5a
 8001858:	8810      	ldrh	r0, [r2, #0]
 800185a:	b280      	uxth	r0, r0
 800185c:	2800      	cmp	r0, #0
 800185e:	d110      	bne.n	8001882 <HAL_UART_Receive+0xa2>
    huart->RxState = HAL_UART_STATE_READY;
 8001860:	0023      	movs	r3, r4
 8001862:	2220      	movs	r2, #32
 8001864:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 8001866:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8001868:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800186a:	7020      	strb	r0, [r4, #0]
}
 800186c:	b005      	add	sp, #20
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8001870:	22ff      	movs	r2, #255	; 0xff
 8001872:	e7ed      	b.n	8001850 <HAL_UART_Receive+0x70>
 8001874:	2a00      	cmp	r2, #0
 8001876:	d1ec      	bne.n	8001852 <HAL_UART_Receive+0x72>
 8001878:	6922      	ldr	r2, [r4, #16]
 800187a:	2a00      	cmp	r2, #0
 800187c:	d0f8      	beq.n	8001870 <HAL_UART_Receive+0x90>
 800187e:	227f      	movs	r2, #127	; 0x7f
 8001880:	e7e6      	b.n	8001850 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 8001882:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001884:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8001886:	3b01      	subs	r3, #1
 8001888:	b29b      	uxth	r3, r3
 800188a:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800188c:	0020      	movs	r0, r4
 800188e:	9700      	str	r7, [sp, #0]
 8001890:	9b03      	ldr	r3, [sp, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f7ff ff0c 	bl	80016b0 <UART_WaitOnFlagUntilTimeout>
 8001898:	2800      	cmp	r0, #0
 800189a:	d113      	bne.n	80018c4 <HAL_UART_Receive+0xe4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800189c:	68a2      	ldr	r2, [r4, #8]
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	0011      	movs	r1, r2
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0152      	lsls	r2, r2, #5
 80018a6:	4291      	cmp	r1, r2
 80018a8:	d107      	bne.n	80018ba <HAL_UART_Receive+0xda>
 80018aa:	6922      	ldr	r2, [r4, #16]
 80018ac:	2a00      	cmp	r2, #0
 80018ae:	d104      	bne.n	80018ba <HAL_UART_Receive+0xda>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80018b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018b2:	4033      	ands	r3, r6
 80018b4:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 80018b6:	3502      	adds	r5, #2
 80018b8:	e7cc      	b.n	8001854 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80018ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018bc:	4033      	ands	r3, r6
 80018be:	702b      	strb	r3, [r5, #0]
 80018c0:	3501      	adds	r5, #1
 80018c2:	e7c7      	b.n	8001854 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80018c4:	2003      	movs	r0, #3
 80018c6:	e7d1      	b.n	800186c <HAL_UART_Receive+0x8c>
 80018c8:	000001ff 	.word	0x000001ff

080018cc <msg>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void msg(char uhu, char *teucu) {
 80018cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018ce:	9000      	str	r0, [sp, #0]
 80018d0:	9101      	str	r1, [sp, #4]
	int cont = 0;
	if(uhu == 'A'){
 80018d2:	2841      	cmp	r0, #65	; 0x41
 80018d4:	d142      	bne.n	800195c <msg+0x90>
		while(cont <3){
//			 char *airtu = *teucu;
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80018d6:	2690      	movs	r6, #144	; 0x90
 80018d8:	2503      	movs	r5, #3
 80018da:	2401      	movs	r4, #1
 80018dc:	05f6      	lsls	r6, r6, #23
 80018de:	0021      	movs	r1, r4
 80018e0:	0030      	movs	r0, r6
 80018e2:	f7fe fdfb 	bl	80004dc <HAL_GPIO_TogglePin>
			 check = SSD1306_Init ();
 80018e6:	f000 fb05 	bl	8001ef4 <SSD1306_Init>
 80018ea:	4b85      	ldr	r3, [pc, #532]	; (8001b00 <msg+0x234>)
 80018ec:	3d01      	subs	r5, #1
 80018ee:	7018      	strb	r0, [r3, #0]
			 SSD1306_UpdateScreen(); //display
 80018f0:	f000 fade 	bl	8001eb0 <SSD1306_UpdateScreen>
			 SSD1306_GotoXY (10,10);
 80018f4:	210a      	movs	r1, #10
 80018f6:	0008      	movs	r0, r1
 80018f8:	f000 fa46 	bl	8001d88 <SSD1306_GotoXY>
			 SSD1306_Puts ("", &Font_11x18, 1);
 80018fc:	4f81      	ldr	r7, [pc, #516]	; (8001b04 <msg+0x238>)
 80018fe:	0022      	movs	r2, r4
 8001900:	0039      	movs	r1, r7
 8001902:	4881      	ldr	r0, [pc, #516]	; (8001b08 <msg+0x23c>)
 8001904:	f000 fa92 	bl	8001e2c <SSD1306_Puts>
			 SSD1306_GotoXY (10, 30);
 8001908:	211e      	movs	r1, #30
 800190a:	200a      	movs	r0, #10
 800190c:	f000 fa3c 	bl	8001d88 <SSD1306_GotoXY>
			 SSD1306_Puts ("LIGACAO", &Font_11x18, 1);
 8001910:	0022      	movs	r2, r4
 8001912:	0039      	movs	r1, r7
 8001914:	487d      	ldr	r0, [pc, #500]	; (8001b0c <msg+0x240>)
 8001916:	f000 fa89 	bl	8001e2c <SSD1306_Puts>
			 SSD1306_UpdateScreen(); //display
 800191a:	f000 fac9 	bl	8001eb0 <SSD1306_UpdateScreen>
			 HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	220a      	movs	r2, #10
 8001922:	214e      	movs	r1, #78	; 0x4e
 8001924:	487a      	ldr	r0, [pc, #488]	; (8001b10 <msg+0x244>)
 8001926:	f7fe ffa9 	bl	800087c <HAL_I2C_IsDeviceReady>
			 HAL_Delay(1000);
 800192a:	20fa      	movs	r0, #250	; 0xfa
 800192c:	0080      	lsls	r0, r0, #2
 800192e:	f7fe fcb1 	bl	8000294 <HAL_Delay>
			 cont ++;
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001932:	0021      	movs	r1, r4
 8001934:	0030      	movs	r0, r6
 8001936:	f7fe fdd1 	bl	80004dc <HAL_GPIO_TogglePin>
			 HAL_Delay(500);
 800193a:	20fa      	movs	r0, #250	; 0xfa
 800193c:	0040      	lsls	r0, r0, #1
 800193e:	f7fe fca9 	bl	8000294 <HAL_Delay>
		while(cont <3){
 8001942:	2d00      	cmp	r5, #0
 8001944:	d1cb      	bne.n	80018de <msg+0x12>
			SSD1306_GotoXY (10, 30);
			SSD1306_Puts ("MENSAGEM", &Font_11x18, 1);
			SSD1306_UpdateScreen(); //display
			HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
			HAL_Delay(1000);
			cont ++;
 8001946:	2403      	movs	r4, #3
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
				HAL_Delay(500);
			}
	//		airtim[0] = "0";
	}
	if(uhu != 'A' && uhu != 'B' && uhu != 'C' && uhu != 'D'){
 8001948:	9b00      	ldr	r3, [sp, #0]
 800194a:	3b41      	subs	r3, #65	; 0x41
 800194c:	2b03      	cmp	r3, #3
 800194e:	d904      	bls.n	800195a <msg+0x8e>
				SSD1306_UpdateScreen(); //display
				SSD1306_GotoXY (10, 30);
				SSD1306_Puts (teucu, &Font_11x18, 1);
				SSD1306_UpdateScreen(); //display
				HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
				HAL_Delay(1000);
 8001950:	25fa      	movs	r5, #250	; 0xfa
 8001952:	00ad      	lsls	r5, r5, #2
		while(cont <3){
 8001954:	2c02      	cmp	r4, #2
 8001956:	dc00      	bgt.n	800195a <msg+0x8e>
 8001958:	e0b5      	b.n	8001ac6 <msg+0x1fa>
				cont ++;
//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
			}
//		airtim[0] = "0";
	}
}
 800195a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if(uhu == 'B'){
 800195c:	9b00      	ldr	r3, [sp, #0]
 800195e:	2b42      	cmp	r3, #66	; 0x42
 8001960:	d138      	bne.n	80019d4 <msg+0x108>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001962:	2690      	movs	r6, #144	; 0x90
 8001964:	2503      	movs	r5, #3
 8001966:	2401      	movs	r4, #1
 8001968:	05f6      	lsls	r6, r6, #23
 800196a:	0021      	movs	r1, r4
 800196c:	0030      	movs	r0, r6
 800196e:	f7fe fdb5 	bl	80004dc <HAL_GPIO_TogglePin>
			check = SSD1306_Init ();
 8001972:	f000 fabf 	bl	8001ef4 <SSD1306_Init>
 8001976:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <msg+0x234>)
 8001978:	3d01      	subs	r5, #1
 800197a:	7018      	strb	r0, [r3, #0]
			SSD1306_UpdateScreen(); //display
 800197c:	f000 fa98 	bl	8001eb0 <SSD1306_UpdateScreen>
			SSD1306_GotoXY (10,10);
 8001980:	210a      	movs	r1, #10
 8001982:	0008      	movs	r0, r1
 8001984:	f000 fa00 	bl	8001d88 <SSD1306_GotoXY>
			SSD1306_Puts ("", &Font_11x18, 1);
 8001988:	4f5e      	ldr	r7, [pc, #376]	; (8001b04 <msg+0x238>)
 800198a:	0022      	movs	r2, r4
 800198c:	0039      	movs	r1, r7
 800198e:	485e      	ldr	r0, [pc, #376]	; (8001b08 <msg+0x23c>)
 8001990:	f000 fa4c 	bl	8001e2c <SSD1306_Puts>
			SSD1306_GotoXY (10, 30);
 8001994:	211e      	movs	r1, #30
 8001996:	200a      	movs	r0, #10
 8001998:	f000 f9f6 	bl	8001d88 <SSD1306_GotoXY>
			SSD1306_Puts ("MENSAGEM", &Font_11x18, 1);
 800199c:	0022      	movs	r2, r4
 800199e:	0039      	movs	r1, r7
 80019a0:	485c      	ldr	r0, [pc, #368]	; (8001b14 <msg+0x248>)
 80019a2:	f000 fa43 	bl	8001e2c <SSD1306_Puts>
			SSD1306_UpdateScreen(); //display
 80019a6:	f000 fa83 	bl	8001eb0 <SSD1306_UpdateScreen>
			HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
 80019aa:	2364      	movs	r3, #100	; 0x64
 80019ac:	220a      	movs	r2, #10
 80019ae:	214e      	movs	r1, #78	; 0x4e
 80019b0:	4857      	ldr	r0, [pc, #348]	; (8001b10 <msg+0x244>)
 80019b2:	f7fe ff63 	bl	800087c <HAL_I2C_IsDeviceReady>
			HAL_Delay(1000);
 80019b6:	20fa      	movs	r0, #250	; 0xfa
 80019b8:	0080      	lsls	r0, r0, #2
 80019ba:	f7fe fc6b 	bl	8000294 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80019be:	0021      	movs	r1, r4
 80019c0:	0030      	movs	r0, r6
 80019c2:	f7fe fd8b 	bl	80004dc <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80019c6:	20fa      	movs	r0, #250	; 0xfa
 80019c8:	0040      	lsls	r0, r0, #1
 80019ca:	f7fe fc63 	bl	8000294 <HAL_Delay>
		while(cont <3){
 80019ce:	2d00      	cmp	r5, #0
 80019d0:	d1cb      	bne.n	800196a <msg+0x9e>
 80019d2:	e7b8      	b.n	8001946 <msg+0x7a>
	if(uhu == 'C'){
 80019d4:	9b00      	ldr	r3, [sp, #0]
 80019d6:	2b43      	cmp	r3, #67	; 0x43
 80019d8:	d138      	bne.n	8001a4c <msg+0x180>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80019da:	2590      	movs	r5, #144	; 0x90
				HAL_Delay(1000);
 80019dc:	27fa      	movs	r7, #250	; 0xfa
 80019de:	2404      	movs	r4, #4
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80019e0:	05ed      	lsls	r5, r5, #23
				HAL_Delay(1000);
 80019e2:	00bf      	lsls	r7, r7, #2
 80019e4:	3c01      	subs	r4, #1
			while(cont <3){
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d0ad      	beq.n	8001946 <msg+0x7a>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80019ea:	2101      	movs	r1, #1
 80019ec:	0028      	movs	r0, r5
 80019ee:	f7fe fd75 	bl	80004dc <HAL_GPIO_TogglePin>
				check = SSD1306_Init ();
 80019f2:	f000 fa7f 	bl	8001ef4 <SSD1306_Init>
 80019f6:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <msg+0x234>)
 80019f8:	7018      	strb	r0, [r3, #0]
				SSD1306_UpdateScreen(); //display
 80019fa:	f000 fa59 	bl	8001eb0 <SSD1306_UpdateScreen>
				SSD1306_GotoXY (10,10);
 80019fe:	210a      	movs	r1, #10
 8001a00:	0008      	movs	r0, r1
 8001a02:	f000 f9c1 	bl	8001d88 <SSD1306_GotoXY>
				SSD1306_Puts ("", &Font_11x18, 1);
 8001a06:	4e3f      	ldr	r6, [pc, #252]	; (8001b04 <msg+0x238>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	0031      	movs	r1, r6
 8001a0c:	483e      	ldr	r0, [pc, #248]	; (8001b08 <msg+0x23c>)
 8001a0e:	f000 fa0d 	bl	8001e2c <SSD1306_Puts>
				SSD1306_GotoXY (10, 30);
 8001a12:	211e      	movs	r1, #30
 8001a14:	200a      	movs	r0, #10
 8001a16:	f000 f9b7 	bl	8001d88 <SSD1306_GotoXY>
				SSD1306_Puts ("ALARME", &Font_11x18, 1);
 8001a1a:	0031      	movs	r1, r6
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	483e      	ldr	r0, [pc, #248]	; (8001b18 <msg+0x24c>)
 8001a20:	f000 fa04 	bl	8001e2c <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8001a24:	f000 fa44 	bl	8001eb0 <SSD1306_UpdateScreen>
				HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	214e      	movs	r1, #78	; 0x4e
 8001a2e:	4838      	ldr	r0, [pc, #224]	; (8001b10 <msg+0x244>)
 8001a30:	f7fe ff24 	bl	800087c <HAL_I2C_IsDeviceReady>
				HAL_Delay(1000);
 8001a34:	0038      	movs	r0, r7
 8001a36:	f7fe fc2d 	bl	8000294 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001a3a:	0028      	movs	r0, r5
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	f7fe fd4d 	bl	80004dc <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 8001a42:	20fa      	movs	r0, #250	; 0xfa
 8001a44:	0040      	lsls	r0, r0, #1
 8001a46:	f7fe fc25 	bl	8000294 <HAL_Delay>
 8001a4a:	e7cb      	b.n	80019e4 <msg+0x118>
	if(uhu == 'D'){
 8001a4c:	9b00      	ldr	r3, [sp, #0]
	int cont = 0;
 8001a4e:	2400      	movs	r4, #0
	if(uhu == 'D'){
 8001a50:	2b44      	cmp	r3, #68	; 0x44
 8001a52:	d000      	beq.n	8001a56 <msg+0x18a>
 8001a54:	e778      	b.n	8001948 <msg+0x7c>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001a56:	2690      	movs	r6, #144	; 0x90
 8001a58:	2501      	movs	r5, #1
 8001a5a:	05f6      	lsls	r6, r6, #23
 8001a5c:	0029      	movs	r1, r5
 8001a5e:	0030      	movs	r0, r6
 8001a60:	f7fe fd3c 	bl	80004dc <HAL_GPIO_TogglePin>
				check = SSD1306_Init ();
 8001a64:	f000 fa46 	bl	8001ef4 <SSD1306_Init>
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <msg+0x234>)
				cont ++;
 8001a6a:	3401      	adds	r4, #1
				check = SSD1306_Init ();
 8001a6c:	7018      	strb	r0, [r3, #0]
				SSD1306_UpdateScreen(); //display
 8001a6e:	f000 fa1f 	bl	8001eb0 <SSD1306_UpdateScreen>
				SSD1306_GotoXY (10,10);
 8001a72:	210a      	movs	r1, #10
 8001a74:	0008      	movs	r0, r1
 8001a76:	f000 f987 	bl	8001d88 <SSD1306_GotoXY>
				SSD1306_Puts ("", &Font_11x18, 1);
 8001a7a:	4f22      	ldr	r7, [pc, #136]	; (8001b04 <msg+0x238>)
 8001a7c:	002a      	movs	r2, r5
 8001a7e:	0039      	movs	r1, r7
 8001a80:	4821      	ldr	r0, [pc, #132]	; (8001b08 <msg+0x23c>)
 8001a82:	f000 f9d3 	bl	8001e2c <SSD1306_Puts>
				SSD1306_GotoXY (10, 30);
 8001a86:	211e      	movs	r1, #30
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f000 f97d 	bl	8001d88 <SSD1306_GotoXY>
				SSD1306_Puts ("CAMPAINHA", &Font_11x18, 1);
 8001a8e:	002a      	movs	r2, r5
 8001a90:	0039      	movs	r1, r7
 8001a92:	4822      	ldr	r0, [pc, #136]	; (8001b1c <msg+0x250>)
 8001a94:	f000 f9ca 	bl	8001e2c <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8001a98:	f000 fa0a 	bl	8001eb0 <SSD1306_UpdateScreen>
				HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
 8001a9c:	2364      	movs	r3, #100	; 0x64
 8001a9e:	220a      	movs	r2, #10
 8001aa0:	214e      	movs	r1, #78	; 0x4e
 8001aa2:	481b      	ldr	r0, [pc, #108]	; (8001b10 <msg+0x244>)
 8001aa4:	f7fe feea 	bl	800087c <HAL_I2C_IsDeviceReady>
				HAL_Delay(1000);
 8001aa8:	20fa      	movs	r0, #250	; 0xfa
 8001aaa:	0080      	lsls	r0, r0, #2
 8001aac:	f7fe fbf2 	bl	8000294 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001ab0:	0030      	movs	r0, r6
 8001ab2:	0029      	movs	r1, r5
 8001ab4:	f7fe fd12 	bl	80004dc <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 8001ab8:	20fa      	movs	r0, #250	; 0xfa
 8001aba:	0040      	lsls	r0, r0, #1
 8001abc:	f7fe fbea 	bl	8000294 <HAL_Delay>
			while(cont <3){
 8001ac0:	2c03      	cmp	r4, #3
 8001ac2:	d1cb      	bne.n	8001a5c <msg+0x190>
 8001ac4:	e740      	b.n	8001948 <msg+0x7c>
				check = SSD1306_Init ();
 8001ac6:	f000 fa15 	bl	8001ef4 <SSD1306_Init>
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <msg+0x234>)
				cont ++;
 8001acc:	3401      	adds	r4, #1
				check = SSD1306_Init ();
 8001ace:	7018      	strb	r0, [r3, #0]
				SSD1306_UpdateScreen(); //display
 8001ad0:	f000 f9ee 	bl	8001eb0 <SSD1306_UpdateScreen>
				SSD1306_GotoXY (10, 30);
 8001ad4:	211e      	movs	r1, #30
 8001ad6:	200a      	movs	r0, #10
 8001ad8:	f000 f956 	bl	8001d88 <SSD1306_GotoXY>
				SSD1306_Puts (teucu, &Font_11x18, 1);
 8001adc:	2201      	movs	r2, #1
 8001ade:	4909      	ldr	r1, [pc, #36]	; (8001b04 <msg+0x238>)
 8001ae0:	9801      	ldr	r0, [sp, #4]
 8001ae2:	f000 f9a3 	bl	8001e2c <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8001ae6:	f000 f9e3 	bl	8001eb0 <SSD1306_UpdateScreen>
				HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
 8001aea:	2364      	movs	r3, #100	; 0x64
 8001aec:	220a      	movs	r2, #10
 8001aee:	214e      	movs	r1, #78	; 0x4e
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <msg+0x244>)
 8001af2:	f7fe fec3 	bl	800087c <HAL_I2C_IsDeviceReady>
				HAL_Delay(1000);
 8001af6:	0028      	movs	r0, r5
 8001af8:	f7fe fbcc 	bl	8000294 <HAL_Delay>
 8001afc:	e72a      	b.n	8001954 <msg+0x88>
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	20000480 	.word	0x20000480
 8001b04:	20000000 	.word	0x20000000
 8001b08:	0800307f 	.word	0x0800307f
 8001b0c:	0800305e 	.word	0x0800305e
 8001b10:	20000434 	.word	0x20000434
 8001b14:	08003066 	.word	0x08003066
 8001b18:	0800306f 	.word	0x0800306f
 8001b1c:	08003076 	.word	0x08003076

08001b20 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b20:	2302      	movs	r3, #2
{
 8001b22:	b510      	push	{r4, lr}
 8001b24:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b26:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001b2c:	330f      	adds	r3, #15
 8001b2e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b30:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b34:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b36:	f7fe ff81 	bl	8000a3c <HAL_RCC_OscConfig>
 8001b3a:	1e01      	subs	r1, r0, #0
 8001b3c:	d000      	beq.n	8001b40 <SystemClock_Config+0x20>
 8001b3e:	e7fe      	b.n	8001b3e <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b40:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b42:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b44:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b46:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b48:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b4c:	f7ff f98a 	bl	8000e64 <HAL_RCC_ClockConfig>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d000      	beq.n	8001b56 <SystemClock_Config+0x36>
 8001b54:	e7fe      	b.n	8001b54 <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001b56:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001b58:	9006      	str	r0, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001b5a:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5c:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001b5e:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b60:	f7ff fa2c 	bl	8000fbc <HAL_RCCEx_PeriphCLKConfig>
 8001b64:	1e04      	subs	r4, r0, #0
 8001b66:	d000      	beq.n	8001b6a <SystemClock_Config+0x4a>
 8001b68:	e7fe      	b.n	8001b68 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b6a:	f7ff fa11 	bl	8000f90 <HAL_RCC_GetHCLKFreq>
 8001b6e:	21fa      	movs	r1, #250	; 0xfa
 8001b70:	0089      	lsls	r1, r1, #2
 8001b72:	f7fe fad3 	bl	800011c <__udivsi3>
 8001b76:	f7fe fbcd 	bl	8000314 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b7a:	2004      	movs	r0, #4
 8001b7c:	f7fe fbe4 	bl	8000348 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b80:	2001      	movs	r0, #1
 8001b82:	0022      	movs	r2, r4
 8001b84:	0021      	movs	r1, r4
 8001b86:	4240      	negs	r0, r0
 8001b88:	f7fe fb94 	bl	80002b4 <HAL_NVIC_SetPriority>
}
 8001b8c:	b014      	add	sp, #80	; 0x50
 8001b8e:	bd10      	pop	{r4, pc}

08001b90 <main>:
{
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001b94:	f7fe fb60 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 8001b98:	f7ff ffc2 	bl	8001b20 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	2080      	movs	r0, #128	; 0x80
 8001b9e:	4a54      	ldr	r2, [pc, #336]	; (8001cf0 <main+0x160>)
 8001ba0:	0280      	lsls	r0, r0, #10
 8001ba2:	6951      	ldr	r1, [r2, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	4301      	orrs	r1, r0
 8001ba8:	6151      	str	r1, [r2, #20]
 8001baa:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bac:	2101      	movs	r1, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4003      	ands	r3, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bb0:	2090      	movs	r0, #144	; 0x90
 8001bb2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bb6:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bba:	f7fe fc89 	bl	80004d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc0:	2601      	movs	r6, #1
 8001bc2:	ac01      	add	r4, sp, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	0021      	movs	r1, r4
 8001bc6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc8:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	60e7      	str	r7, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f7fe fbce 	bl	8000370 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001bd4:	4d47      	ldr	r5, [pc, #284]	; (8001cf4 <main+0x164>)
 8001bd6:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <main+0x168>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd8:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8001bda:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001bdc:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <main+0x16c>)
  hi2c1.Init.OwnAddress1 = 0;
 8001bde:	60af      	str	r7, [r5, #8]
  hi2c1.Init.Timing = 0x0000020B;
 8001be0:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be2:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be4:	612f      	str	r7, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001be6:	616f      	str	r7, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be8:	61af      	str	r7, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bea:	61ef      	str	r7, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bec:	622f      	str	r7, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bee:	f7fe fd57 	bl	80006a0 <HAL_I2C_Init>
 8001bf2:	0001      	movs	r1, r0
 8001bf4:	42b8      	cmp	r0, r7
 8001bf6:	d000      	beq.n	8001bfa <main+0x6a>
 8001bf8:	e7fe      	b.n	8001bf8 <main+0x68>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bfa:	0028      	movs	r0, r5
 8001bfc:	f7fe fed4 	bl	80009a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c00:	1e01      	subs	r1, r0, #0
 8001c02:	d000      	beq.n	8001c06 <main+0x76>
 8001c04:	e7fe      	b.n	8001c04 <main+0x74>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c06:	0028      	movs	r0, r5
 8001c08:	f7fe fef4 	bl	80009f4 <HAL_I2CEx_ConfigDigitalFilter>
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d000      	beq.n	8001c12 <main+0x82>
 8001c10:	e7fe      	b.n	8001c10 <main+0x80>
  huart1.Instance = USART1;
 8001c12:	4d3b      	ldr	r5, [pc, #236]	; (8001d00 <main+0x170>)
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <main+0x174>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	60a8      	str	r0, [r5, #8]
  huart1.Instance = USART1;
 8001c18:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 9600;
 8001c1a:	2396      	movs	r3, #150	; 0x96
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c20:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c22:	60e8      	str	r0, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c24:	6128      	str	r0, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	61a8      	str	r0, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	61e8      	str	r0, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2a:	6228      	str	r0, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c2c:	6268      	str	r0, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2e:	0028      	movs	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c30:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c32:	f7ff fd01 	bl	8001638 <HAL_UART_Init>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d000      	beq.n	8001c3c <main+0xac>
 8001c3a:	e7fe      	b.n	8001c3a <main+0xaa>
  htim14.Instance = TIM14;
 8001c3c:	4f32      	ldr	r7, [pc, #200]	; (8001d08 <main+0x178>)
 8001c3e:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <main+0x17c>)
  htim14.Init.Prescaler = 0;
 8001c40:	6078      	str	r0, [r7, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	60b8      	str	r0, [r7, #8]
  htim14.Init.Period = 0;
 8001c44:	60f8      	str	r0, [r7, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	6138      	str	r0, [r7, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c48:	61b8      	str	r0, [r7, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001c4a:	0038      	movs	r0, r7
  htim14.Instance = TIM14;
 8001c4c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001c4e:	f7ff fb2b 	bl	80012a8 <HAL_TIM_Base_Init>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d000      	beq.n	8001c58 <main+0xc8>
 8001c56:	e7fe      	b.n	8001c56 <main+0xc6>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001c58:	0038      	movs	r0, r7
 8001c5a:	f7ff fb40 	bl	80012de <HAL_TIM_PWM_Init>
 8001c5e:	1e02      	subs	r2, r0, #0
 8001c60:	d000      	beq.n	8001c64 <main+0xd4>
 8001c62:	e7fe      	b.n	8001c62 <main+0xd2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c64:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001c66:	6060      	str	r0, [r4, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c68:	60a0      	str	r0, [r4, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6a:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6c:	0021      	movs	r1, r4
 8001c6e:	0038      	movs	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c70:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	f7ff fb8b 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d000      	beq.n	8001c7c <main+0xec>
 8001c7a:	e7fe      	b.n	8001c7a <main+0xea>
  HAL_TIM_MspPostInit(&htim14);
 8001c7c:	0038      	movs	r0, r7
 8001c7e:	f000 fa47 	bl	8002110 <HAL_TIM_MspPostInit>
  	  	check = SSD1306_Init ();
 8001c82:	f000 f937 	bl	8001ef4 <SSD1306_Init>
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <main+0x180>)
 8001c88:	7018      	strb	r0, [r3, #0]
    	SSD1306_UpdateScreen(); //display
 8001c8a:	f000 f911 	bl	8001eb0 <SSD1306_UpdateScreen>
    	SSD1306_GotoXY (10,10);
 8001c8e:	210a      	movs	r1, #10
 8001c90:	0008      	movs	r0, r1
 8001c92:	f000 f879 	bl	8001d88 <SSD1306_GotoXY>
    	SSD1306_Puts ("", &Font_11x18, 1);
 8001c96:	4f1f      	ldr	r7, [pc, #124]	; (8001d14 <main+0x184>)
 8001c98:	0032      	movs	r2, r6
 8001c9a:	0039      	movs	r1, r7
 8001c9c:	481e      	ldr	r0, [pc, #120]	; (8001d18 <main+0x188>)
 8001c9e:	f000 f8c5 	bl	8001e2c <SSD1306_Puts>
    	SSD1306_GotoXY (10, 30);
 8001ca2:	211e      	movs	r1, #30
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f000 f86f 	bl	8001d88 <SSD1306_GotoXY>
    	SSD1306_Puts ("INICIANDO", &Font_11x18, 1);
 8001caa:	0032      	movs	r2, r6
 8001cac:	0039      	movs	r1, r7
 8001cae:	481b      	ldr	r0, [pc, #108]	; (8001d1c <main+0x18c>)
 8001cb0:	f000 f8bc 	bl	8001e2c <SSD1306_Puts>
	  HAL_UART_Receive( &huart1, airtim, 20, 2000 );
 8001cb4:	27fa      	movs	r7, #250	; 0xfa
    	SSD1306_UpdateScreen(); //display
 8001cb6:	f000 f8fb 	bl	8001eb0 <SSD1306_UpdateScreen>
    	HAL_Delay(2500);
 8001cba:	4819      	ldr	r0, [pc, #100]	; (8001d20 <main+0x190>)
 8001cbc:	f7fe faea 	bl	8000294 <HAL_Delay>
	  memset( airtim, 0, 20 );
 8001cc0:	2614      	movs	r6, #20
	  HAL_UART_Receive( &huart1, airtim, 20, 2000 );
 8001cc2:	00ff      	lsls	r7, r7, #3
	  memset( airtim, 0, 20 );
 8001cc4:	0032      	movs	r2, r6
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	0020      	movs	r0, r4
 8001cca:	f000 faee 	bl	80022aa <memset>
	  HAL_UART_Receive( &huart1, airtim, 20, 2000 );
 8001cce:	003b      	movs	r3, r7
 8001cd0:	0032      	movs	r2, r6
 8001cd2:	0021      	movs	r1, r4
 8001cd4:	0028      	movs	r0, r5
 8001cd6:	f7ff fd83 	bl	80017e0 <HAL_UART_Receive>
	  HAL_UART_Transmit ( &huart1, airtim, 20, 100 );
 8001cda:	0021      	movs	r1, r4
 8001cdc:	2364      	movs	r3, #100	; 0x64
 8001cde:	0032      	movs	r2, r6
 8001ce0:	0028      	movs	r0, r5
 8001ce2:	f7ff fd17 	bl	8001714 <HAL_UART_Transmit>
	  msg(airtim[0],airtim);
 8001ce6:	7820      	ldrb	r0, [r4, #0]
 8001ce8:	0021      	movs	r1, r4
 8001cea:	f7ff fdef 	bl	80018cc <msg>
 8001cee:	e7e9      	b.n	8001cc4 <main+0x134>
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	20000434 	.word	0x20000434
 8001cf8:	40005400 	.word	0x40005400
 8001cfc:	0000020b 	.word	0x0000020b
 8001d00:	20000484 	.word	0x20000484
 8001d04:	40013800 	.word	0x40013800
 8001d08:	200004f4 	.word	0x200004f4
 8001d0c:	40002000 	.word	0x40002000
 8001d10:	20000480 	.word	0x20000480
 8001d14:	20000000 	.word	0x20000000
 8001d18:	0800307f 	.word	0x0800307f
 8001d1c:	08003054 	.word	0x08003054
 8001d20:	000009c4 	.word	0x000009c4

08001d24 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d24:	2100      	movs	r1, #0
void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d26:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d28:	4288      	cmp	r0, r1
 8001d2a:	d000      	beq.n	8001d2e <SSD1306_Fill+0xa>
 8001d2c:	31ff      	adds	r1, #255	; 0xff
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <SSD1306_Fill+0x18>)
 8001d32:	00d2      	lsls	r2, r2, #3
 8001d34:	f000 fab9 	bl	80022aa <memset>
}
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	2000002e 	.word	0x2000002e

08001d40 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001d40:	b510      	push	{r4, lr}
	if (
 8001d42:	287f      	cmp	r0, #127	; 0x7f
 8001d44:	d814      	bhi.n	8001d70 <SSD1306_DrawPixel+0x30>
		x >= SSD1306_WIDTH ||
 8001d46:	293f      	cmp	r1, #63	; 0x3f
 8001d48:	d812      	bhi.n	8001d70 <SSD1306_DrawPixel+0x30>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <SSD1306_DrawPixel+0x40>)
 8001d4c:	791b      	ldrb	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <SSD1306_DrawPixel+0x18>
		color = (SSD1306_COLOR_t)!color;
 8001d52:	4253      	negs	r3, r2
 8001d54:	415a      	adcs	r2, r3
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	08cb      	lsrs	r3, r1, #3
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d5a:	01db      	lsls	r3, r3, #7
 8001d5c:	1818      	adds	r0, r3, r0
 8001d5e:	2307      	movs	r3, #7
 8001d60:	4c08      	ldr	r4, [pc, #32]	; (8001d84 <SSD1306_DrawPixel+0x44>)
 8001d62:	4019      	ands	r1, r3
	if (color == SSD1306_COLOR_WHITE) {
 8001d64:	2a01      	cmp	r2, #1
 8001d66:	d104      	bne.n	8001d72 <SSD1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d68:	408a      	lsls	r2, r1
 8001d6a:	5c23      	ldrb	r3, [r4, r0]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	5422      	strb	r2, [r4, r0]
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 8001d70:	bd10      	pop	{r4, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d72:	2201      	movs	r2, #1
 8001d74:	408a      	lsls	r2, r1
 8001d76:	5c23      	ldrb	r3, [r4, r0]
 8001d78:	4393      	bics	r3, r2
 8001d7a:	5423      	strb	r3, [r4, r0]
 8001d7c:	e7f8      	b.n	8001d70 <SSD1306_DrawPixel+0x30>
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	20000028 	.word	0x20000028
 8001d84:	2000002e 	.word	0x2000002e

08001d88 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001d88:	4b01      	ldr	r3, [pc, #4]	; (8001d90 <SSD1306_GotoXY+0x8>)
 8001d8a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001d8c:	8059      	strh	r1, [r3, #2]
}
 8001d8e:	4770      	bx	lr
 8001d90:	20000028 	.word	0x20000028

08001d94 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	b085      	sub	sp, #20
 8001d98:	9202      	str	r2, [sp, #8]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d9a:	4a23      	ldr	r2, [pc, #140]	; (8001e28 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d9c:	000c      	movs	r4, r1
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d9e:	8813      	ldrh	r3, [r2, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001da0:	0007      	movs	r7, r0
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	780b      	ldrb	r3, [r1, #0]
 8001da6:	9900      	ldr	r1, [sp, #0]
 8001da8:	185b      	adds	r3, r3, r1
	if (
 8001daa:	2b7f      	cmp	r3, #127	; 0x7f
 8001dac:	dc07      	bgt.n	8001dbe <SSD1306_Putc+0x2a>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001dae:	8853      	ldrh	r3, [r2, #2]
 8001db0:	2600      	movs	r6, #0
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	9a01      	ldr	r2, [sp, #4]
 8001db6:	7863      	ldrb	r3, [r4, #1]
 8001db8:	189b      	adds	r3, r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001dba:	2b3f      	cmp	r3, #63	; 0x3f
 8001dbc:	dd0e      	ble.n	8001ddc <SSD1306_Putc+0x48>
	) {
		/* Error */
		return 0;
 8001dbe:	2700      	movs	r7, #0
 8001dc0:	e014      	b.n	8001dec <SSD1306_Putc+0x58>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001dc2:	003a      	movs	r2, r7
		for (j = 0; j < Font->FontWidth; j++) {
 8001dc4:	2500      	movs	r5, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001dc6:	3a20      	subs	r2, #32
 8001dc8:	4353      	muls	r3, r2
 8001dca:	6862      	ldr	r2, [r4, #4]
 8001dcc:	199b      	adds	r3, r3, r6
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	5a9b      	ldrh	r3, [r3, r2]
 8001dd2:	9303      	str	r3, [sp, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001dd4:	7823      	ldrb	r3, [r4, #0]
 8001dd6:	429d      	cmp	r5, r3
 8001dd8:	d30b      	bcc.n	8001df2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001dda:	3601      	adds	r6, #1
 8001ddc:	7863      	ldrb	r3, [r4, #1]
 8001dde:	429e      	cmp	r6, r3
 8001de0:	d3ef      	bcc.n	8001dc2 <SSD1306_Putc+0x2e>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001de2:	9a00      	ldr	r2, [sp, #0]
 8001de4:	7823      	ldrb	r3, [r4, #0]
 8001de6:	18d3      	adds	r3, r2, r3
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <SSD1306_Putc+0x94>)
 8001dea:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
}
 8001dec:	0038      	movs	r0, r7
 8001dee:	b005      	add	sp, #20
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df2:	9b01      	ldr	r3, [sp, #4]
			if ((b << j) & 0x8000) {
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	1999      	adds	r1, r3, r6
 8001df8:	9b03      	ldr	r3, [sp, #12]
 8001dfa:	0212      	lsls	r2, r2, #8
 8001dfc:	40ab      	lsls	r3, r5
 8001dfe:	4213      	tst	r3, r2
 8001e00:	d008      	beq.n	8001e14 <SSD1306_Putc+0x80>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001e02:	9b00      	ldr	r3, [sp, #0]
 8001e04:	9a02      	ldr	r2, [sp, #8]
 8001e06:	1958      	adds	r0, r3, r5
 8001e08:	b289      	uxth	r1, r1
 8001e0a:	b280      	uxth	r0, r0
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e0c:	f7ff ff98 	bl	8001d40 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e10:	3501      	adds	r5, #1
 8001e12:	e7df      	b.n	8001dd4 <SSD1306_Putc+0x40>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e14:	9a02      	ldr	r2, [sp, #8]
 8001e16:	b289      	uxth	r1, r1
 8001e18:	4253      	negs	r3, r2
 8001e1a:	415a      	adcs	r2, r3
 8001e1c:	9b00      	ldr	r3, [sp, #0]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	1958      	adds	r0, r3, r5
 8001e22:	b280      	uxth	r0, r0
 8001e24:	e7f2      	b.n	8001e0c <SSD1306_Putc+0x78>
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	20000028 	.word	0x20000028

08001e2c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e2c:	b570      	push	{r4, r5, r6, lr}
 8001e2e:	0004      	movs	r4, r0
 8001e30:	000d      	movs	r5, r1
 8001e32:	0016      	movs	r6, r2
	/* Write characters */
	while (*str) {
 8001e34:	7820      	ldrb	r0, [r4, #0]
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d100      	bne.n	8001e3c <SSD1306_Puts+0x10>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001e3a:	bd70      	pop	{r4, r5, r6, pc}
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001e3c:	0032      	movs	r2, r6
 8001e3e:	0029      	movs	r1, r5
 8001e40:	f7ff ffa8 	bl	8001d94 <SSD1306_Putc>
 8001e44:	0003      	movs	r3, r0
 8001e46:	7820      	ldrb	r0, [r4, #0]
 8001e48:	4283      	cmp	r3, r0
 8001e4a:	d1f6      	bne.n	8001e3a <SSD1306_Puts+0xe>
		str++;
 8001e4c:	3401      	adds	r4, #1
 8001e4e:	e7f1      	b.n	8001e34 <SSD1306_Puts+0x8>

08001e50 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e50:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
	uint8_t dt[count + 1];
 8001e52:	001c      	movs	r4, r3
 8001e54:	466d      	mov	r5, sp
 8001e56:	3408      	adds	r4, #8
 8001e58:	08e4      	lsrs	r4, r4, #3
 8001e5a:	00e4      	lsls	r4, r4, #3
 8001e5c:	1b2c      	subs	r4, r5, r4
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e5e:	af02      	add	r7, sp, #8
	uint8_t dt[count + 1];
 8001e60:	46a5      	mov	sp, r4
	dt[0] = reg;
	uint8_t i;
	for(i = 1; i <= count; i++)
 8001e62:	2401      	movs	r4, #1
	uint8_t dt[count + 1];
 8001e64:	ad02      	add	r5, sp, #8
	dt[0] = reg;
 8001e66:	7029      	strb	r1, [r5, #0]
	for(i = 1; i <= count; i++)
 8001e68:	42a3      	cmp	r3, r4
 8001e6a:	d208      	bcs.n	8001e7e <ssd1306_I2C_WriteMulti+0x2e>
		dt[i] = data[i-1];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8001e6c:	220a      	movs	r2, #10
 8001e6e:	b281      	uxth	r1, r0
 8001e70:	9200      	str	r2, [sp, #0]
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <ssd1306_I2C_WriteMulti+0x3c>)
 8001e74:	002a      	movs	r2, r5
 8001e76:	f7fe fc69 	bl	800074c <HAL_I2C_Master_Transmit>
}
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}
		dt[i] = data[i-1];
 8001e7e:	1911      	adds	r1, r2, r4
 8001e80:	3901      	subs	r1, #1
 8001e82:	7809      	ldrb	r1, [r1, #0]
 8001e84:	5529      	strb	r1, [r5, r4]
	for(i = 1; i <= count; i++)
 8001e86:	3401      	adds	r4, #1
 8001e88:	b2e4      	uxtb	r4, r4
 8001e8a:	e7ed      	b.n	8001e68 <ssd1306_I2C_WriteMulti+0x18>
 8001e8c:	20000434 	.word	0x20000434

08001e90 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e92:	230a      	movs	r3, #10
	dt[0] = reg;
 8001e94:	ac03      	add	r4, sp, #12
 8001e96:	7021      	strb	r1, [r4, #0]
	dt[1] = data;
 8001e98:	7062      	strb	r2, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e9a:	b281      	uxth	r1, r0
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	0022      	movs	r2, r4
 8001ea0:	3b08      	subs	r3, #8
 8001ea2:	4802      	ldr	r0, [pc, #8]	; (8001eac <ssd1306_I2C_Write+0x1c>)
 8001ea4:	f7fe fc52 	bl	800074c <HAL_I2C_Master_Transmit>
}
 8001ea8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	20000434 	.word	0x20000434

08001eb0 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	2400      	movs	r4, #0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001eb4:	2578      	movs	r5, #120	; 0x78
 8001eb6:	0022      	movs	r2, r4
 8001eb8:	3a50      	subs	r2, #80	; 0x50
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	0028      	movs	r0, r5
 8001ec0:	f7ff ffe6 	bl	8001e90 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	0028      	movs	r0, r5
 8001ec8:	0011      	movs	r1, r2
 8001eca:	f7ff ffe1 	bl	8001e90 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001ece:	2210      	movs	r2, #16
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	0028      	movs	r0, r5
 8001ed4:	f7ff ffdc 	bl	8001e90 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ed8:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <SSD1306_UpdateScreen+0x40>)
 8001eda:	01e3      	lsls	r3, r4, #7
 8001edc:	18d2      	adds	r2, r2, r3
 8001ede:	2140      	movs	r1, #64	; 0x40
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	0028      	movs	r0, r5
 8001ee4:	3401      	adds	r4, #1
 8001ee6:	f7ff ffb3 	bl	8001e50 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001eea:	2c08      	cmp	r4, #8
 8001eec:	d1e3      	bne.n	8001eb6 <SSD1306_UpdateScreen+0x6>
}
 8001eee:	bd70      	pop	{r4, r5, r6, pc}
 8001ef0:	2000002e 	.word	0x2000002e

08001ef4 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001ef4:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001ef6:	4b51      	ldr	r3, [pc, #324]	; (800203c <SSD1306_Init+0x148>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2178      	movs	r1, #120	; 0x78
 8001efc:	4850      	ldr	r0, [pc, #320]	; (8002040 <SSD1306_Init+0x14c>)
 8001efe:	f7fe fcbd 	bl	800087c <HAL_I2C_IsDeviceReady>
		return 0;
 8001f02:	2400      	movs	r4, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f04:	42a0      	cmp	r0, r4
 8001f06:	d000      	beq.n	8001f0a <SSD1306_Init+0x16>
 8001f08:	e095      	b.n	8002036 <SSD1306_Init+0x142>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001f0a:	0021      	movs	r1, r4
 8001f0c:	22ae      	movs	r2, #174	; 0xae
 8001f0e:	2078      	movs	r0, #120	; 0x78
 8001f10:	f7ff ffbe 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001f14:	0021      	movs	r1, r4
 8001f16:	2220      	movs	r2, #32
 8001f18:	2078      	movs	r0, #120	; 0x78
 8001f1a:	f7ff ffb9 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f1e:	0021      	movs	r1, r4
 8001f20:	2210      	movs	r2, #16
 8001f22:	2078      	movs	r0, #120	; 0x78
 8001f24:	f7ff ffb4 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f28:	0021      	movs	r1, r4
 8001f2a:	22b0      	movs	r2, #176	; 0xb0
 8001f2c:	2078      	movs	r0, #120	; 0x78
 8001f2e:	f7ff ffaf 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001f32:	0021      	movs	r1, r4
 8001f34:	22c8      	movs	r2, #200	; 0xc8
 8001f36:	2078      	movs	r0, #120	; 0x78
 8001f38:	f7ff ffaa 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001f3c:	0022      	movs	r2, r4
 8001f3e:	0021      	movs	r1, r4
 8001f40:	2078      	movs	r0, #120	; 0x78
 8001f42:	f7ff ffa5 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001f46:	0021      	movs	r1, r4
 8001f48:	2210      	movs	r2, #16
 8001f4a:	2078      	movs	r0, #120	; 0x78
 8001f4c:	f7ff ffa0 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001f50:	0021      	movs	r1, r4
 8001f52:	2240      	movs	r2, #64	; 0x40
 8001f54:	2078      	movs	r0, #120	; 0x78
 8001f56:	f7ff ff9b 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001f5a:	0021      	movs	r1, r4
 8001f5c:	2281      	movs	r2, #129	; 0x81
 8001f5e:	2078      	movs	r0, #120	; 0x78
 8001f60:	f7ff ff96 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001f64:	0021      	movs	r1, r4
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	2078      	movs	r0, #120	; 0x78
 8001f6a:	f7ff ff91 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001f6e:	0021      	movs	r1, r4
 8001f70:	22a1      	movs	r2, #161	; 0xa1
 8001f72:	2078      	movs	r0, #120	; 0x78
 8001f74:	f7ff ff8c 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001f78:	0021      	movs	r1, r4
 8001f7a:	22a6      	movs	r2, #166	; 0xa6
 8001f7c:	2078      	movs	r0, #120	; 0x78
 8001f7e:	f7ff ff87 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001f82:	0021      	movs	r1, r4
 8001f84:	22a8      	movs	r2, #168	; 0xa8
 8001f86:	2078      	movs	r0, #120	; 0x78
 8001f88:	f7ff ff82 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001f8c:	0021      	movs	r1, r4
 8001f8e:	223f      	movs	r2, #63	; 0x3f
 8001f90:	2078      	movs	r0, #120	; 0x78
 8001f92:	f7ff ff7d 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f96:	0021      	movs	r1, r4
 8001f98:	22a4      	movs	r2, #164	; 0xa4
 8001f9a:	2078      	movs	r0, #120	; 0x78
 8001f9c:	f7ff ff78 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001fa0:	0021      	movs	r1, r4
 8001fa2:	22d3      	movs	r2, #211	; 0xd3
 8001fa4:	2078      	movs	r0, #120	; 0x78
 8001fa6:	f7ff ff73 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001faa:	0022      	movs	r2, r4
 8001fac:	0021      	movs	r1, r4
 8001fae:	2078      	movs	r0, #120	; 0x78
 8001fb0:	f7ff ff6e 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fb4:	0021      	movs	r1, r4
 8001fb6:	22d5      	movs	r2, #213	; 0xd5
 8001fb8:	2078      	movs	r0, #120	; 0x78
 8001fba:	f7ff ff69 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001fbe:	0021      	movs	r1, r4
 8001fc0:	22f0      	movs	r2, #240	; 0xf0
 8001fc2:	2078      	movs	r0, #120	; 0x78
 8001fc4:	f7ff ff64 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001fc8:	0021      	movs	r1, r4
 8001fca:	22d9      	movs	r2, #217	; 0xd9
 8001fcc:	2078      	movs	r0, #120	; 0x78
 8001fce:	f7ff ff5f 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001fd2:	0021      	movs	r1, r4
 8001fd4:	2222      	movs	r2, #34	; 0x22
 8001fd6:	2078      	movs	r0, #120	; 0x78
 8001fd8:	f7ff ff5a 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001fdc:	0021      	movs	r1, r4
 8001fde:	22da      	movs	r2, #218	; 0xda
 8001fe0:	2078      	movs	r0, #120	; 0x78
 8001fe2:	f7ff ff55 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001fe6:	0021      	movs	r1, r4
 8001fe8:	2212      	movs	r2, #18
 8001fea:	2078      	movs	r0, #120	; 0x78
 8001fec:	f7ff ff50 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ff0:	0021      	movs	r1, r4
 8001ff2:	22db      	movs	r2, #219	; 0xdb
 8001ff4:	2078      	movs	r0, #120	; 0x78
 8001ff6:	f7ff ff4b 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001ffa:	0021      	movs	r1, r4
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	2078      	movs	r0, #120	; 0x78
 8002000:	f7ff ff46 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002004:	0021      	movs	r1, r4
 8002006:	228d      	movs	r2, #141	; 0x8d
 8002008:	2078      	movs	r0, #120	; 0x78
 800200a:	f7ff ff41 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800200e:	0021      	movs	r1, r4
 8002010:	2214      	movs	r2, #20
 8002012:	2078      	movs	r0, #120	; 0x78
 8002014:	f7ff ff3c 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002018:	0021      	movs	r1, r4
 800201a:	22af      	movs	r2, #175	; 0xaf
 800201c:	2078      	movs	r0, #120	; 0x78
 800201e:	f7ff ff37 	bl	8001e90 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002022:	0020      	movs	r0, r4
 8002024:	f7ff fe7e 	bl	8001d24 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002028:	f7ff ff42 	bl	8001eb0 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SSD1306_Init+0x150>)
 800202e:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8002030:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 8002032:	3401      	adds	r4, #1
 8002034:	715c      	strb	r4, [r3, #5]
}
 8002036:	0020      	movs	r0, r4
 8002038:	bd10      	pop	{r4, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	00004e20 	.word	0x00004e20
 8002040:	20000434 	.word	0x20000434
 8002044:	20000028 	.word	0x20000028

08002048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002048:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	2001      	movs	r0, #1
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_MspInit+0x4c>)
 800204e:	6999      	ldr	r1, [r3, #24]
 8002050:	4301      	orrs	r1, r0
 8002052:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	4002      	ands	r2, r0
 800205c:	9200      	str	r2, [sp, #0]
 800205e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002062:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	430a      	orrs	r2, r1
 8002066:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002068:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	400b      	ands	r3, r1
 800206e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002070:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002074:	f7fe f91e 	bl	80002b4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2002      	movs	r0, #2
 800207c:	0011      	movs	r1, r2
 800207e:	4240      	negs	r0, r0
 8002080:	f7fe f918 	bl	80002b4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2001      	movs	r0, #1
 8002088:	0011      	movs	r1, r2
 800208a:	4240      	negs	r0, r0
 800208c:	f7fe f912 	bl	80002b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002090:	bd07      	pop	{r0, r1, r2, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_I2C_MspInit+0x44>)
 800209c:	6802      	ldr	r2, [r0, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d119      	bne.n	80020d6 <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020a2:	23c0      	movs	r3, #192	; 0xc0
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a8:	2312      	movs	r3, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ae:	3b11      	subs	r3, #17
 80020b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b2:	3302      	adds	r3, #2
 80020b4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020b8:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f7fe f957 	bl	8000370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020c2:	2080      	movs	r0, #128	; 0x80
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <HAL_I2C_MspInit+0x48>)
 80020c6:	0380      	lsls	r0, r0, #14
 80020c8:	69d1      	ldr	r1, [r2, #28]
 80020ca:	4301      	orrs	r1, r0
 80020cc:	61d1      	str	r1, [r2, #28]
 80020ce:	69d3      	ldr	r3, [r2, #28]
 80020d0:	4003      	ands	r3, r0
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020d6:	b007      	add	sp, #28
 80020d8:	bd00      	pop	{pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	40005400 	.word	0x40005400
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM14)
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_TIM_Base_MspInit+0x24>)
 80020e6:	6802      	ldr	r2, [r0, #0]
{
 80020e8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM14)
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d109      	bne.n	8002102 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80020ee:	2080      	movs	r0, #128	; 0x80
 80020f0:	4a06      	ldr	r2, [pc, #24]	; (800210c <HAL_TIM_Base_MspInit+0x28>)
 80020f2:	0040      	lsls	r0, r0, #1
 80020f4:	69d1      	ldr	r1, [r2, #28]
 80020f6:	4301      	orrs	r1, r0
 80020f8:	61d1      	str	r1, [r2, #28]
 80020fa:	69d3      	ldr	r3, [r2, #28]
 80020fc:	4003      	ands	r3, r0
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002102:	b002      	add	sp, #8
 8002104:	4770      	bx	lr
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	40002000 	.word	0x40002000
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002110:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM14)
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_TIM_MspPostInit+0x2c>)
 8002114:	6802      	ldr	r2, [r0, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d10d      	bne.n	8002136 <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM14_MspPostInit 0 */
  
    /**TIM14 GPIO Configuration    
    PA4     ------> TIM14_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800211a:	2310      	movs	r3, #16
 800211c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	3b0e      	subs	r3, #14
 8002120:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 800212e:	3304      	adds	r3, #4
 8002130:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f7fe f91d 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002136:	b007      	add	sp, #28
 8002138:	bd00      	pop	{pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	40002000 	.word	0x40002000

08002140 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_UART_MspInit+0x40>)
 8002144:	6802      	ldr	r2, [r0, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d118      	bne.n	800217c <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800214a:	2080      	movs	r0, #128	; 0x80
 800214c:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <HAL_UART_MspInit+0x44>)
 800214e:	01c0      	lsls	r0, r0, #7
 8002150:	6991      	ldr	r1, [r2, #24]
 8002152:	4301      	orrs	r1, r0
 8002154:	6191      	str	r1, [r2, #24]
 8002156:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800215a:	4003      	ands	r3, r0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002160:	230c      	movs	r3, #12
 8002162:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	3b0a      	subs	r3, #10
 8002166:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216e:	3303      	adds	r3, #3
 8002170:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002174:	3b02      	subs	r3, #2
 8002176:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f7fe f8fa 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800217c:	b007      	add	sp, #28
 800217e:	bd00      	pop	{pc}
 8002180:	40013800 	.word	0x40013800
 8002184:	40021000 	.word	0x40021000

08002188 <NMI_Handler>:
 8002188:	4770      	bx	lr

0800218a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800218a:	e7fe      	b.n	800218a <HardFault_Handler>

0800218c <SVC_Handler>:
 800218c:	4770      	bx	lr

0800218e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218e:	4770      	bx	lr

08002190 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002190:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002192:	f7fe f871 	bl	8000278 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002196:	f7fe f8e6 	bl	8000366 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219a:	bd10      	pop	{r4, pc}

0800219c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800219c:	2101      	movs	r1, #1
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80021a0:	4811      	ldr	r0, [pc, #68]	; (80021e8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4002      	ands	r2, r0
 80021ac:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	480e      	ldr	r0, [pc, #56]	; (80021ec <SystemInit+0x50>)
 80021b2:	4002      	ands	r2, r0
 80021b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	480d      	ldr	r0, [pc, #52]	; (80021f0 <SystemInit+0x54>)
 80021ba:	4002      	ands	r2, r0
 80021bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <SystemInit+0x58>)
 80021c2:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80021c4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80021c6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80021c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ca:	4382      	bics	r2, r0
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80021ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d0:	4809      	ldr	r0, [pc, #36]	; (80021f8 <SystemInit+0x5c>)
 80021d2:	4002      	ands	r2, r0
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80021d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d8:	438a      	bics	r2, r1
 80021da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]

}
 80021e0:	4770      	bx	lr
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08ffb80c 	.word	0x08ffb80c
 80021ec:	fef6ffff 	.word	0xfef6ffff
 80021f0:	fffbffff 	.word	0xfffbffff
 80021f4:	ffc0ffff 	.word	0xffc0ffff
 80021f8:	fffffeec 	.word	0xfffffeec

080021fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021fc:	480d      	ldr	r0, [pc, #52]	; (8002234 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002200:	480d      	ldr	r0, [pc, #52]	; (8002238 <LoopForever+0x6>)
  ldr r1, =_edata
 8002202:	490e      	ldr	r1, [pc, #56]	; (800223c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002204:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <LoopForever+0xe>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002208:	e002      	b.n	8002210 <LoopCopyDataInit>

0800220a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800220c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220e:	3304      	adds	r3, #4

08002210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002214:	d3f9      	bcc.n	800220a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002218:	4c0b      	ldr	r4, [pc, #44]	; (8002248 <LoopForever+0x16>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800221c:	e001      	b.n	8002222 <LoopFillZerobss>

0800221e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002220:	3204      	adds	r2, #4

08002222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002224:	d3fb      	bcc.n	800221e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002226:	f7ff ffb9 	bl	800219c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800222a:	f000 f811 	bl	8002250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800222e:	f7ff fcaf 	bl	8001b90 <main>

08002232 <LoopForever>:

LoopForever:
    b LoopForever
 8002232:	e7fe      	b.n	8002232 <LoopForever>
  ldr   r0, =_estack
 8002234:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800223c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002240:	080030a0 	.word	0x080030a0
  ldr r2, =_sbss
 8002244:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002248:	20000534 	.word	0x20000534

0800224c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800224c:	e7fe      	b.n	800224c <ADC1_IRQHandler>
	...

08002250 <__libc_init_array>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	2600      	movs	r6, #0
 8002254:	4d0c      	ldr	r5, [pc, #48]	; (8002288 <__libc_init_array+0x38>)
 8002256:	4c0d      	ldr	r4, [pc, #52]	; (800228c <__libc_init_array+0x3c>)
 8002258:	1b64      	subs	r4, r4, r5
 800225a:	10a4      	asrs	r4, r4, #2
 800225c:	42a6      	cmp	r6, r4
 800225e:	d109      	bne.n	8002274 <__libc_init_array+0x24>
 8002260:	2600      	movs	r6, #0
 8002262:	f000 f82b 	bl	80022bc <_init>
 8002266:	4d0a      	ldr	r5, [pc, #40]	; (8002290 <__libc_init_array+0x40>)
 8002268:	4c0a      	ldr	r4, [pc, #40]	; (8002294 <__libc_init_array+0x44>)
 800226a:	1b64      	subs	r4, r4, r5
 800226c:	10a4      	asrs	r4, r4, #2
 800226e:	42a6      	cmp	r6, r4
 8002270:	d105      	bne.n	800227e <__libc_init_array+0x2e>
 8002272:	bd70      	pop	{r4, r5, r6, pc}
 8002274:	00b3      	lsls	r3, r6, #2
 8002276:	58eb      	ldr	r3, [r5, r3]
 8002278:	4798      	blx	r3
 800227a:	3601      	adds	r6, #1
 800227c:	e7ee      	b.n	800225c <__libc_init_array+0xc>
 800227e:	00b3      	lsls	r3, r6, #2
 8002280:	58eb      	ldr	r3, [r5, r3]
 8002282:	4798      	blx	r3
 8002284:	3601      	adds	r6, #1
 8002286:	e7f2      	b.n	800226e <__libc_init_array+0x1e>
 8002288:	08003098 	.word	0x08003098
 800228c:	08003098 	.word	0x08003098
 8002290:	08003098 	.word	0x08003098
 8002294:	0800309c 	.word	0x0800309c

08002298 <memcpy>:
 8002298:	2300      	movs	r3, #0
 800229a:	b510      	push	{r4, lr}
 800229c:	429a      	cmp	r2, r3
 800229e:	d100      	bne.n	80022a2 <memcpy+0xa>
 80022a0:	bd10      	pop	{r4, pc}
 80022a2:	5ccc      	ldrb	r4, [r1, r3]
 80022a4:	54c4      	strb	r4, [r0, r3]
 80022a6:	3301      	adds	r3, #1
 80022a8:	e7f8      	b.n	800229c <memcpy+0x4>

080022aa <memset>:
 80022aa:	0003      	movs	r3, r0
 80022ac:	1882      	adds	r2, r0, r2
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d100      	bne.n	80022b4 <memset+0xa>
 80022b2:	4770      	bx	lr
 80022b4:	7019      	strb	r1, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	e7f9      	b.n	80022ae <memset+0x4>
	...

080022bc <_init>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr

080022c8 <_fini>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr
