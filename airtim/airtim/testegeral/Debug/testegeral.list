
testegeral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08003f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004e8  20000010  08003f2c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004f8  08003f2c  000204f8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001041b  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021e1  00000000  00000000  00030453  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000920  00000000  00000000  00032638  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  00032f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004d38  00000000  00000000  00033780  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ae8  00000000  00000000  000384b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003afa0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001f1c  00000000  00000000  0003b01c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800312c 	.word	0x0800312c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800312c 	.word	0x0800312c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 fe13 	bl	8002e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 fb7e 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8ca 	bl	80003fc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8ad 	bl	80003d0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000434 	.word	0x20000434

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000434 	.word	0x20000434

080002ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b5b0      	push	{r4, r5, r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b7f      	cmp	r3, #127	; 0x7f
 80002c0:	d932      	bls.n	8000328 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c2:	4c2f      	ldr	r4, [pc, #188]	; (8000380 <NVIC_SetPriority+0xd4>)
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	001a      	movs	r2, r3
 80002ca:	230f      	movs	r3, #15
 80002cc:	4013      	ands	r3, r2
 80002ce:	3b08      	subs	r3, #8
 80002d0:	0899      	lsrs	r1, r3, #2
 80002d2:	4a2b      	ldr	r2, [pc, #172]	; (8000380 <NVIC_SetPriority+0xd4>)
 80002d4:	1dfb      	adds	r3, r7, #7
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	0018      	movs	r0, r3
 80002da:	230f      	movs	r3, #15
 80002dc:	4003      	ands	r3, r0
 80002de:	3b08      	subs	r3, #8
 80002e0:	089b      	lsrs	r3, r3, #2
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18d3      	adds	r3, r2, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	1dfa      	adds	r2, r7, #7
 80002ee:	7812      	ldrb	r2, [r2, #0]
 80002f0:	0010      	movs	r0, r2
 80002f2:	2203      	movs	r2, #3
 80002f4:	4002      	ands	r2, r0
 80002f6:	00d2      	lsls	r2, r2, #3
 80002f8:	20ff      	movs	r0, #255	; 0xff
 80002fa:	4090      	lsls	r0, r2
 80002fc:	0002      	movs	r2, r0
 80002fe:	43d2      	mvns	r2, r2
 8000300:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	019b      	lsls	r3, r3, #6
 8000306:	20ff      	movs	r0, #255	; 0xff
 8000308:	4018      	ands	r0, r3
 800030a:	1dfb      	adds	r3, r7, #7
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	001d      	movs	r5, r3
 8000310:	2303      	movs	r3, #3
 8000312:	402b      	ands	r3, r5
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	4098      	lsls	r0, r3
 8000318:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031a:	431a      	orrs	r2, r3
 800031c:	1d8b      	adds	r3, r1, #6
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	18e3      	adds	r3, r4, r3
 8000322:	3304      	adds	r3, #4
 8000324:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000326:	e027      	b.n	8000378 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4c16      	ldr	r4, [pc, #88]	; (8000384 <NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b25b      	sxtb	r3, r3
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	4914      	ldr	r1, [pc, #80]	; (8000384 <NVIC_SetPriority+0xd8>)
 8000334:	1dfa      	adds	r2, r7, #7
 8000336:	7812      	ldrb	r2, [r2, #0]
 8000338:	b252      	sxtb	r2, r2
 800033a:	0892      	lsrs	r2, r2, #2
 800033c:	32c0      	adds	r2, #192	; 0xc0
 800033e:	0092      	lsls	r2, r2, #2
 8000340:	5852      	ldr	r2, [r2, r1]
 8000342:	1df9      	adds	r1, r7, #7
 8000344:	7809      	ldrb	r1, [r1, #0]
 8000346:	0008      	movs	r0, r1
 8000348:	2103      	movs	r1, #3
 800034a:	4001      	ands	r1, r0
 800034c:	00c9      	lsls	r1, r1, #3
 800034e:	20ff      	movs	r0, #255	; 0xff
 8000350:	4088      	lsls	r0, r1
 8000352:	0001      	movs	r1, r0
 8000354:	43c9      	mvns	r1, r1
 8000356:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000358:	683a      	ldr	r2, [r7, #0]
 800035a:	0192      	lsls	r2, r2, #6
 800035c:	20ff      	movs	r0, #255	; 0xff
 800035e:	4010      	ands	r0, r2
 8000360:	1dfa      	adds	r2, r7, #7
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	0015      	movs	r5, r2
 8000366:	2203      	movs	r2, #3
 8000368:	402a      	ands	r2, r5
 800036a:	00d2      	lsls	r2, r2, #3
 800036c:	4090      	lsls	r0, r2
 800036e:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000370:	430a      	orrs	r2, r1
 8000372:	33c0      	adds	r3, #192	; 0xc0
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	511a      	str	r2, [r3, r4]
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b002      	add	sp, #8
 800037e:	bdb0      	pop	{r4, r5, r7, pc}
 8000380:	e000ed00 	.word	0xe000ed00
 8000384:	e000e100 	.word	0xe000e100

08000388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <SysTick_Config+0x40>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d901      	bls.n	800039e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2301      	movs	r3, #1
 800039c:	e010      	b.n	80003c0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <SysTick_Config+0x44>)
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	3a01      	subs	r2, #1
 80003a4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a6:	2301      	movs	r3, #1
 80003a8:	425b      	negs	r3, r3
 80003aa:	2103      	movs	r1, #3
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff ff7d 	bl	80002ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <SysTick_Config+0x44>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <SysTick_Config+0x44>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003be:	2300      	movs	r3, #0
}
 80003c0:	0018      	movs	r0, r3
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	00ffffff 	.word	0x00ffffff
 80003cc:	e000e010 	.word	0xe000e010

080003d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
 80003da:	230f      	movs	r3, #15
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	1c02      	adds	r2, r0, #0
 80003e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	230f      	movs	r3, #15
 80003e6:	18fb      	adds	r3, r7, r3
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	b25b      	sxtb	r3, r3
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f7ff ff5c 	bl	80002ac <NVIC_SetPriority>
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b004      	add	sp, #16
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	0018      	movs	r0, r3
 8000408:	f7ff ffbe 	bl	8000388 <SysTick_Config>
 800040c:	0003      	movs	r3, r0
}
 800040e:	0018      	movs	r0, r3
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b04      	cmp	r3, #4
 8000424:	d106      	bne.n	8000434 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000428:	4a07      	ldr	r2, [pc, #28]	; (8000448 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800042a:	6812      	ldr	r2, [r2, #0]
 800042c:	2104      	movs	r1, #4
 800042e:	430a      	orrs	r2, r1
 8000430:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000432:	e005      	b.n	8000440 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000436:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000438:	6812      	ldr	r2, [r2, #0]
 800043a:	2104      	movs	r1, #4
 800043c:	438a      	bics	r2, r1
 800043e:	601a      	str	r2, [r3, #0]
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b002      	add	sp, #8
 8000446:	bd80      	pop	{r7, pc}
 8000448:	e000e010 	.word	0xe000e010

0800044c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000450:	f000 f803 	bl	800045a <HAL_SYSTICK_Callback>
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800047a:	e14f      	b.n	800071c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2101      	movs	r1, #1
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	4091      	lsls	r1, r2
 8000486:	000a      	movs	r2, r1
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d100      	bne.n	8000494 <HAL_GPIO_Init+0x30>
 8000492:	e140      	b.n	8000716 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d003      	beq.n	80004a4 <HAL_GPIO_Init+0x40>
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	2b12      	cmp	r3, #18
 80004a2:	d123      	bne.n	80004ec <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	08da      	lsrs	r2, r3, #3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3208      	adds	r2, #8
 80004ac:	0092      	lsls	r2, r2, #2
 80004ae:	58d3      	ldr	r3, [r2, r3]
 80004b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	2207      	movs	r2, #7
 80004b6:	4013      	ands	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	220f      	movs	r2, #15
 80004bc:	409a      	lsls	r2, r3
 80004be:	0013      	movs	r3, r2
 80004c0:	43da      	mvns	r2, r3
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	4013      	ands	r3, r2
 80004c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	691a      	ldr	r2, [r3, #16]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	2107      	movs	r1, #7
 80004d0:	400b      	ands	r3, r1
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	409a      	lsls	r2, r3
 80004d6:	0013      	movs	r3, r2
 80004d8:	693a      	ldr	r2, [r7, #16]
 80004da:	4313      	orrs	r3, r2
 80004dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	08da      	lsrs	r2, r3, #3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3208      	adds	r2, #8
 80004e6:	0092      	lsls	r2, r2, #2
 80004e8:	6939      	ldr	r1, [r7, #16]
 80004ea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	2203      	movs	r2, #3
 80004f8:	409a      	lsls	r2, r3
 80004fa:	0013      	movs	r3, r2
 80004fc:	43da      	mvns	r2, r3
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	2203      	movs	r2, #3
 800050a:	401a      	ands	r2, r3
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	409a      	lsls	r2, r3
 8000512:	0013      	movs	r3, r2
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4313      	orrs	r3, r2
 8000518:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d00b      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d007      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000534:	2b11      	cmp	r3, #17
 8000536:	d003      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b12      	cmp	r3, #18
 800053e:	d130      	bne.n	80005a2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	2203      	movs	r2, #3
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	43da      	mvns	r2, r3
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	4013      	ands	r3, r2
 8000556:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	409a      	lsls	r2, r3
 8000562:	0013      	movs	r3, r2
 8000564:	693a      	ldr	r2, [r7, #16]
 8000566:	4313      	orrs	r3, r2
 8000568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000576:	2201      	movs	r2, #1
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	409a      	lsls	r2, r3
 800057c:	0013      	movs	r3, r2
 800057e:	43da      	mvns	r2, r3
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	4013      	ands	r3, r2
 8000584:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	091b      	lsrs	r3, r3, #4
 800058c:	2201      	movs	r2, #1
 800058e:	401a      	ands	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	409a      	lsls	r2, r3
 8000594:	0013      	movs	r3, r2
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	4313      	orrs	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	2203      	movs	r2, #3
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0013      	movs	r3, r2
 80005b2:	43da      	mvns	r2, r3
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	4013      	ands	r3, r2
 80005b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	689a      	ldr	r2, [r3, #8]
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0013      	movs	r3, r2
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685a      	ldr	r2, [r3, #4]
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	055b      	lsls	r3, r3, #21
 80005da:	4013      	ands	r3, r2
 80005dc:	d100      	bne.n	80005e0 <HAL_GPIO_Init+0x17c>
 80005de:	e09a      	b.n	8000716 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e0:	4b54      	ldr	r3, [pc, #336]	; (8000734 <HAL_GPIO_Init+0x2d0>)
 80005e2:	4a54      	ldr	r2, [pc, #336]	; (8000734 <HAL_GPIO_Init+0x2d0>)
 80005e4:	6992      	ldr	r2, [r2, #24]
 80005e6:	2101      	movs	r1, #1
 80005e8:	430a      	orrs	r2, r1
 80005ea:	619a      	str	r2, [r3, #24]
 80005ec:	4b51      	ldr	r3, [pc, #324]	; (8000734 <HAL_GPIO_Init+0x2d0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4013      	ands	r3, r2
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005f8:	4a4f      	ldr	r2, [pc, #316]	; (8000738 <HAL_GPIO_Init+0x2d4>)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	3302      	adds	r3, #2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	589b      	ldr	r3, [r3, r2]
 8000604:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	2203      	movs	r2, #3
 800060a:	4013      	ands	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	220f      	movs	r2, #15
 8000610:	409a      	lsls	r2, r3
 8000612:	0013      	movs	r3, r2
 8000614:	43da      	mvns	r2, r3
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	2390      	movs	r3, #144	; 0x90
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	429a      	cmp	r2, r3
 8000624:	d013      	beq.n	800064e <HAL_GPIO_Init+0x1ea>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a44      	ldr	r2, [pc, #272]	; (800073c <HAL_GPIO_Init+0x2d8>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d00d      	beq.n	800064a <HAL_GPIO_Init+0x1e6>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a43      	ldr	r2, [pc, #268]	; (8000740 <HAL_GPIO_Init+0x2dc>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d007      	beq.n	8000646 <HAL_GPIO_Init+0x1e2>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a42      	ldr	r2, [pc, #264]	; (8000744 <HAL_GPIO_Init+0x2e0>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d101      	bne.n	8000642 <HAL_GPIO_Init+0x1de>
 800063e:	2303      	movs	r3, #3
 8000640:	e006      	b.n	8000650 <HAL_GPIO_Init+0x1ec>
 8000642:	2305      	movs	r3, #5
 8000644:	e004      	b.n	8000650 <HAL_GPIO_Init+0x1ec>
 8000646:	2302      	movs	r3, #2
 8000648:	e002      	b.n	8000650 <HAL_GPIO_Init+0x1ec>
 800064a:	2301      	movs	r3, #1
 800064c:	e000      	b.n	8000650 <HAL_GPIO_Init+0x1ec>
 800064e:	2300      	movs	r3, #0
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	2103      	movs	r1, #3
 8000654:	400a      	ands	r2, r1
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	4093      	lsls	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4313      	orrs	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000660:	4935      	ldr	r1, [pc, #212]	; (8000738 <HAL_GPIO_Init+0x2d4>)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	3302      	adds	r3, #2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800066e:	4b36      	ldr	r3, [pc, #216]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	43da      	mvns	r2, r3
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	025b      	lsls	r3, r3, #9
 8000686:	4013      	ands	r3, r2
 8000688:	d003      	beq.n	8000692 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4313      	orrs	r3, r2
 8000690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 8000694:	693a      	ldr	r2, [r7, #16]
 8000696:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	43da      	mvns	r2, r3
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	4013      	ands	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	685a      	ldr	r2, [r3, #4]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	029b      	lsls	r3, r3, #10
 80006b0:	4013      	ands	r3, r2
 80006b2:	d003      	beq.n	80006bc <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	43da      	mvns	r2, r3
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	4013      	ands	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	035b      	lsls	r3, r3, #13
 80006da:	4013      	ands	r3, r2
 80006dc:	d003      	beq.n	80006e6 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	43da      	mvns	r2, r3
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	4013      	ands	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	039b      	lsls	r3, r3, #14
 8000704:	4013      	ands	r3, r2
 8000706:	d003      	beq.n	8000710 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000708:	693a      	ldr	r2, [r7, #16]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4313      	orrs	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	40da      	lsrs	r2, r3
 8000724:	1e13      	subs	r3, r2, #0
 8000726:	d000      	beq.n	800072a <HAL_GPIO_Init+0x2c6>
 8000728:	e6a8      	b.n	800047c <HAL_GPIO_Init+0x18>
  } 
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b006      	add	sp, #24
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40021000 	.word	0x40021000
 8000738:	40010000 	.word	0x40010000
 800073c:	48000400 	.word	0x48000400
 8000740:	48000800 	.word	0x48000800
 8000744:	48000c00 	.word	0x48000c00
 8000748:	40010400 	.word	0x40010400

0800074c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	0008      	movs	r0, r1
 8000756:	0011      	movs	r1, r2
 8000758:	1cbb      	adds	r3, r7, #2
 800075a:	1c02      	adds	r2, r0, #0
 800075c:	801a      	strh	r2, [r3, #0]
 800075e:	1c7b      	adds	r3, r7, #1
 8000760:	1c0a      	adds	r2, r1, #0
 8000762:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000764:	1c7b      	adds	r3, r7, #1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d004      	beq.n	8000776 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800076c:	1cbb      	adds	r3, r7, #2
 800076e:	881a      	ldrh	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000774:	e003      	b.n	800077e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000776:	1cbb      	adds	r3, r7, #2
 8000778:	881a      	ldrh	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	000a      	movs	r2, r1
 8000790:	1cbb      	adds	r3, r7, #2
 8000792:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	1cbb      	adds	r3, r7, #2
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	405a      	eors	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	615a      	str	r2, [r3, #20]
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e081      	b.n	80008c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2241      	movs	r2, #65	; 0x41
 80007c2:	5c9b      	ldrb	r3, [r3, r2]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d107      	bne.n	80007da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2240      	movs	r2, #64	; 0x40
 80007ce:	2100      	movs	r1, #0
 80007d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 fb7b 	bl	8002ed0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2241      	movs	r2, #65	; 0x41
 80007de:	2124      	movs	r1, #36	; 0x24
 80007e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	6812      	ldr	r2, [r2, #0]
 80007ec:	2101      	movs	r1, #1
 80007ee:	438a      	bics	r2, r1
 80007f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	6852      	ldr	r2, [r2, #4]
 80007fa:	4934      	ldr	r1, [pc, #208]	; (80008cc <HAL_I2C_Init+0x120>)
 80007fc:	400a      	ands	r2, r1
 80007fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	6892      	ldr	r2, [r2, #8]
 800080a:	4931      	ldr	r1, [pc, #196]	; (80008d0 <HAL_I2C_Init+0x124>)
 800080c:	400a      	ands	r2, r1
 800080e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d108      	bne.n	800082a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	6892      	ldr	r2, [r2, #8]
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	0209      	lsls	r1, r1, #8
 8000824:	430a      	orrs	r2, r1
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	e007      	b.n	800083a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	6892      	ldr	r2, [r2, #8]
 8000832:	2184      	movs	r1, #132	; 0x84
 8000834:	0209      	lsls	r1, r1, #8
 8000836:	430a      	orrs	r2, r1
 8000838:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d104      	bne.n	800084c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	6852      	ldr	r2, [r2, #4]
 8000856:	491f      	ldr	r1, [pc, #124]	; (80008d4 <HAL_I2C_Init+0x128>)
 8000858:	430a      	orrs	r2, r1
 800085a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	68d2      	ldr	r2, [r2, #12]
 8000866:	491a      	ldr	r1, [pc, #104]	; (80008d0 <HAL_I2C_Init+0x124>)
 8000868:	400a      	ands	r2, r1
 800086a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	6911      	ldr	r1, [r2, #16]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	6952      	ldr	r2, [r2, #20]
 8000878:	4311      	orrs	r1, r2
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	6992      	ldr	r2, [r2, #24]
 800087e:	0212      	lsls	r2, r2, #8
 8000880:	430a      	orrs	r2, r1
 8000882:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	69d1      	ldr	r1, [r2, #28]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	6a12      	ldr	r2, [r2, #32]
 8000890:	430a      	orrs	r2, r1
 8000892:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	2101      	movs	r1, #1
 80008a0:	430a      	orrs	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2241      	movs	r2, #65	; 0x41
 80008ae:	2120      	movs	r1, #32
 80008b0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2242      	movs	r2, #66	; 0x42
 80008bc:	2100      	movs	r1, #0
 80008be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	f0ffffff 	.word	0xf0ffffff
 80008d0:	ffff7fff 	.word	0xffff7fff
 80008d4:	02008000 	.word	0x02008000

080008d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af02      	add	r7, sp, #8
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	0008      	movs	r0, r1
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	0019      	movs	r1, r3
 80008e6:	230a      	movs	r3, #10
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	1c02      	adds	r2, r0, #0
 80008ec:	801a      	strh	r2, [r3, #0]
 80008ee:	2308      	movs	r3, #8
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	1c0a      	adds	r2, r1, #0
 80008f4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2241      	movs	r2, #65	; 0x41
 80008fe:	5c9b      	ldrb	r3, [r3, r2]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b20      	cmp	r3, #32
 8000904:	d000      	beq.n	8000908 <HAL_I2C_Master_Transmit+0x30>
 8000906:	e0f3      	b.n	8000af0 <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2240      	movs	r2, #64	; 0x40
 800090c:	5c9b      	ldrb	r3, [r3, r2]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d101      	bne.n	8000916 <HAL_I2C_Master_Transmit+0x3e>
 8000912:	2302      	movs	r3, #2
 8000914:	e0ed      	b.n	8000af2 <HAL_I2C_Master_Transmit+0x21a>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2240      	movs	r2, #64	; 0x40
 800091a:	2101      	movs	r1, #1
 800091c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800091e:	f7ff fcbb 	bl	8000298 <HAL_GetTick>
 8000922:	0003      	movs	r3, r0
 8000924:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	0219      	lsls	r1, r3, #8
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2319      	movs	r3, #25
 8000932:	2201      	movs	r2, #1
 8000934:	f000 f9ee 	bl	8000d14 <I2C_WaitOnFlagUntilTimeout>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	e0d8      	b.n	8000af2 <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2241      	movs	r2, #65	; 0x41
 8000944:	2121      	movs	r1, #33	; 0x21
 8000946:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2242      	movs	r2, #66	; 0x42
 800094c:	2110      	movs	r1, #16
 800094e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2200      	movs	r2, #0
 8000954:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2208      	movs	r2, #8
 8000960:	18ba      	adds	r2, r7, r2
 8000962:	8812      	ldrh	r2, [r2, #0]
 8000964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2200      	movs	r2, #0
 800096a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000970:	b29b      	uxth	r3, r3
 8000972:	2bff      	cmp	r3, #255	; 0xff
 8000974:	d912      	bls.n	800099c <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000980:	b2da      	uxtb	r2, r3
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	045c      	lsls	r4, r3, #17
 8000986:	230a      	movs	r3, #10
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	8819      	ldrh	r1, [r3, #0]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	0023      	movs	r3, r4
 8000996:	f000 facf 	bl	8000f38 <I2C_TransferConfig>
 800099a:	e07a      	b.n	8000a92 <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	049c      	lsls	r4, r3, #18
 80009b0:	230a      	movs	r3, #10
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	8819      	ldrh	r1, [r3, #0]
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	019b      	lsls	r3, r3, #6
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	0023      	movs	r3, r4
 80009c0:	f000 faba 	bl	8000f38 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80009c4:	e065      	b.n	8000a92 <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 f9da 	bl	8000d86 <I2C_WaitOnTXISFlagUntilTimeout>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d007      	beq.n	80009e6 <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d101      	bne.n	80009e2 <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e087      	b.n	8000af2 <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 80009e2:	2303      	movs	r3, #3
 80009e4:	e085      	b.n	8000af2 <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009ee:	1c50      	adds	r0, r2, #1
 80009f0:	68f9      	ldr	r1, [r7, #12]
 80009f2:	6248      	str	r0, [r1, #36]	; 0x24
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	3b01      	subs	r3, #1
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d13b      	bne.n	8000a92 <HAL_I2C_Master_Transmit+0x1ba>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d036      	beq.n	8000a92 <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	f000 f96f 	bl	8000d14 <I2C_WaitOnFlagUntilTimeout>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e059      	b.n	8000af2 <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	2bff      	cmp	r3, #255	; 0xff
 8000a46:	d911      	bls.n	8000a6c <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	045c      	lsls	r4, r3, #17
 8000a58:	230a      	movs	r3, #10
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	8819      	ldrh	r1, [r3, #0]
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	2300      	movs	r3, #0
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	0023      	movs	r3, r4
 8000a66:	f000 fa67 	bl	8000f38 <I2C_TransferConfig>
 8000a6a:	e012      	b.n	8000a92 <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	049c      	lsls	r4, r3, #18
 8000a80:	230a      	movs	r3, #10
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	8819      	ldrh	r1, [r3, #0]
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	0023      	movs	r3, r4
 8000a8e:	f000 fa53 	bl	8000f38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d194      	bne.n	80009c6 <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f9ae 	bl	8000e04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d007      	beq.n	8000abc <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d101      	bne.n	8000ab8 <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e01c      	b.n	8000af2 <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e01a      	b.n	8000af2 <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2220      	movs	r2, #32
 8000ac2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	6852      	ldr	r2, [r2, #4]
 8000ace:	490b      	ldr	r1, [pc, #44]	; (8000afc <HAL_I2C_Master_Transmit+0x224>)
 8000ad0:	400a      	ands	r2, r1
 8000ad2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2241      	movs	r2, #65	; 0x41
 8000ad8:	2120      	movs	r1, #32
 8000ada:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2242      	movs	r2, #66	; 0x42
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2240      	movs	r2, #64	; 0x40
 8000ae8:	2100      	movs	r1, #0
 8000aea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e000      	b.n	8000af2 <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8000af0:	2302      	movs	r3, #2
  }
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b007      	add	sp, #28
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	fe00e800 	.word	0xfe00e800

08000b00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	1c0a      	adds	r2, r1, #0
 8000b12:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2241      	movs	r2, #65	; 0x41
 8000b20:	5c9b      	ldrb	r3, [r3, r2]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b20      	cmp	r3, #32
 8000b26:	d000      	beq.n	8000b2a <HAL_I2C_IsDeviceReady+0x2a>
 8000b28:	e0cb      	b.n	8000cc2 <HAL_I2C_IsDeviceReady+0x1c2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	699a      	ldr	r2, [r3, #24]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	401a      	ands	r2, r3
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d101      	bne.n	8000b42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	e0c0      	b.n	8000cc4 <HAL_I2C_IsDeviceReady+0x1c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2240      	movs	r2, #64	; 0x40
 8000b46:	5c9b      	ldrb	r3, [r3, r2]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d101      	bne.n	8000b50 <HAL_I2C_IsDeviceReady+0x50>
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	e0b9      	b.n	8000cc4 <HAL_I2C_IsDeviceReady+0x1c4>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2240      	movs	r2, #64	; 0x40
 8000b54:	2101      	movs	r1, #1
 8000b56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2241      	movs	r2, #65	; 0x41
 8000b5c:	2124      	movs	r1, #36	; 0x24
 8000b5e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2200      	movs	r2, #0
 8000b64:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	68d2      	ldr	r2, [r2, #12]
 8000b6e:	2a01      	cmp	r2, #1
 8000b70:	d107      	bne.n	8000b82 <HAL_I2C_IsDeviceReady+0x82>
 8000b72:	220a      	movs	r2, #10
 8000b74:	18ba      	adds	r2, r7, r2
 8000b76:	8812      	ldrh	r2, [r2, #0]
 8000b78:	0592      	lsls	r2, r2, #22
 8000b7a:	0d92      	lsrs	r2, r2, #22
 8000b7c:	4953      	ldr	r1, [pc, #332]	; (8000ccc <HAL_I2C_IsDeviceReady+0x1cc>)
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	e007      	b.n	8000b92 <HAL_I2C_IsDeviceReady+0x92>
 8000b82:	220a      	movs	r2, #10
 8000b84:	18ba      	adds	r2, r7, r2
 8000b86:	8812      	ldrh	r2, [r2, #0]
 8000b88:	0592      	lsls	r2, r2, #22
 8000b8a:	0d92      	lsrs	r2, r2, #22
 8000b8c:	21a0      	movs	r1, #160	; 0xa0
 8000b8e:	0189      	lsls	r1, r1, #6
 8000b90:	430a      	orrs	r2, r1
 8000b92:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8000b94:	f7ff fb80 	bl	8000298 <HAL_GetTick>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	617b      	str	r3, [r7, #20]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000b9c:	e017      	b.n	8000bce <HAL_I2C_IsDeviceReady+0xce>
      {
        if (Timeout != HAL_MAX_DELAY)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	d014      	beq.n	8000bce <HAL_I2C_IsDeviceReady+0xce>
        {
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <HAL_I2C_IsDeviceReady+0xba>
 8000baa:	f7ff fb75 	bl	8000298 <HAL_GetTick>
 8000bae:	0002      	movs	r2, r0
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	1ad2      	subs	r2, r2, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d909      	bls.n	8000bce <HAL_I2C_IsDeviceReady+0xce>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2241      	movs	r2, #65	; 0x41
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	5499      	strb	r1, [r3, r2]
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2240      	movs	r2, #64	; 0x40
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	5499      	strb	r1, [r3, r2]
            return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e07a      	b.n	8000cc4 <HAL_I2C_IsDeviceReady+0x1c4>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	2220      	movs	r2, #32
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	2b20      	cmp	r3, #32
 8000bda:	d00c      	beq.n	8000bf6 <HAL_I2C_IsDeviceReady+0xf6>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	2210      	movs	r2, #16
 8000be4:	4013      	ands	r3, r2
 8000be6:	2b10      	cmp	r3, #16
 8000be8:	d005      	beq.n	8000bf6 <HAL_I2C_IsDeviceReady+0xf6>
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2241      	movs	r2, #65	; 0x41
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2ba0      	cmp	r3, #160	; 0xa0
 8000bf4:	d1d3      	bne.n	8000b9e <HAL_I2C_IsDeviceReady+0x9e>
          }
        }
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b10      	cmp	r3, #16
 8000c02:	d01a      	beq.n	8000c3a <HAL_I2C_IsDeviceReady+0x13a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2120      	movs	r1, #32
 8000c12:	f000 f87f 	bl	8000d14 <I2C_WaitOnFlagUntilTimeout>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_I2C_IsDeviceReady+0x11e>
        {
          return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e052      	b.n	8000cc4 <HAL_I2C_IsDeviceReady+0x1c4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2220      	movs	r2, #32
 8000c24:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2241      	movs	r2, #65	; 0x41
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2240      	movs	r2, #64	; 0x40
 8000c32:	2100      	movs	r1, #0
 8000c34:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e044      	b.n	8000cc4 <HAL_I2C_IsDeviceReady+0x1c4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	0013      	movs	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	2120      	movs	r1, #32
 8000c48:	f000 f864 	bl	8000d14 <I2C_WaitOnFlagUntilTimeout>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e037      	b.n	8000cc4 <HAL_I2C_IsDeviceReady+0x1c4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2210      	movs	r2, #16
 8000c5a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2220      	movs	r2, #32
 8000c62:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	613a      	str	r2, [r7, #16]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d119      	bne.n	8000ca4 <HAL_I2C_IsDeviceReady+0x1a4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	6852      	ldr	r2, [r2, #4]
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	01c9      	lsls	r1, r1, #7
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	0013      	movs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2120      	movs	r1, #32
 8000c90:	f000 f840 	bl	8000d14 <I2C_WaitOnFlagUntilTimeout>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_I2C_IsDeviceReady+0x19c>
        {
          return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e013      	b.n	8000cc4 <HAL_I2C_IsDeviceReady+0x1c4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	61da      	str	r2, [r3, #28]
      }
    }
    while (I2C_Trials < Trials);
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d200      	bcs.n	8000cae <HAL_I2C_IsDeviceReady+0x1ae>
 8000cac:	e75b      	b.n	8000b66 <HAL_I2C_IsDeviceReady+0x66>

    hi2c->State = HAL_I2C_STATE_READY;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2241      	movs	r2, #65	; 0x41
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2240      	movs	r2, #64	; 0x40
 8000cba:	2100      	movs	r1, #0
 8000cbc:	5499      	strb	r1, [r3, r2]

    return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e000      	b.n	8000cc4 <HAL_I2C_IsDeviceReady+0x1c4>
  }
  else
  {
    return HAL_BUSY;
 8000cc2:	2302      	movs	r3, #2
  }
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b006      	add	sp, #24
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	02002000 	.word	0x02002000

08000cd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d103      	bne.n	8000cee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2200      	movs	r2, #0
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d007      	beq.n	8000d0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	6992      	ldr	r2, [r2, #24]
 8000d06:	2101      	movs	r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	619a      	str	r2, [r3, #24]
  }
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d24:	e01b      	b.n	8000d5e <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	d018      	beq.n	8000d5e <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d007      	beq.n	8000d42 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000d32:	f7ff fab1 	bl	8000298 <HAL_GetTick>
 8000d36:	0002      	movs	r2, r0
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	1ad2      	subs	r2, r2, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d90d      	bls.n	8000d5e <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2241      	movs	r2, #65	; 0x41
 8000d46:	2120      	movs	r1, #32
 8000d48:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2242      	movs	r2, #66	; 0x42
 8000d4e:	2100      	movs	r1, #0
 8000d50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2240      	movs	r2, #64	; 0x40
 8000d56:	2100      	movs	r1, #0
 8000d58:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e00f      	b.n	8000d7e <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	425a      	negs	r2, r3
 8000d6e:	4153      	adcs	r3, r2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	001a      	movs	r2, r3
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d0d4      	beq.n	8000d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b004      	add	sp, #16
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000d92:	e02b      	b.n	8000dec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 f86e 	bl	8000e7c <I2C_IsAcknowledgeFailed>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e029      	b.n	8000dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	3301      	adds	r3, #1
 8000dac:	d01e      	beq.n	8000dec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000db4:	f7ff fa70 	bl	8000298 <HAL_GetTick>
 8000db8:	0002      	movs	r2, r0
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	1ad2      	subs	r2, r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d913      	bls.n	8000dec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	2220      	movs	r2, #32
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2241      	movs	r2, #65	; 0x41
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2242      	movs	r2, #66	; 0x42
 8000ddc:	2100      	movs	r1, #0
 8000dde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2240      	movs	r2, #64	; 0x40
 8000de4:	2100      	movs	r1, #0
 8000de6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e007      	b.n	8000dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	2202      	movs	r2, #2
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d1cc      	bne.n	8000d94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e10:	e028      	b.n	8000e64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 f82f 	bl	8000e7c <I2C_IsAcknowledgeFailed>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e026      	b.n	8000e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000e2c:	f7ff fa34 	bl	8000298 <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1ad2      	subs	r2, r2, r3
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d913      	bls.n	8000e64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	2220      	movs	r2, #32
 8000e42:	431a      	orrs	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2241      	movs	r2, #65	; 0x41
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2242      	movs	r2, #66	; 0x42
 8000e54:	2100      	movs	r1, #0
 8000e56:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2240      	movs	r2, #64	; 0x40
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e007      	b.n	8000e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b20      	cmp	r3, #32
 8000e70:	d1cf      	bne.n	8000e12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b004      	add	sp, #16
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2210      	movs	r2, #16
 8000e90:	4013      	ands	r3, r2
 8000e92:	2b10      	cmp	r3, #16
 8000e94:	d148      	bne.n	8000f28 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e96:	e01b      	b.n	8000ed0 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	d018      	beq.n	8000ed0 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <I2C_IsAcknowledgeFailed+0x38>
 8000ea4:	f7ff f9f8 	bl	8000298 <HAL_GetTick>
 8000ea8:	0002      	movs	r2, r0
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	1ad2      	subs	r2, r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d90d      	bls.n	8000ed0 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2241      	movs	r2, #65	; 0x41
 8000eb8:	2120      	movs	r1, #32
 8000eba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2242      	movs	r2, #66	; 0x42
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2240      	movs	r2, #64	; 0x40
 8000ec8:	2100      	movs	r1, #0
 8000eca:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e02c      	b.n	8000f2a <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	4013      	ands	r3, r2
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	d1dc      	bne.n	8000e98 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2210      	movs	r2, #16
 8000ee4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2220      	movs	r2, #32
 8000eec:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff feed 	bl	8000cd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	6812      	ldr	r2, [r2, #0]
 8000efe:	6852      	ldr	r2, [r2, #4]
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <I2C_IsAcknowledgeFailed+0xb8>)
 8000f02:	400a      	ands	r2, r1
 8000f04:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2204      	movs	r2, #4
 8000f0a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2241      	movs	r2, #65	; 0x41
 8000f10:	2120      	movs	r1, #32
 8000f12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2242      	movs	r2, #66	; 0x42
 8000f18:	2100      	movs	r1, #0
 8000f1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2240      	movs	r2, #64	; 0x40
 8000f20:	2100      	movs	r1, #0
 8000f22:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	fe00e800 	.word	0xfe00e800

08000f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	0008      	movs	r0, r1
 8000f42:	0011      	movs	r1, r2
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	230a      	movs	r3, #10
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	1c02      	adds	r2, r0, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
 8000f4e:	2309      	movs	r3, #9
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	1c0a      	adds	r2, r1, #0
 8000f54:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <I2C_TransferConfig+0x6c>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	059b      	lsls	r3, r3, #22
 8000f72:	0d9a      	lsrs	r2, r3, #22
 8000f74:	2309      	movs	r3, #9
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	0419      	lsls	r1, r3, #16
 8000f7c:	23ff      	movs	r3, #255	; 0xff
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	400b      	ands	r3, r1
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	605a      	str	r2, [r3, #4]
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b006      	add	sp, #24
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	fc009800 	.word	0xfc009800

08000fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2241      	movs	r2, #65	; 0x41
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b20      	cmp	r3, #32
 8000fbc:	d138      	bne.n	8001030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2240      	movs	r2, #64	; 0x40
 8000fc2:	5c9b      	ldrb	r3, [r3, r2]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e032      	b.n	8001032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2240      	movs	r2, #64	; 0x40
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2241      	movs	r2, #65	; 0x41
 8000fd8:	2124      	movs	r1, #36	; 0x24
 8000fda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	438a      	bics	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	4911      	ldr	r1, [pc, #68]	; (800103c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	6811      	ldr	r1, [r2, #0]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	2101      	movs	r1, #1
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2241      	movs	r2, #65	; 0x41
 8001020:	2120      	movs	r1, #32
 8001022:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	2100      	movs	r1, #0
 800102a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	e000      	b.n	8001032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001030:	2302      	movs	r3, #2
  }
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	ffffefff 	.word	0xffffefff

08001040 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2241      	movs	r2, #65	; 0x41
 8001052:	5c9b      	ldrb	r3, [r3, r2]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b20      	cmp	r3, #32
 8001058:	d139      	bne.n	80010ce <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2240      	movs	r2, #64	; 0x40
 800105e:	5c9b      	ldrb	r3, [r3, r2]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001064:	2302      	movs	r3, #2
 8001066:	e033      	b.n	80010d0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2240      	movs	r2, #64	; 0x40
 800106c:	2101      	movs	r1, #1
 800106e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2241      	movs	r2, #65	; 0x41
 8001074:	2124      	movs	r1, #36	; 0x24
 8001076:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	2101      	movs	r1, #1
 8001084:	438a      	bics	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2241      	movs	r2, #65	; 0x41
 80010be:	2120      	movs	r1, #32
 80010c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2240      	movs	r2, #64	; 0x40
 80010c6:	2100      	movs	r1, #0
 80010c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80010ce:	2302      	movs	r3, #2
  }
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b004      	add	sp, #16
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	fffff0ff 	.word	0xfffff0ff

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2201      	movs	r2, #1
 80010ee:	4013      	ands	r3, r2
 80010f0:	d100      	bne.n	80010f4 <HAL_RCC_OscConfig+0x18>
 80010f2:	e08d      	b.n	8001210 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f4:	4bc3      	ldr	r3, [pc, #780]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	220c      	movs	r2, #12
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d00e      	beq.n	800111e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001100:	4bc0      	ldr	r3, [pc, #768]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	220c      	movs	r2, #12
 8001106:	4013      	ands	r3, r2
 8001108:	2b08      	cmp	r3, #8
 800110a:	d116      	bne.n	800113a <HAL_RCC_OscConfig+0x5e>
 800110c:	4bbd      	ldr	r3, [pc, #756]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	025b      	lsls	r3, r3, #9
 8001114:	401a      	ands	r2, r3
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	429a      	cmp	r2, r3
 800111c:	d10d      	bne.n	800113a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	4bb9      	ldr	r3, [pc, #740]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	029b      	lsls	r3, r3, #10
 8001126:	4013      	ands	r3, r2
 8001128:	d100      	bne.n	800112c <HAL_RCC_OscConfig+0x50>
 800112a:	e070      	b.n	800120e <HAL_RCC_OscConfig+0x132>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d000      	beq.n	8001136 <HAL_RCC_OscConfig+0x5a>
 8001134:	e06b      	b.n	800120e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e2b5      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d107      	bne.n	8001152 <HAL_RCC_OscConfig+0x76>
 8001142:	4bb0      	ldr	r3, [pc, #704]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001144:	4aaf      	ldr	r2, [pc, #700]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0249      	lsls	r1, r1, #9
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e02f      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x98>
 800115a:	4baa      	ldr	r3, [pc, #680]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800115c:	4aa9      	ldr	r2, [pc, #676]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	49a9      	ldr	r1, [pc, #676]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001162:	400a      	ands	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	4ba7      	ldr	r3, [pc, #668]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001168:	4aa6      	ldr	r2, [pc, #664]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	49a7      	ldr	r1, [pc, #668]	; (800140c <HAL_RCC_OscConfig+0x330>)
 800116e:	400a      	ands	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e01e      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b05      	cmp	r3, #5
 800117a:	d10e      	bne.n	800119a <HAL_RCC_OscConfig+0xbe>
 800117c:	4ba1      	ldr	r3, [pc, #644]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800117e:	4aa1      	ldr	r2, [pc, #644]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	02c9      	lsls	r1, r1, #11
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	4b9e      	ldr	r3, [pc, #632]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800118c:	4a9d      	ldr	r2, [pc, #628]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0249      	lsls	r1, r1, #9
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e00b      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
 800119a:	4b9a      	ldr	r3, [pc, #616]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800119c:	4a99      	ldr	r2, [pc, #612]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	4999      	ldr	r1, [pc, #612]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	4b97      	ldr	r3, [pc, #604]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80011a8:	4a96      	ldr	r2, [pc, #600]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	4997      	ldr	r1, [pc, #604]	; (800140c <HAL_RCC_OscConfig+0x330>)
 80011ae:	400a      	ands	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d014      	beq.n	80011e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff f86d 	bl	8000298 <HAL_GetTick>
 80011be:	0003      	movs	r3, r0
 80011c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff f868 	bl	8000298 <HAL_GetTick>
 80011c8:	0002      	movs	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e267      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b8b      	ldr	r3, [pc, #556]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	029b      	lsls	r3, r3, #10
 80011de:	4013      	ands	r3, r2
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xe8>
 80011e2:	e015      	b.n	8001210 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff f858 	bl	8000298 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ee:	f7ff f853 	bl	8000298 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	; 0x64
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e252      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001200:	4b80      	ldr	r3, [pc, #512]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x112>
 800120c:	e000      	b.n	8001210 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d100      	bne.n	800121c <HAL_RCC_OscConfig+0x140>
 800121a:	e069      	b.n	80012f0 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800121c:	4b79      	ldr	r3, [pc, #484]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	220c      	movs	r2, #12
 8001222:	4013      	ands	r3, r2
 8001224:	d00b      	beq.n	800123e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001226:	4b77      	ldr	r3, [pc, #476]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	220c      	movs	r2, #12
 800122c:	4013      	ands	r3, r2
 800122e:	2b08      	cmp	r3, #8
 8001230:	d11c      	bne.n	800126c <HAL_RCC_OscConfig+0x190>
 8001232:	4b74      	ldr	r3, [pc, #464]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	025b      	lsls	r3, r3, #9
 800123a:	4013      	ands	r3, r2
 800123c:	d116      	bne.n	800126c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	4b71      	ldr	r3, [pc, #452]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2202      	movs	r2, #2
 8001244:	4013      	ands	r3, r2
 8001246:	d005      	beq.n	8001254 <HAL_RCC_OscConfig+0x178>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d001      	beq.n	8001254 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e228      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	4a6b      	ldr	r2, [pc, #428]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001256:	4b6b      	ldr	r3, [pc, #428]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	21f8      	movs	r1, #248	; 0xf8
 800125c:	438b      	bics	r3, r1
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	430b      	orrs	r3, r1
 8001268:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	e041      	b.n	80012f0 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d024      	beq.n	80012be <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001274:	4b63      	ldr	r3, [pc, #396]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001276:	4a63      	ldr	r2, [pc, #396]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	2101      	movs	r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff f80a 	bl	8000298 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff f805 	bl	8000298 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e204      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	4b59      	ldr	r3, [pc, #356]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d0f1      	beq.n	800128a <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4a57      	ldr	r2, [pc, #348]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80012a8:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	21f8      	movs	r1, #248	; 0xf8
 80012ae:	438b      	bics	r3, r1
 80012b0:	0019      	movs	r1, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	e018      	b.n	80012f0 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012be:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80012c0:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	438a      	bics	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7fe ffe5 	bl	8000298 <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d4:	f7fe ffe0 	bl	8000298 <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1df      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2202      	movs	r2, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d1f1      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2208      	movs	r2, #8
 80012f6:	4013      	ands	r3, r2
 80012f8:	d036      	beq.n	8001368 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d019      	beq.n	8001336 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001304:	4a3f      	ldr	r2, [pc, #252]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001306:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7fe ffc3 	bl	8000298 <HAL_GetTick>
 8001312:	0003      	movs	r3, r0
 8001314:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001318:	f7fe ffbe 	bl	8000298 <HAL_GetTick>
 800131c:	0002      	movs	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1bd      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d0f1      	beq.n	8001318 <HAL_RCC_OscConfig+0x23c>
 8001334:	e018      	b.n	8001368 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001336:	4b33      	ldr	r3, [pc, #204]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001338:	4a32      	ldr	r2, [pc, #200]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800133a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800133c:	2101      	movs	r1, #1
 800133e:	438a      	bics	r2, r1
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7fe ffa9 	bl	8000298 <HAL_GetTick>
 8001346:	0003      	movs	r3, r0
 8001348:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134c:	f7fe ffa4 	bl	8000298 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1a3      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d1f1      	bne.n	800134c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2204      	movs	r2, #4
 800136e:	4013      	ands	r3, r2
 8001370:	d100      	bne.n	8001374 <HAL_RCC_OscConfig+0x298>
 8001372:	e0b5      	b.n	80014e0 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001374:	2317      	movs	r3, #23
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800137e:	69da      	ldr	r2, [r3, #28]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	055b      	lsls	r3, r3, #21
 8001384:	4013      	ands	r3, r2
 8001386:	d111      	bne.n	80013ac <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 800138c:	69d2      	ldr	r2, [r2, #28]
 800138e:	2180      	movs	r1, #128	; 0x80
 8001390:	0549      	lsls	r1, r1, #21
 8001392:	430a      	orrs	r2, r1
 8001394:	61da      	str	r2, [r3, #28]
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 8001398:	69da      	ldr	r2, [r3, #28]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	055b      	lsls	r3, r3, #21
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013a4:	2317      	movs	r3, #23
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_RCC_OscConfig+0x334>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4013      	ands	r3, r2
 80013b6:	d11a      	bne.n	80013ee <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_RCC_OscConfig+0x334>)
 80013ba:	4a15      	ldr	r2, [pc, #84]	; (8001410 <HAL_RCC_OscConfig+0x334>)
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	0049      	lsls	r1, r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c6:	f7fe ff67 	bl	8000298 <HAL_GetTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d0:	f7fe ff62 	bl	8000298 <HAL_GetTick>
 80013d4:	0002      	movs	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e161      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x334>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4013      	ands	r3, r2
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d10e      	bne.n	8001414 <HAL_RCC_OscConfig+0x338>
 80013f6:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80013f8:	4a02      	ldr	r2, [pc, #8]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80013fa:	6a12      	ldr	r2, [r2, #32]
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	621a      	str	r2, [r3, #32]
 8001402:	e035      	b.n	8001470 <HAL_RCC_OscConfig+0x394>
 8001404:	40021000 	.word	0x40021000
 8001408:	fffeffff 	.word	0xfffeffff
 800140c:	fffbffff 	.word	0xfffbffff
 8001410:	40007000 	.word	0x40007000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x35a>
 800141c:	4ba4      	ldr	r3, [pc, #656]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800141e:	4aa4      	ldr	r2, [pc, #656]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001420:	6a12      	ldr	r2, [r2, #32]
 8001422:	2101      	movs	r1, #1
 8001424:	438a      	bics	r2, r1
 8001426:	621a      	str	r2, [r3, #32]
 8001428:	4ba1      	ldr	r3, [pc, #644]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800142a:	4aa1      	ldr	r2, [pc, #644]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800142c:	6a12      	ldr	r2, [r2, #32]
 800142e:	2104      	movs	r1, #4
 8001430:	438a      	bics	r2, r1
 8001432:	621a      	str	r2, [r3, #32]
 8001434:	e01c      	b.n	8001470 <HAL_RCC_OscConfig+0x394>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x37c>
 800143e:	4b9c      	ldr	r3, [pc, #624]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001440:	4a9b      	ldr	r2, [pc, #620]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001442:	6a12      	ldr	r2, [r2, #32]
 8001444:	2104      	movs	r1, #4
 8001446:	430a      	orrs	r2, r1
 8001448:	621a      	str	r2, [r3, #32]
 800144a:	4b99      	ldr	r3, [pc, #612]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800144c:	4a98      	ldr	r2, [pc, #608]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800144e:	6a12      	ldr	r2, [r2, #32]
 8001450:	2101      	movs	r1, #1
 8001452:	430a      	orrs	r2, r1
 8001454:	621a      	str	r2, [r3, #32]
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0x394>
 8001458:	4b95      	ldr	r3, [pc, #596]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800145a:	4a95      	ldr	r2, [pc, #596]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800145c:	6a12      	ldr	r2, [r2, #32]
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	621a      	str	r2, [r3, #32]
 8001464:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001466:	4a92      	ldr	r2, [pc, #584]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001468:	6a12      	ldr	r2, [r2, #32]
 800146a:	2104      	movs	r1, #4
 800146c:	438a      	bics	r2, r1
 800146e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d014      	beq.n	80014a2 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7fe ff0e 	bl	8000298 <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001480:	e009      	b.n	8001496 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001482:	f7fe ff09 	bl	8000298 <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	4a89      	ldr	r2, [pc, #548]	; (80016b4 <HAL_RCC_OscConfig+0x5d8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e107      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001496:	4b86      	ldr	r3, [pc, #536]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x3a6>
 80014a0:	e013      	b.n	80014ca <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7fe fef9 	bl	8000298 <HAL_GetTick>
 80014a6:	0003      	movs	r3, r0
 80014a8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014aa:	e009      	b.n	80014c0 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ac:	f7fe fef4 	bl	8000298 <HAL_GetTick>
 80014b0:	0002      	movs	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	4a7f      	ldr	r2, [pc, #508]	; (80016b4 <HAL_RCC_OscConfig+0x5d8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0f2      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c0:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	2202      	movs	r2, #2
 80014c6:	4013      	ands	r3, r2
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014ca:	2317      	movs	r3, #23
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d4:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80014d6:	4a76      	ldr	r2, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80014d8:	69d2      	ldr	r2, [r2, #28]
 80014da:	4977      	ldr	r1, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x5dc>)
 80014dc:	400a      	ands	r2, r1
 80014de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2210      	movs	r2, #16
 80014e6:	4013      	ands	r3, r2
 80014e8:	d063      	beq.n	80015b2 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d12a      	bne.n	8001548 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014f2:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80014f4:	4a6e      	ldr	r2, [pc, #440]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80014f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014f8:	2104      	movs	r1, #4
 80014fa:	430a      	orrs	r2, r1
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014fe:	4b6c      	ldr	r3, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001500:	4a6b      	ldr	r2, [pc, #428]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001502:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001504:	2101      	movs	r1, #1
 8001506:	430a      	orrs	r2, r1
 8001508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7fe fec5 	bl	8000298 <HAL_GetTick>
 800150e:	0003      	movs	r3, r0
 8001510:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001514:	f7fe fec0 	bl	8000298 <HAL_GetTick>
 8001518:	0002      	movs	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0bf      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001526:	4b62      	ldr	r3, [pc, #392]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d0f1      	beq.n	8001514 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001530:	4a5f      	ldr	r2, [pc, #380]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001532:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001536:	21f8      	movs	r1, #248	; 0xf8
 8001538:	438b      	bics	r3, r1
 800153a:	0019      	movs	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	430b      	orrs	r3, r1
 8001544:	6353      	str	r3, [r2, #52]	; 0x34
 8001546:	e034      	b.n	80015b2 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	3305      	adds	r3, #5
 800154e:	d111      	bne.n	8001574 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001550:	4b57      	ldr	r3, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001552:	4a57      	ldr	r2, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001554:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001556:	2104      	movs	r1, #4
 8001558:	438a      	bics	r2, r1
 800155a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800155c:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800155e:	4b54      	ldr	r3, [pc, #336]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	21f8      	movs	r1, #248	; 0xf8
 8001564:	438b      	bics	r3, r1
 8001566:	0019      	movs	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	430b      	orrs	r3, r1
 8001570:	6353      	str	r3, [r2, #52]	; 0x34
 8001572:	e01e      	b.n	80015b2 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001574:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001576:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800157a:	2104      	movs	r1, #4
 800157c:	430a      	orrs	r2, r1
 800157e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001580:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001582:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001586:	2101      	movs	r1, #1
 8001588:	438a      	bics	r2, r1
 800158a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7fe fe84 	bl	8000298 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001596:	f7fe fe7f 	bl	8000298 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e07e      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015a8:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80015aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d1f1      	bne.n	8001596 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d100      	bne.n	80015bc <HAL_RCC_OscConfig+0x4e0>
 80015ba:	e073      	b.n	80016a4 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015bc:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	220c      	movs	r2, #12
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d100      	bne.n	80015ca <HAL_RCC_OscConfig+0x4ee>
 80015c8:	e06a      	b.n	80016a0 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d14b      	bne.n	800166a <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80015d4:	4a36      	ldr	r2, [pc, #216]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	4938      	ldr	r1, [pc, #224]	; (80016bc <HAL_RCC_OscConfig+0x5e0>)
 80015da:	400a      	ands	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7fe fe5b 	bl	8000298 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7fe fe56 	bl	8000298 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e055      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	049b      	lsls	r3, r3, #18
 8001602:	4013      	ands	r3, r2
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001606:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	210f      	movs	r1, #15
 800160e:	438b      	bics	r3, r1
 8001610:	0019      	movs	r1, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	430b      	orrs	r3, r1
 8001618:	62d3      	str	r3, [r2, #44]	; 0x2c
 800161a:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4927      	ldr	r1, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x5e4>)
 8001622:	4019      	ands	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	4303      	orrs	r3, r0
 800162e:	430b      	orrs	r3, r1
 8001630:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001634:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0449      	lsls	r1, r1, #17
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7fe fe2a 	bl	8000298 <HAL_GetTick>
 8001644:	0003      	movs	r3, r0
 8001646:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7fe fe25 	bl	8000298 <HAL_GetTick>
 800164e:	0002      	movs	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e024      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	049b      	lsls	r3, r3, #18
 8001664:	4013      	ands	r3, r2
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x56e>
 8001668:	e01c      	b.n	80016a4 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800166c:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	4912      	ldr	r1, [pc, #72]	; (80016bc <HAL_RCC_OscConfig+0x5e0>)
 8001672:	400a      	ands	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7fe fe0f 	bl	8000298 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7fe fe0a 	bl	8000298 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e009      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <HAL_RCC_OscConfig+0x5d4>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x5a4>
 800169e:	e001      	b.n	80016a4 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b006      	add	sp, #24
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	40021000 	.word	0x40021000
 80016b4:	00001388 	.word	0x00001388
 80016b8:	efffffff 	.word	0xefffffff
 80016bc:	feffffff 	.word	0xfeffffff
 80016c0:	ffc2ffff 	.word	0xffc2ffff

080016c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016d2:	4b69      	ldr	r3, [pc, #420]	; (8001878 <HAL_RCC_ClockConfig+0x1b4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2201      	movs	r2, #1
 80016d8:	401a      	ands	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d211      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e0:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1b4>)
 80016e2:	4a65      	ldr	r2, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1b4>)
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	2101      	movs	r1, #1
 80016e8:	438a      	bics	r2, r1
 80016ea:	0011      	movs	r1, r2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f2:	4b61      	ldr	r3, [pc, #388]	; (8001878 <HAL_RCC_ClockConfig+0x1b4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	401a      	ands	r2, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0b5      	b.n	8001870 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2202      	movs	r2, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d009      	beq.n	8001722 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170e:	4a5b      	ldr	r2, [pc, #364]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	4b5a      	ldr	r3, [pc, #360]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	21f0      	movs	r1, #240	; 0xf0
 8001716:	438b      	bics	r3, r1
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	430b      	orrs	r3, r1
 8001720:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	4013      	ands	r3, r2
 800172a:	d100      	bne.n	800172e <HAL_RCC_ClockConfig+0x6a>
 800172c:	e067      	b.n	80017fe <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b51      	ldr	r3, [pc, #324]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	4013      	ands	r3, r2
 8001740:	d114      	bne.n	800176c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e094      	b.n	8001870 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4b4b      	ldr	r3, [pc, #300]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	049b      	lsls	r3, r3, #18
 8001756:	4013      	ands	r3, r2
 8001758:	d108      	bne.n	800176c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e088      	b.n	8001870 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e081      	b.n	8001870 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176c:	4a43      	ldr	r2, [pc, #268]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 800176e:	4b43      	ldr	r3, [pc, #268]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2103      	movs	r1, #3
 8001774:	438b      	bics	r3, r1
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	430b      	orrs	r3, r1
 800177e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7fe fd8a 	bl	8000298 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d111      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001790:	e009      	b.n	80017a6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001792:	f7fe fd81 	bl	8000298 <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	4a38      	ldr	r2, [pc, #224]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e064      	b.n	8001870 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a6:	4b35      	ldr	r3, [pc, #212]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	220c      	movs	r2, #12
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d1ef      	bne.n	8001792 <HAL_RCC_ClockConfig+0xce>
 80017b2:	e024      	b.n	80017fe <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d11b      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017bc:	e009      	b.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017be:	f7fe fd6b 	bl	8000298 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	4a2d      	ldr	r2, [pc, #180]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e04e      	b.n	8001870 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	220c      	movs	r2, #12
 80017d8:	4013      	ands	r3, r2
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d1ef      	bne.n	80017be <HAL_RCC_ClockConfig+0xfa>
 80017de:	e00e      	b.n	80017fe <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7fe fd5a 	bl	8000298 <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	4a25      	ldr	r2, [pc, #148]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e03d      	b.n	8001870 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	220c      	movs	r2, #12
 80017fa:	4013      	ands	r3, r2
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_RCC_ClockConfig+0x1b4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	401a      	ands	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d911      	bls.n	8001830 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_RCC_ClockConfig+0x1b4>)
 800180e:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_RCC_ClockConfig+0x1b4>)
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	2101      	movs	r1, #1
 8001814:	438a      	bics	r2, r1
 8001816:	0011      	movs	r1, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_RCC_ClockConfig+0x1b4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	401a      	ands	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e01f      	b.n	8001870 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2204      	movs	r2, #4
 8001836:	4013      	ands	r3, r2
 8001838:	d008      	beq.n	800184c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4910      	ldr	r1, [pc, #64]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 8001842:	4019      	ands	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	430b      	orrs	r3, r1
 800184a:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800184c:	f000 f820 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 8001850:	0001      	movs	r1, r0
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	220f      	movs	r2, #15
 800185a:	4013      	ands	r3, r2
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	000a      	movs	r2, r1
 8001862:	40da      	lsrs	r2, r3
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c8>)
 8001866:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001868:	2000      	movs	r0, #0
 800186a:	f7fe fced 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b004      	add	sp, #16
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40022000 	.word	0x40022000
 800187c:	40021000 	.word	0x40021000
 8001880:	00001388 	.word	0x00001388
 8001884:	fffff8ff 	.word	0xfffff8ff
 8001888:	08003efc 	.word	0x08003efc
 800188c:	2000000c 	.word	0x2000000c

08001890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b08f      	sub	sp, #60	; 0x3c
 8001894:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001896:	2314      	movs	r3, #20
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	4a28      	ldr	r2, [pc, #160]	; (800193c <HAL_RCC_GetSysClockFreq+0xac>)
 800189c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800189e:	c313      	stmia	r3!, {r0, r1, r4}
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4a26      	ldr	r2, [pc, #152]	; (8001940 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018aa:	c313      	stmia	r3!, {r0, r1, r4}
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	220c      	movs	r2, #12
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d002      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x4a>
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d003      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x50>
 80018d8:	e027      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018de:	e027      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	0c9b      	lsrs	r3, r3, #18
 80018e4:	220f      	movs	r2, #15
 80018e6:	4013      	ands	r3, r2
 80018e8:	2214      	movs	r2, #20
 80018ea:	18ba      	adds	r2, r7, r2
 80018ec:	5cd3      	ldrb	r3, [r2, r3]
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	220f      	movs	r2, #15
 80018f6:	4013      	ands	r3, r2
 80018f8:	1d3a      	adds	r2, r7, #4
 80018fa:	5cd3      	ldrb	r3, [r2, r3]
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	4013      	ands	r3, r2
 8001906:	d009      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800190a:	480f      	ldr	r0, [pc, #60]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800190c:	f7fe fbfc 	bl	8000108 <__udivsi3>
 8001910:	0003      	movs	r3, r0
 8001912:	001a      	movs	r2, r3
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	4353      	muls	r3, r2
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
 800191a:	e003      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001920:	4353      	muls	r3, r2
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001928:	e002      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800192e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b00f      	add	sp, #60	; 0x3c
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	08003144 	.word	0x08003144
 8001940:	08003154 	.word	0x08003154
 8001944:	40021000 	.word	0x40021000
 8001948:	007a1200 	.word	0x007a1200
 800194c:	003d0900 	.word	0x003d0900

08001950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <HAL_RCC_GetHCLKFreq+0x10>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	2000000c 	.word	0x2000000c

08001964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001968:	f7ff fff2 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 800196c:	0001      	movs	r1, r0
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	2207      	movs	r2, #7
 8001976:	4013      	ands	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_RCC_GetPCLK1Freq+0x28>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	40d9      	lsrs	r1, r3
 800197e:	000b      	movs	r3, r1
}    
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40021000 	.word	0x40021000
 800198c:	08003f0c 	.word	0x08003f0c

08001990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	025b      	lsls	r3, r3, #9
 80019a8:	4013      	ands	r3, r2
 80019aa:	d100      	bne.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019ac:	e08e      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	2317      	movs	r3, #23
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	055b      	lsls	r3, r3, #21
 80019be:	4013      	ands	r3, r2
 80019c0:	d111      	bne.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b54      	ldr	r3, [pc, #336]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019c4:	4a53      	ldr	r2, [pc, #332]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019c6:	69d2      	ldr	r2, [r2, #28]
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	0549      	lsls	r1, r1, #21
 80019cc:	430a      	orrs	r2, r1
 80019ce:	61da      	str	r2, [r3, #28]
 80019d0:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	055b      	lsls	r3, r3, #21
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2317      	movs	r3, #23
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	d11a      	bne.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f2:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019f4:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0049      	lsls	r1, r1, #1
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a00:	f7fe fc4a 	bl	8000298 <HAL_GetTick>
 8001a04:	0003      	movs	r3, r0
 8001a06:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	e008      	b.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0a:	f7fe fc45 	bl	8000298 <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b64      	cmp	r3, #100	; 0x64
 8001a16:	d901      	bls.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e076      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a2a:	6a1a      	ldr	r2, [r3, #32]
 8001a2c:	23c0      	movs	r3, #192	; 0xc0
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d034      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	23c0      	movs	r3, #192	; 0xc0
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	401a      	ands	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d02c      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a56:	4a2f      	ldr	r2, [pc, #188]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a58:	6a12      	ldr	r2, [r2, #32]
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	0249      	lsls	r1, r1, #9
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a64:	4a2b      	ldr	r2, [pc, #172]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a66:	6a12      	ldr	r2, [r2, #32]
 8001a68:	492d      	ldr	r1, [pc, #180]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001a6a:	400a      	ands	r2, r1
 8001a6c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7fe fc0c 	bl	8000298 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	e009      	b.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7fe fc07 	bl	8000298 <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e037      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	491c      	ldr	r1, [pc, #112]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001aac:	4019      	ands	r1, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ab6:	2317      	movs	r3, #23
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ac4:	69d2      	ldr	r2, [r2, #28]
 8001ac6:	4918      	ldr	r1, [pc, #96]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d009      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	2103      	movs	r1, #3
 8001ade:	438b      	bics	r3, r1
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2220      	movs	r2, #32
 8001af0:	4013      	ands	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	2110      	movs	r1, #16
 8001afc:	438b      	bics	r3, r1
 8001afe:	0019      	movs	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b006      	add	sp, #24
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	fffffcff 	.word	0xfffffcff
 8001b20:	fffeffff 	.word	0xfffeffff
 8001b24:	00001388 	.word	0x00001388
 8001b28:	efffffff 	.word	0xefffffff

08001b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e047      	b.n	8001bce <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2269      	movs	r2, #105	; 0x69
 8001b42:	5c9b      	ldrb	r3, [r3, r2]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d107      	bne.n	8001b5a <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2268      	movs	r2, #104	; 0x68
 8001b4e:	2100      	movs	r1, #0
 8001b50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f001 f9f7 	bl	8002f48 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2269      	movs	r2, #105	; 0x69
 8001b5e:	2124      	movs	r1, #36	; 0x24
 8001b60:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	438a      	bics	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 f8ff 	bl	8001d78 <UART_SetConfig>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e024      	b.n	8001bce <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 fa50 	bl	8002034 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	6852      	ldr	r2, [r2, #4]
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <HAL_UART_Init+0xac>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	6892      	ldr	r2, [r2, #8]
 8001bae:	2108      	movs	r1, #8
 8001bb0:	438a      	bics	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 fae0 	bl	800218c <UART_CheckIdleState>
 8001bcc:	0003      	movs	r3, r0
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b002      	add	sp, #8
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	fffff7ff 	.word	0xfffff7ff

08001bdc <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	1dbb      	adds	r3, r7, #6
 8001bea:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	226a      	movs	r2, #106	; 0x6a
 8001bf4:	5c9b      	ldrb	r3, [r3, r2]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d000      	beq.n	8001bfe <HAL_UART_Receive+0x22>
 8001bfc:	e0b4      	b.n	8001d68 <HAL_UART_Receive+0x18c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_UART_Receive+0x30>
 8001c04:	1dbb      	adds	r3, r7, #6
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0ac      	b.n	8001d6a <HAL_UART_Receive+0x18e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	015b      	lsls	r3, r3, #5
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d109      	bne.n	8001c30 <HAL_UART_Receive+0x54>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2201      	movs	r2, #1
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e09c      	b.n	8001d6a <HAL_UART_Receive+0x18e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2268      	movs	r2, #104	; 0x68
 8001c34:	5c9b      	ldrb	r3, [r3, r2]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_UART_Receive+0x62>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e095      	b.n	8001d6a <HAL_UART_Receive+0x18e>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2268      	movs	r2, #104	; 0x68
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	226a      	movs	r2, #106	; 0x6a
 8001c50:	2122      	movs	r1, #34	; 0x22
 8001c52:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001c54:	f7fe fb20 	bl	8000298 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1dba      	adds	r2, r7, #6
 8001c60:	2158      	movs	r1, #88	; 0x58
 8001c62:	8812      	ldrh	r2, [r2, #0]
 8001c64:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1dba      	adds	r2, r7, #6
 8001c6a:	215a      	movs	r1, #90	; 0x5a
 8001c6c:	8812      	ldrh	r2, [r2, #0]
 8001c6e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	015b      	lsls	r3, r3, #5
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d10d      	bne.n	8001c98 <HAL_UART_Receive+0xbc>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d104      	bne.n	8001c8e <HAL_UART_Receive+0xb2>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	225c      	movs	r2, #92	; 0x5c
 8001c88:	493a      	ldr	r1, [pc, #232]	; (8001d74 <HAL_UART_Receive+0x198>)
 8001c8a:	5299      	strh	r1, [r3, r2]
 8001c8c:	e015      	b.n	8001cba <HAL_UART_Receive+0xde>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	225c      	movs	r2, #92	; 0x5c
 8001c92:	21ff      	movs	r1, #255	; 0xff
 8001c94:	5299      	strh	r1, [r3, r2]
 8001c96:	e010      	b.n	8001cba <HAL_UART_Receive+0xde>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10c      	bne.n	8001cba <HAL_UART_Receive+0xde>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <HAL_UART_Receive+0xd6>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	225c      	movs	r2, #92	; 0x5c
 8001cac:	21ff      	movs	r1, #255	; 0xff
 8001cae:	5299      	strh	r1, [r3, r2]
 8001cb0:	e003      	b.n	8001cba <HAL_UART_Receive+0xde>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	225c      	movs	r2, #92	; 0x5c
 8001cb6:	217f      	movs	r1, #127	; 0x7f
 8001cb8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001cba:	231a      	movs	r3, #26
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	215c      	movs	r1, #92	; 0x5c
 8001cc2:	5a52      	ldrh	r2, [r2, r1]
 8001cc4:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001cc6:	e03f      	b.n	8001d48 <HAL_UART_Receive+0x16c>
    {
      huart->RxXferCount--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	225a      	movs	r2, #90	; 0x5a
 8001ccc:	5a9b      	ldrh	r3, [r3, r2]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b299      	uxth	r1, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	225a      	movs	r2, #90	; 0x5a
 8001cd8:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	f000 fa68 	bl	80021bc <UART_WaitOnFlagUntilTimeout>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_UART_Receive+0x118>
      {
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e03a      	b.n	8001d6a <HAL_UART_Receive+0x18e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	015b      	lsls	r3, r3, #5
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d114      	bne.n	8001d2a <HAL_UART_Receive+0x14e>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d110      	bne.n	8001d2a <HAL_UART_Receive+0x14e>
      {
        tmp = (uint16_t*) pData ;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	221a      	movs	r2, #26
 8001d16:	18ba      	adds	r2, r7, r2
 8001d18:	8812      	ldrh	r2, [r2, #0]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3302      	adds	r3, #2
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	e00e      	b.n	8001d48 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	60ba      	str	r2, [r7, #8]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001d36:	b292      	uxth	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	211a      	movs	r1, #26
 8001d3c:	1879      	adds	r1, r7, r1
 8001d3e:	8809      	ldrh	r1, [r1, #0]
 8001d40:	b2c9      	uxtb	r1, r1
 8001d42:	400a      	ands	r2, r1
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	225a      	movs	r2, #90	; 0x5a
 8001d4c:	5a9b      	ldrh	r3, [r3, r2]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1b9      	bne.n	8001cc8 <HAL_UART_Receive+0xec>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	226a      	movs	r2, #106	; 0x6a
 8001d58:	2120      	movs	r1, #32
 8001d5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2268      	movs	r2, #104	; 0x68
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_UART_Receive+0x18e>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b008      	add	sp, #32
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	000001ff 	.word	0x000001ff

08001d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001d84:	2317      	movs	r3, #23
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2210      	movs	r2, #16
 8001d8a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001d94:	2314      	movs	r3, #20
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	2200      	movs	r2, #0
 8001d9a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d9c:	2313      	movs	r3, #19
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	4995      	ldr	r1, [pc, #596]	; (800201c <UART_SetConfig+0x2a4>)
 8001dc8:	4011      	ands	r1, r2
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	6852      	ldr	r2, [r2, #4]
 8001dda:	4991      	ldr	r1, [pc, #580]	; (8002020 <UART_SetConfig+0x2a8>)
 8001ddc:	4011      	ands	r1, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68d2      	ldr	r2, [r2, #12]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	6892      	ldr	r2, [r2, #8]
 8001dfc:	4989      	ldr	r1, [pc, #548]	; (8002024 <UART_SetConfig+0x2ac>)
 8001dfe:	4011      	ands	r1, r2
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <UART_SetConfig+0x2b0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d00f      	beq.n	8001e32 <UART_SetConfig+0xba>
 8001e12:	d304      	bcc.n	8001e1e <UART_SetConfig+0xa6>
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d011      	beq.n	8001e3c <UART_SetConfig+0xc4>
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d005      	beq.n	8001e28 <UART_SetConfig+0xb0>
 8001e1c:	e013      	b.n	8001e46 <UART_SetConfig+0xce>
 8001e1e:	2317      	movs	r3, #23
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e012      	b.n	8001e4e <UART_SetConfig+0xd6>
 8001e28:	2317      	movs	r3, #23
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e00d      	b.n	8001e4e <UART_SetConfig+0xd6>
 8001e32:	2317      	movs	r3, #23
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2204      	movs	r2, #4
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e008      	b.n	8001e4e <UART_SetConfig+0xd6>
 8001e3c:	2317      	movs	r3, #23
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2208      	movs	r2, #8
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e003      	b.n	8001e4e <UART_SetConfig+0xd6>
 8001e46:	2317      	movs	r3, #23
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69da      	ldr	r2, [r3, #28]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d000      	beq.n	8001e5e <UART_SetConfig+0xe6>
 8001e5c:	e07b      	b.n	8001f56 <UART_SetConfig+0x1de>
  {
    switch (clocksource)
 8001e5e:	2317      	movs	r3, #23
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d01c      	beq.n	8001ea2 <UART_SetConfig+0x12a>
 8001e68:	dc02      	bgt.n	8001e70 <UART_SetConfig+0xf8>
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <UART_SetConfig+0x102>
 8001e6e:	e04f      	b.n	8001f10 <UART_SetConfig+0x198>
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d027      	beq.n	8001ec4 <UART_SetConfig+0x14c>
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d039      	beq.n	8001eec <UART_SetConfig+0x174>
 8001e78:	e04a      	b.n	8001f10 <UART_SetConfig+0x198>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e7a:	f7ff fd73 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	005a      	lsls	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	18d2      	adds	r2, r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	0019      	movs	r1, r3
 8001e90:	0010      	movs	r0, r2
 8001e92:	f7fe f939 	bl	8000108 <__udivsi3>
 8001e96:	0003      	movs	r3, r0
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2314      	movs	r3, #20
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	801a      	strh	r2, [r3, #0]
        break;
 8001ea0:	e03b      	b.n	8001f1a <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	4a60      	ldr	r2, [pc, #384]	; (800202c <UART_SetConfig+0x2b4>)
 8001eaa:	189a      	adds	r2, r3, r2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	0010      	movs	r0, r2
 8001eb4:	f7fe f928 	bl	8000108 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	001a      	movs	r2, r3
 8001ebc:	2314      	movs	r3, #20
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	801a      	strh	r2, [r3, #0]
        break;
 8001ec2:	e02a      	b.n	8001f1a <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ec4:	f7ff fce4 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	005a      	lsls	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	18d2      	adds	r2, r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	0019      	movs	r1, r3
 8001eda:	0010      	movs	r0, r2
 8001edc:	f7fe f914 	bl	8000108 <__udivsi3>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	2314      	movs	r3, #20
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	801a      	strh	r2, [r3, #0]
        break;
 8001eea:	e016      	b.n	8001f1a <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	0252      	lsls	r2, r2, #9
 8001ef6:	189a      	adds	r2, r3, r2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0019      	movs	r1, r3
 8001efe:	0010      	movs	r0, r2
 8001f00:	f7fe f902 	bl	8000108 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	001a      	movs	r2, r3
 8001f08:	2314      	movs	r3, #20
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	801a      	strh	r2, [r3, #0]
        break;
 8001f0e:	e004      	b.n	8001f1a <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001f10:	2313      	movs	r3, #19
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
        break;
 8001f18:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2214      	movs	r2, #20
 8001f20:	18ba      	adds	r2, r7, r2
 8001f22:	8812      	ldrh	r2, [r2, #0]
 8001f24:	210f      	movs	r1, #15
 8001f26:	438a      	bics	r2, r1
 8001f28:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f2a:	2314      	movs	r3, #20
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	105b      	asrs	r3, r3, #1
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2207      	movs	r2, #7
 8001f36:	4013      	ands	r3, r2
 8001f38:	b299      	uxth	r1, r3
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	220a      	movs	r2, #10
 8001f40:	18ba      	adds	r2, r7, r2
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	220a      	movs	r2, #10
 8001f4e:	18ba      	adds	r2, r7, r2
 8001f50:	8812      	ldrh	r2, [r2, #0]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	e05b      	b.n	800200e <UART_SetConfig+0x296>
  }
  else
  {
    switch (clocksource)
 8001f56:	2317      	movs	r3, #23
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d01b      	beq.n	8001f98 <UART_SetConfig+0x220>
 8001f60:	dc02      	bgt.n	8001f68 <UART_SetConfig+0x1f0>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <UART_SetConfig+0x1fa>
 8001f66:	e04d      	b.n	8002004 <UART_SetConfig+0x28c>
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d026      	beq.n	8001fba <UART_SetConfig+0x242>
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d037      	beq.n	8001fe0 <UART_SetConfig+0x268>
 8001f70:	e048      	b.n	8002004 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681c      	ldr	r4, [r3, #0]
 8001f76:	f7ff fcf5 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	18d2      	adds	r2, r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	0019      	movs	r1, r3
 8001f8a:	0010      	movs	r0, r2
 8001f8c:	f7fe f8bc 	bl	8000108 <__udivsi3>
 8001f90:	0003      	movs	r3, r0
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	60e3      	str	r3, [r4, #12]
        break;
 8001f96:	e03a      	b.n	800200e <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681c      	ldr	r4, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <UART_SetConfig+0x2b8>)
 8001fa4:	189a      	adds	r2, r3, r2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	0019      	movs	r1, r3
 8001fac:	0010      	movs	r0, r2
 8001fae:	f7fe f8ab 	bl	8000108 <__udivsi3>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	60e3      	str	r3, [r4, #12]
        break;
 8001fb8:	e029      	b.n	800200e <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681c      	ldr	r4, [r3, #0]
 8001fbe:	f7ff fc67 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	18d2      	adds	r2, r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	0010      	movs	r0, r2
 8001fd4:	f7fe f898 	bl	8000108 <__udivsi3>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	60e3      	str	r3, [r4, #12]
        break;
 8001fde:	e016      	b.n	800200e <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681c      	ldr	r4, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	0212      	lsls	r2, r2, #8
 8001fee:	189a      	adds	r2, r3, r2
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	0010      	movs	r0, r2
 8001ff8:	f7fe f886 	bl	8000108 <__udivsi3>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	60e3      	str	r3, [r4, #12]
        break;
 8002002:	e004      	b.n	800200e <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002004:	2313      	movs	r3, #19
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
        break;
 800200c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 800200e:	2313      	movs	r3, #19
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	781b      	ldrb	r3, [r3, #0]

}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b007      	add	sp, #28
 800201a:	bd90      	pop	{r4, r7, pc}
 800201c:	ffff69f3 	.word	0xffff69f3
 8002020:	ffffcfff 	.word	0xffffcfff
 8002024:	fffff4ff 	.word	0xfffff4ff
 8002028:	40021000 	.word	0x40021000
 800202c:	00f42400 	.word	0x00f42400
 8002030:	007a1200 	.word	0x007a1200

08002034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2201      	movs	r2, #1
 8002042:	4013      	ands	r3, r2
 8002044:	d00a      	beq.n	800205c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	6852      	ldr	r2, [r2, #4]
 8002050:	4945      	ldr	r1, [pc, #276]	; (8002168 <UART_AdvFeatureConfig+0x134>)
 8002052:	4011      	ands	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002058:	430a      	orrs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	2202      	movs	r2, #2
 8002062:	4013      	ands	r3, r2
 8002064:	d00a      	beq.n	800207c <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	6852      	ldr	r2, [r2, #4]
 8002070:	493e      	ldr	r1, [pc, #248]	; (800216c <UART_AdvFeatureConfig+0x138>)
 8002072:	4011      	ands	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	2204      	movs	r2, #4
 8002082:	4013      	ands	r3, r2
 8002084:	d00a      	beq.n	800209c <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	6852      	ldr	r2, [r2, #4]
 8002090:	4937      	ldr	r1, [pc, #220]	; (8002170 <UART_AdvFeatureConfig+0x13c>)
 8002092:	4011      	ands	r1, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002098:	430a      	orrs	r2, r1
 800209a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	2208      	movs	r2, #8
 80020a2:	4013      	ands	r3, r2
 80020a4:	d00a      	beq.n	80020bc <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	6852      	ldr	r2, [r2, #4]
 80020b0:	4930      	ldr	r1, [pc, #192]	; (8002174 <UART_AdvFeatureConfig+0x140>)
 80020b2:	4011      	ands	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2210      	movs	r2, #16
 80020c2:	4013      	ands	r3, r2
 80020c4:	d00a      	beq.n	80020dc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	6892      	ldr	r2, [r2, #8]
 80020d0:	4929      	ldr	r1, [pc, #164]	; (8002178 <UART_AdvFeatureConfig+0x144>)
 80020d2:	4011      	ands	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020d8:	430a      	orrs	r2, r1
 80020da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	2220      	movs	r2, #32
 80020e2:	4013      	ands	r3, r2
 80020e4:	d00a      	beq.n	80020fc <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	6892      	ldr	r2, [r2, #8]
 80020f0:	4922      	ldr	r1, [pc, #136]	; (800217c <UART_AdvFeatureConfig+0x148>)
 80020f2:	4011      	ands	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020f8:	430a      	orrs	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2240      	movs	r2, #64	; 0x40
 8002102:	4013      	ands	r3, r2
 8002104:	d01b      	beq.n	800213e <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	6852      	ldr	r2, [r2, #4]
 8002110:	491b      	ldr	r1, [pc, #108]	; (8002180 <UART_AdvFeatureConfig+0x14c>)
 8002112:	4011      	ands	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	035b      	lsls	r3, r3, #13
 8002124:	429a      	cmp	r2, r3
 8002126:	d10a      	bne.n	800213e <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	6852      	ldr	r2, [r2, #4]
 8002132:	4914      	ldr	r1, [pc, #80]	; (8002184 <UART_AdvFeatureConfig+0x150>)
 8002134:	4011      	ands	r1, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	4013      	ands	r3, r2
 8002146:	d00a      	beq.n	800215e <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	6852      	ldr	r2, [r2, #4]
 8002152:	490d      	ldr	r1, [pc, #52]	; (8002188 <UART_AdvFeatureConfig+0x154>)
 8002154:	4011      	ands	r1, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
  }
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b002      	add	sp, #8
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	fffdffff 	.word	0xfffdffff
 800216c:	fffeffff 	.word	0xfffeffff
 8002170:	fffbffff 	.word	0xfffbffff
 8002174:	ffff7fff 	.word	0xffff7fff
 8002178:	ffffefff 	.word	0xffffefff
 800217c:	ffffdfff 	.word	0xffffdfff
 8002180:	ffefffff 	.word	0xffefffff
 8002184:	ff9fffff 	.word	0xff9fffff
 8002188:	fff7ffff 	.word	0xfff7ffff

0800218c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2269      	movs	r2, #105	; 0x69
 800219e:	2120      	movs	r1, #32
 80021a0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	226a      	movs	r2, #106	; 0x6a
 80021a6:	2120      	movs	r1, #32
 80021a8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2268      	movs	r2, #104	; 0x68
 80021ae:	2100      	movs	r1, #0
 80021b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021cc:	e02b      	b.n	8002226 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	3301      	adds	r3, #1
 80021d2:	d028      	beq.n	8002226 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80021da:	f7fe f85d 	bl	8000298 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	1ad2      	subs	r2, r2, r3
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d91d      	bls.n	8002226 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4916      	ldr	r1, [pc, #88]	; (8002250 <UART_WaitOnFlagUntilTimeout+0x94>)
 80021f6:	400a      	ands	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	6892      	ldr	r2, [r2, #8]
 8002204:	2101      	movs	r1, #1
 8002206:	438a      	bics	r2, r1
 8002208:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2269      	movs	r2, #105	; 0x69
 800220e:	2120      	movs	r1, #32
 8002210:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	226a      	movs	r2, #106	; 0x6a
 8002216:	2120      	movs	r1, #32
 8002218:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2268      	movs	r2, #104	; 0x68
 800221e:	2100      	movs	r1, #0
 8002220:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e00f      	b.n	8002246 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	425a      	negs	r2, r3
 8002236:	4153      	adcs	r3, r2
 8002238:	b2db      	uxtb	r3, r3
 800223a:	001a      	movs	r2, r3
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d0c4      	beq.n	80021ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b004      	add	sp, #16
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	fffffe5f 	.word	0xfffffe5f

08002254 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	0002      	movs	r2, r0
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002260:	230f      	movs	r3, #15
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	1dfa      	adds	r2, r7, #7
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	210f      	movs	r1, #15
 800226a:	438a      	bics	r2, r1
 800226c:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	011a      	lsls	r2, r3, #4
 8002274:	230e      	movs	r3, #14
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800227a:	230f      	movs	r3, #15
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	220c      	movs	r2, #12
 8002282:	4313      	orrs	r3, r2
 8002284:	b2da      	uxtb	r2, r3
 8002286:	2308      	movs	r3, #8
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800228c:	230f      	movs	r3, #15
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2208      	movs	r2, #8
 8002294:	4313      	orrs	r3, r2
 8002296:	b2da      	uxtb	r2, r3
 8002298:	2308      	movs	r3, #8
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800229e:	230e      	movs	r3, #14
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	220c      	movs	r2, #12
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	2308      	movs	r3, #8
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80022b0:	230e      	movs	r3, #14
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2208      	movs	r2, #8
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	2308      	movs	r3, #8
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80022c2:	2308      	movs	r3, #8
 80022c4:	18fa      	adds	r2, r7, r3
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <lcd_send_cmd+0x88>)
 80022c8:	2364      	movs	r3, #100	; 0x64
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2304      	movs	r3, #4
 80022ce:	214e      	movs	r1, #78	; 0x4e
 80022d0:	f7fe fb02 	bl	80008d8 <HAL_I2C_Master_Transmit>
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000438 	.word	0x20000438

080022e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	0002      	movs	r2, r0
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80022ec:	230f      	movs	r3, #15
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	1dfa      	adds	r2, r7, #7
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	210f      	movs	r1, #15
 80022f6:	438a      	bics	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	011a      	lsls	r2, r3, #4
 8002300:	230e      	movs	r3, #14
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002306:	230f      	movs	r3, #15
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	220d      	movs	r2, #13
 800230e:	4313      	orrs	r3, r2
 8002310:	b2da      	uxtb	r2, r3
 8002312:	2308      	movs	r3, #8
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002318:	230f      	movs	r3, #15
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2209      	movs	r2, #9
 8002320:	4313      	orrs	r3, r2
 8002322:	b2da      	uxtb	r2, r3
 8002324:	2308      	movs	r3, #8
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800232a:	230e      	movs	r3, #14
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	220d      	movs	r2, #13
 8002332:	4313      	orrs	r3, r2
 8002334:	b2da      	uxtb	r2, r3
 8002336:	2308      	movs	r3, #8
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800233c:	230e      	movs	r3, #14
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2209      	movs	r2, #9
 8002344:	4313      	orrs	r3, r2
 8002346:	b2da      	uxtb	r2, r3
 8002348:	2308      	movs	r3, #8
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800234e:	2308      	movs	r3, #8
 8002350:	18fa      	adds	r2, r7, r3
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <lcd_send_data+0x88>)
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2304      	movs	r3, #4
 800235a:	214e      	movs	r1, #78	; 0x4e
 800235c:	f7fe fabc 	bl	80008d8 <HAL_I2C_Master_Transmit>
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000438 	.word	0x20000438

0800236c <lcd_init>:

void lcd_init (void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8002370:	2002      	movs	r0, #2
 8002372:	f7ff ff6f 	bl	8002254 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8002376:	2028      	movs	r0, #40	; 0x28
 8002378:	f7ff ff6c 	bl	8002254 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800237c:	200c      	movs	r0, #12
 800237e:	f7ff ff69 	bl	8002254 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8002382:	2080      	movs	r0, #128	; 0x80
 8002384:	f7ff ff66 	bl	8002254 <lcd_send_cmd>
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002396:	e006      	b.n	80023a6 <lcd_send_string+0x18>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff ff9d 	bl	80022e0 <lcd_send_data>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f4      	bne.n	8002398 <lcd_send_string+0xa>
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <msg>:
void MX_I2C1_Init(void);
void MX_USART1_UART_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void msg(int uhu) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	int cont = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
	if(uhu == '1'){
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b31      	cmp	r3, #49	; 0x31
 80023c8:	d139      	bne.n	800243e <msg+0x86>
		while(cont !=10){
 80023ca:	e035      	b.n	8002438 <msg+0x80>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80023cc:	2390      	movs	r3, #144	; 0x90
 80023ce:	05db      	lsls	r3, r3, #23
 80023d0:	2101      	movs	r1, #1
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7fe f9d7 	bl	8000786 <HAL_GPIO_TogglePin>
			 lcd_init ();
 80023d8:	f7ff ffc8 	bl	800236c <lcd_init>
			 check = SSD1306_Init ();
 80023dc:	f000 fa38 	bl	8002850 <SSD1306_Init>
 80023e0:	0003      	movs	r3, r0
 80023e2:	001a      	movs	r2, r3
 80023e4:	4b57      	ldr	r3, [pc, #348]	; (8002544 <msg+0x18c>)
 80023e6:	701a      	strb	r2, [r3, #0]
			 SSD1306_Fill (0);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f000 fb25 	bl	8002a38 <SSD1306_Fill>
			 SSD1306_UpdateScreen(); //display
 80023ee:	f000 faef 	bl	80029d0 <SSD1306_UpdateScreen>
			 SSD1306_GotoXY (10,10);
 80023f2:	210a      	movs	r1, #10
 80023f4:	200a      	movs	r0, #10
 80023f6:	f000 fba7 	bl	8002b48 <SSD1306_GotoXY>
			 SSD1306_Puts ("JOHN", &Font_11x18, 1);
 80023fa:	4953      	ldr	r1, [pc, #332]	; (8002548 <msg+0x190>)
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <msg+0x194>)
 80023fe:	2201      	movs	r2, #1
 8002400:	0018      	movs	r0, r3
 8002402:	f000 fc3b 	bl	8002c7c <SSD1306_Puts>
			 SSD1306_GotoXY (10, 30);
 8002406:	211e      	movs	r1, #30
 8002408:	200a      	movs	r0, #10
 800240a:	f000 fb9d 	bl	8002b48 <SSD1306_GotoXY>
			 SSD1306_Puts ("LIGANDO", &Font_11x18, 1);
 800240e:	494e      	ldr	r1, [pc, #312]	; (8002548 <msg+0x190>)
 8002410:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <msg+0x198>)
 8002412:	2201      	movs	r2, #1
 8002414:	0018      	movs	r0, r3
 8002416:	f000 fc31 	bl	8002c7c <SSD1306_Puts>
			 SSD1306_UpdateScreen(); //display
 800241a:	f000 fad9 	bl	80029d0 <SSD1306_UpdateScreen>
			 HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
 800241e:	484d      	ldr	r0, [pc, #308]	; (8002554 <msg+0x19c>)
 8002420:	2364      	movs	r3, #100	; 0x64
 8002422:	220a      	movs	r2, #10
 8002424:	214e      	movs	r1, #78	; 0x4e
 8002426:	f7fe fb6b 	bl	8000b00 <HAL_I2C_IsDeviceReady>
			 	  lcd_send_string ("");
 800242a:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <msg+0x1a0>)
 800242c:	0018      	movs	r0, r3
 800242e:	f7ff ffae 	bl	800238e <lcd_send_string>
			 cont ++;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3301      	adds	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
		while(cont !=10){
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b0a      	cmp	r3, #10
 800243c:	d1c6      	bne.n	80023cc <msg+0x14>
		}
//		airtin[0] = '0';
	}

	if(uhu == '2'){
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b32      	cmp	r3, #50	; 0x32
 8002442:	d139      	bne.n	80024b8 <msg+0x100>
		while(cont !=10){
 8002444:	e035      	b.n	80024b2 <msg+0xfa>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8002446:	2390      	movs	r3, #144	; 0x90
 8002448:	05db      	lsls	r3, r3, #23
 800244a:	2101      	movs	r1, #1
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe f99a 	bl	8000786 <HAL_GPIO_TogglePin>
			lcd_init ();
 8002452:	f7ff ff8b 	bl	800236c <lcd_init>
			check = SSD1306_Init ();
 8002456:	f000 f9fb 	bl	8002850 <SSD1306_Init>
 800245a:	0003      	movs	r3, r0
 800245c:	001a      	movs	r2, r3
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <msg+0x18c>)
 8002460:	701a      	strb	r2, [r3, #0]
			SSD1306_Fill (0);
 8002462:	2000      	movs	r0, #0
 8002464:	f000 fae8 	bl	8002a38 <SSD1306_Fill>
			SSD1306_UpdateScreen(); //display
 8002468:	f000 fab2 	bl	80029d0 <SSD1306_UpdateScreen>
			SSD1306_GotoXY (10,10);
 800246c:	210a      	movs	r1, #10
 800246e:	200a      	movs	r0, #10
 8002470:	f000 fb6a 	bl	8002b48 <SSD1306_GotoXY>
			SSD1306_Puts ("MARIA", &Font_11x18, 1);
 8002474:	4934      	ldr	r1, [pc, #208]	; (8002548 <msg+0x190>)
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <msg+0x1a4>)
 8002478:	2201      	movs	r2, #1
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fbfe 	bl	8002c7c <SSD1306_Puts>
			SSD1306_GotoXY (10, 30);
 8002480:	211e      	movs	r1, #30
 8002482:	200a      	movs	r0, #10
 8002484:	f000 fb60 	bl	8002b48 <SSD1306_GotoXY>
			SSD1306_Puts ("LIGANDO", &Font_11x18, 1);
 8002488:	492f      	ldr	r1, [pc, #188]	; (8002548 <msg+0x190>)
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <msg+0x198>)
 800248c:	2201      	movs	r2, #1
 800248e:	0018      	movs	r0, r3
 8002490:	f000 fbf4 	bl	8002c7c <SSD1306_Puts>
			SSD1306_UpdateScreen(); //display
 8002494:	f000 fa9c 	bl	80029d0 <SSD1306_UpdateScreen>
			HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
 8002498:	482e      	ldr	r0, [pc, #184]	; (8002554 <msg+0x19c>)
 800249a:	2364      	movs	r3, #100	; 0x64
 800249c:	220a      	movs	r2, #10
 800249e:	214e      	movs	r1, #78	; 0x4e
 80024a0:	f7fe fb2e 	bl	8000b00 <HAL_I2C_IsDeviceReady>
			lcd_send_string ("");
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <msg+0x1a0>)
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff ff71 	bl	800238e <lcd_send_string>
			cont ++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
		while(cont !=10){
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b0a      	cmp	r3, #10
 80024b6:	d1c6      	bne.n	8002446 <msg+0x8e>
		}
//		airtin[0] = '0';
	}
	if(uhu != '1' | uhu != '2'){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b31      	subs	r3, #49	; 0x31
 80024bc:	1e5a      	subs	r2, r3, #1
 80024be:	4193      	sbcs	r3, r2
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3b32      	subs	r3, #50	; 0x32
 80024c6:	1e59      	subs	r1, r3, #1
 80024c8:	418b      	sbcs	r3, r1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d033      	beq.n	800253c <msg+0x184>
		while(cont <10){
 80024d4:	e02f      	b.n	8002536 <msg+0x17e>
				lcd_init ();
 80024d6:	f7ff ff49 	bl	800236c <lcd_init>
				check = SSD1306_Init ();
 80024da:	f000 f9b9 	bl	8002850 <SSD1306_Init>
 80024de:	0003      	movs	r3, r0
 80024e0:	001a      	movs	r2, r3
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <msg+0x18c>)
 80024e4:	701a      	strb	r2, [r3, #0]
				SSD1306_Fill (0);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 faa6 	bl	8002a38 <SSD1306_Fill>
				SSD1306_UpdateScreen(); //display
 80024ec:	f000 fa70 	bl	80029d0 <SSD1306_UpdateScreen>
				SSD1306_GotoXY (10,10);
 80024f0:	210a      	movs	r1, #10
 80024f2:	200a      	movs	r0, #10
 80024f4:	f000 fb28 	bl	8002b48 <SSD1306_GotoXY>
				SSD1306_Puts ("", &Font_11x18, 1);
 80024f8:	4913      	ldr	r1, [pc, #76]	; (8002548 <msg+0x190>)
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <msg+0x1a0>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fbbc 	bl	8002c7c <SSD1306_Puts>
				SSD1306_GotoXY (10, 30);
 8002504:	211e      	movs	r1, #30
 8002506:	200a      	movs	r0, #10
 8002508:	f000 fb1e 	bl	8002b48 <SSD1306_GotoXY>
				SSD1306_Puts ("", &Font_11x18, 1);
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <msg+0x190>)
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <msg+0x1a0>)
 8002510:	2201      	movs	r2, #1
 8002512:	0018      	movs	r0, r3
 8002514:	f000 fbb2 	bl	8002c7c <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8002518:	f000 fa5a 	bl	80029d0 <SSD1306_UpdateScreen>
				HAL_I2C_IsDeviceReady (&hi2c1, 0x4E, 10, 100);
 800251c:	480d      	ldr	r0, [pc, #52]	; (8002554 <msg+0x19c>)
 800251e:	2364      	movs	r3, #100	; 0x64
 8002520:	220a      	movs	r2, #10
 8002522:	214e      	movs	r1, #78	; 0x4e
 8002524:	f7fe faec 	bl	8000b00 <HAL_I2C_IsDeviceReady>
				lcd_send_string ("");
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <msg+0x1a0>)
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff ff2f 	bl	800238e <lcd_send_string>
				cont ++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3301      	adds	r3, #1
 8002534:	60fb      	str	r3, [r7, #12]
		while(cont <10){
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b09      	cmp	r3, #9
 800253a:	ddcc      	ble.n	80024d6 <msg+0x11e>
			}
//		airtin[0] = '1';
	}
}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000484 	.word	0x20000484
 8002548:	20000000 	.word	0x20000000
 800254c:	08003164 	.word	0x08003164
 8002550:	0800316c 	.word	0x0800316c
 8002554:	20000438 	.word	0x20000438
 8002558:	08003174 	.word	0x08003174
 800255c:	08003178 	.word	0x08003178

08002560 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002564:	f7fd fe5c 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002568:	f000 f844 	bl	80025f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800256c:	f000 f938 	bl	80027e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002570:	f000 f8ac 	bl	80026cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002574:	f000 f8fc 	bl	8002770 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	  	lcd_init ();
 8002578:	f7ff fef8 	bl	800236c <lcd_init>
  	  	check = SSD1306_Init ();
 800257c:	f000 f968 	bl	8002850 <SSD1306_Init>
 8002580:	0003      	movs	r3, r0
 8002582:	001a      	movs	r2, r3
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <main+0x7c>)
 8002586:	701a      	strb	r2, [r3, #0]
  	  	SSD1306_Fill (0);
 8002588:	2000      	movs	r0, #0
 800258a:	f000 fa55 	bl	8002a38 <SSD1306_Fill>
    	SSD1306_UpdateScreen(); //display
 800258e:	f000 fa1f 	bl	80029d0 <SSD1306_UpdateScreen>
    	SSD1306_GotoXY (10,10);
 8002592:	210a      	movs	r1, #10
 8002594:	200a      	movs	r0, #10
 8002596:	f000 fad7 	bl	8002b48 <SSD1306_GotoXY>
    	SSD1306_Puts ("EM", &Font_11x18, 1);
 800259a:	4911      	ldr	r1, [pc, #68]	; (80025e0 <main+0x80>)
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <main+0x84>)
 800259e:	2201      	movs	r2, #1
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 fb6b 	bl	8002c7c <SSD1306_Puts>
    	SSD1306_GotoXY (10, 30);
 80025a6:	211e      	movs	r1, #30
 80025a8:	200a      	movs	r0, #10
 80025aa:	f000 facd 	bl	8002b48 <SSD1306_GotoXY>
    	SSD1306_Puts ("ESPERA...", &Font_11x18, 1);
 80025ae:	490c      	ldr	r1, [pc, #48]	; (80025e0 <main+0x80>)
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <main+0x88>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 fb61 	bl	8002c7c <SSD1306_Puts>
    	SSD1306_UpdateScreen(); //display
 80025ba:	f000 fa09 	bl	80029d0 <SSD1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart1,(uint8_t*)airtin, 2,100);
 80025be:	490b      	ldr	r1, [pc, #44]	; (80025ec <main+0x8c>)
 80025c0:	480b      	ldr	r0, [pc, #44]	; (80025f0 <main+0x90>)
 80025c2:	2364      	movs	r3, #100	; 0x64
 80025c4:	2202      	movs	r2, #2
 80025c6:	f7ff fb09 	bl	8001bdc <HAL_UART_Receive>

	  msg(airtin[0]);
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <main+0x8c>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7ff fef2 	bl	80023b8 <msg>
//	  HAL_Delay(5000);
	  airtin[0] = '0';
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <main+0x8c>)
 80025d6:	2230      	movs	r2, #48	; 0x30
 80025d8:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart1,(uint8_t*)airtin, 2,100);
 80025da:	e7f0      	b.n	80025be <main+0x5e>
 80025dc:	20000484 	.word	0x20000484
 80025e0:	20000000 	.word	0x20000000
 80025e4:	08003180 	.word	0x08003180
 80025e8:	08003184 	.word	0x08003184
 80025ec:	20000008 	.word	0x20000008
 80025f0:	20000488 	.word	0x20000488

080025f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b094      	sub	sp, #80	; 0x50
 80025f8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025fa:	2320      	movs	r3, #32
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2202      	movs	r2, #2
 8002600:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002602:	2320      	movs	r3, #32
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2201      	movs	r2, #1
 8002608:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800260a:	2320      	movs	r3, #32
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	2210      	movs	r2, #16
 8002610:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002612:	2320      	movs	r3, #32
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800261a:	2320      	movs	r3, #32
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	0018      	movs	r0, r3
 8002620:	f7fe fd5c 	bl	80010dc <HAL_RCC_OscConfig>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d004      	beq.n	8002632 <SystemClock_Config+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <SystemClock_Config+0xd4>)
 800262a:	21dd      	movs	r1, #221	; 0xdd
 800262c:	0018      	movs	r0, r3
 800262e:	f000 f909 	bl	8002844 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002632:	2310      	movs	r3, #16
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2207      	movs	r2, #7
 8002638:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800263a:	2310      	movs	r3, #16
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2200      	movs	r2, #0
 8002640:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002642:	2310      	movs	r3, #16
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800264a:	2310      	movs	r3, #16
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002652:	2310      	movs	r3, #16
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2100      	movs	r1, #0
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff f833 	bl	80016c4 <HAL_RCC_ClockConfig>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d004      	beq.n	800266c <SystemClock_Config+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <SystemClock_Config+0xd4>)
 8002664:	21ea      	movs	r1, #234	; 0xea
 8002666:	0018      	movs	r0, r3
 8002668:	f000 f8ec 	bl	8002844 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800266c:	003b      	movs	r3, r7
 800266e:	2221      	movs	r2, #33	; 0x21
 8002670:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002672:	003b      	movs	r3, r7
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002678:	003b      	movs	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267e:	003b      	movs	r3, r7
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff f985 	bl	8001990 <HAL_RCCEx_PeriphCLKConfig>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d004      	beq.n	8002694 <SystemClock_Config+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <SystemClock_Config+0xd4>)
 800268c:	21f2      	movs	r1, #242	; 0xf2
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f8d8 	bl	8002844 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002694:	f7ff f95c 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8002698:	0002      	movs	r2, r0
 800269a:	23fa      	movs	r3, #250	; 0xfa
 800269c:	0099      	lsls	r1, r3, #2
 800269e:	0010      	movs	r0, r2
 80026a0:	f7fd fd32 	bl	8000108 <__udivsi3>
 80026a4:	0003      	movs	r3, r0
 80026a6:	0018      	movs	r0, r3
 80026a8:	f7fd fea8 	bl	80003fc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026ac:	2004      	movs	r0, #4
 80026ae:	f7fd feb3 	bl	8000418 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026b2:	2301      	movs	r3, #1
 80026b4:	425b      	negs	r3, r3
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7fd fe88 	bl	80003d0 <HAL_NVIC_SetPriority>
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b014      	add	sp, #80	; 0x50
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	08003190 	.word	0x08003190

080026cc <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80026d0:	4b23      	ldr	r3, [pc, #140]	; (8002760 <MX_I2C1_Init+0x94>)
 80026d2:	4a24      	ldr	r2, [pc, #144]	; (8002764 <MX_I2C1_Init+0x98>)
 80026d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <MX_I2C1_Init+0x94>)
 80026d8:	4a23      	ldr	r2, [pc, #140]	; (8002768 <MX_I2C1_Init+0x9c>)
 80026da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026dc:	4b20      	ldr	r3, [pc, #128]	; (8002760 <MX_I2C1_Init+0x94>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <MX_I2C1_Init+0x94>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e8:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <MX_I2C1_Init+0x94>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <MX_I2C1_Init+0x94>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MX_I2C1_Init+0x94>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <MX_I2C1_Init+0x94>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <MX_I2C1_Init+0x94>)
 8002702:	2200      	movs	r2, #0
 8002704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <MX_I2C1_Init+0x94>)
 8002708:	0018      	movs	r0, r3
 800270a:	f7fe f84f 	bl	80007ac <HAL_I2C_Init>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d006      	beq.n	8002720 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002712:	2388      	movs	r3, #136	; 0x88
 8002714:	005a      	lsls	r2, r3, #1
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <MX_I2C1_Init+0xa0>)
 8002718:	0011      	movs	r1, r2
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f892 	bl	8002844 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_I2C1_Init+0x94>)
 8002722:	2100      	movs	r1, #0
 8002724:	0018      	movs	r0, r3
 8002726:	f7fe fc3f 	bl	8000fa8 <HAL_I2CEx_ConfigAnalogFilter>
 800272a:	1e03      	subs	r3, r0, #0
 800272c:	d007      	beq.n	800273e <MX_I2C1_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 800272e:	2318      	movs	r3, #24
 8002730:	33ff      	adds	r3, #255	; 0xff
 8002732:	001a      	movs	r2, r3
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <MX_I2C1_Init+0xa0>)
 8002736:	0011      	movs	r1, r2
 8002738:	0018      	movs	r0, r3
 800273a:	f000 f883 	bl	8002844 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_I2C1_Init+0x94>)
 8002740:	2100      	movs	r1, #0
 8002742:	0018      	movs	r0, r3
 8002744:	f7fe fc7c 	bl	8001040 <HAL_I2CEx_ConfigDigitalFilter>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d006      	beq.n	800275a <MX_I2C1_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800274c:	238f      	movs	r3, #143	; 0x8f
 800274e:	005a      	lsls	r2, r3, #1
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <MX_I2C1_Init+0xa0>)
 8002752:	0011      	movs	r1, r2
 8002754:	0018      	movs	r0, r3
 8002756:	f000 f875 	bl	8002844 <_Error_Handler>
  }

}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000438 	.word	0x20000438
 8002764:	40005400 	.word	0x40005400
 8002768:	0000020b 	.word	0x0000020b
 800276c:	08003190 	.word	0x08003190

08002770 <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <MX_USART1_UART_Init+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 800277c:	2296      	movs	r2, #150	; 0x96
 800277e:	0192      	lsls	r2, r2, #6
 8002780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 8002796:	220c      	movs	r2, #12
 8002798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <MX_USART1_UART_Init+0x64>)
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff f9b9 	bl	8001b2c <HAL_UART_Init>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d007      	beq.n	80027ce <MX_USART1_UART_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80027be:	2334      	movs	r3, #52	; 0x34
 80027c0:	33ff      	adds	r3, #255	; 0xff
 80027c2:	001a      	movs	r2, r3
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <MX_USART1_UART_Init+0x6c>)
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 f83b 	bl	8002844 <_Error_Handler>
  }

}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000488 	.word	0x20000488
 80027d8:	40013800 	.word	0x40013800
 80027dc:	08003190 	.word	0x08003190

080027e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <MX_GPIO_Init+0x60>)
 80027e8:	4a15      	ldr	r2, [pc, #84]	; (8002840 <MX_GPIO_Init+0x60>)
 80027ea:	6952      	ldr	r2, [r2, #20]
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	0289      	lsls	r1, r1, #10
 80027f0:	430a      	orrs	r2, r1
 80027f2:	615a      	str	r2, [r3, #20]
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <MX_GPIO_Init+0x60>)
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	4013      	ands	r3, r2
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8002802:	2390      	movs	r3, #144	; 0x90
 8002804:	05db      	lsls	r3, r3, #23
 8002806:	2200      	movs	r2, #0
 8002808:	2101      	movs	r1, #1
 800280a:	0018      	movs	r0, r3
 800280c:	f7fd ff9e 	bl	800074c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	2201      	movs	r2, #1
 800281a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2200      	movs	r2, #0
 8002826:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	1d3a      	adds	r2, r7, #4
 800282a:	2390      	movs	r3, #144	; 0x90
 800282c:	05db      	lsls	r3, r3, #23
 800282e:	0011      	movs	r1, r2
 8002830:	0018      	movs	r0, r3
 8002832:	f7fd fe17 	bl	8000464 <HAL_GPIO_Init>

}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b006      	add	sp, #24
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	40021000 	.word	0x40021000

08002844 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800284e:	e7fe      	b.n	800284e <_Error_Handler+0xa>

08002850 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002856:	f000 fa37 	bl	8002cc8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800285a:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <SSD1306_Init+0x170>)
 800285c:	4859      	ldr	r0, [pc, #356]	; (80029c4 <SSD1306_Init+0x174>)
 800285e:	2201      	movs	r2, #1
 8002860:	2178      	movs	r1, #120	; 0x78
 8002862:	f7fe f94d 	bl	8000b00 <HAL_I2C_IsDeviceReady>
 8002866:	1e03      	subs	r3, r0, #0
 8002868:	d001      	beq.n	800286e <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 800286a:	2300      	movs	r3, #0
 800286c:	e0a3      	b.n	80029b6 <SSD1306_Init+0x166>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800286e:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <SSD1306_Init+0x178>)
 8002870:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002872:	e002      	b.n	800287a <SSD1306_Init+0x2a>
		p--;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	607b      	str	r3, [r7, #4]
	while(p>0)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f9      	bne.n	8002874 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002880:	22ae      	movs	r2, #174	; 0xae
 8002882:	2100      	movs	r1, #0
 8002884:	2078      	movs	r0, #120	; 0x78
 8002886:	f000 fac1 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800288a:	2220      	movs	r2, #32
 800288c:	2100      	movs	r1, #0
 800288e:	2078      	movs	r0, #120	; 0x78
 8002890:	f000 fabc 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002894:	2210      	movs	r2, #16
 8002896:	2100      	movs	r1, #0
 8002898:	2078      	movs	r0, #120	; 0x78
 800289a:	f000 fab7 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800289e:	22b0      	movs	r2, #176	; 0xb0
 80028a0:	2100      	movs	r1, #0
 80028a2:	2078      	movs	r0, #120	; 0x78
 80028a4:	f000 fab2 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80028a8:	22c8      	movs	r2, #200	; 0xc8
 80028aa:	2100      	movs	r1, #0
 80028ac:	2078      	movs	r0, #120	; 0x78
 80028ae:	f000 faad 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2078      	movs	r0, #120	; 0x78
 80028b8:	f000 faa8 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80028bc:	2210      	movs	r2, #16
 80028be:	2100      	movs	r1, #0
 80028c0:	2078      	movs	r0, #120	; 0x78
 80028c2:	f000 faa3 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80028c6:	2240      	movs	r2, #64	; 0x40
 80028c8:	2100      	movs	r1, #0
 80028ca:	2078      	movs	r0, #120	; 0x78
 80028cc:	f000 fa9e 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80028d0:	2281      	movs	r2, #129	; 0x81
 80028d2:	2100      	movs	r1, #0
 80028d4:	2078      	movs	r0, #120	; 0x78
 80028d6:	f000 fa99 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80028da:	22ff      	movs	r2, #255	; 0xff
 80028dc:	2100      	movs	r1, #0
 80028de:	2078      	movs	r0, #120	; 0x78
 80028e0:	f000 fa94 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80028e4:	22a1      	movs	r2, #161	; 0xa1
 80028e6:	2100      	movs	r1, #0
 80028e8:	2078      	movs	r0, #120	; 0x78
 80028ea:	f000 fa8f 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80028ee:	22a6      	movs	r2, #166	; 0xa6
 80028f0:	2100      	movs	r1, #0
 80028f2:	2078      	movs	r0, #120	; 0x78
 80028f4:	f000 fa8a 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80028f8:	22a8      	movs	r2, #168	; 0xa8
 80028fa:	2100      	movs	r1, #0
 80028fc:	2078      	movs	r0, #120	; 0x78
 80028fe:	f000 fa85 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002902:	223f      	movs	r2, #63	; 0x3f
 8002904:	2100      	movs	r1, #0
 8002906:	2078      	movs	r0, #120	; 0x78
 8002908:	f000 fa80 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800290c:	22a4      	movs	r2, #164	; 0xa4
 800290e:	2100      	movs	r1, #0
 8002910:	2078      	movs	r0, #120	; 0x78
 8002912:	f000 fa7b 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002916:	22d3      	movs	r2, #211	; 0xd3
 8002918:	2100      	movs	r1, #0
 800291a:	2078      	movs	r0, #120	; 0x78
 800291c:	f000 fa76 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002920:	2200      	movs	r2, #0
 8002922:	2100      	movs	r1, #0
 8002924:	2078      	movs	r0, #120	; 0x78
 8002926:	f000 fa71 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800292a:	22d5      	movs	r2, #213	; 0xd5
 800292c:	2100      	movs	r1, #0
 800292e:	2078      	movs	r0, #120	; 0x78
 8002930:	f000 fa6c 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002934:	22f0      	movs	r2, #240	; 0xf0
 8002936:	2100      	movs	r1, #0
 8002938:	2078      	movs	r0, #120	; 0x78
 800293a:	f000 fa67 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800293e:	22d9      	movs	r2, #217	; 0xd9
 8002940:	2100      	movs	r1, #0
 8002942:	2078      	movs	r0, #120	; 0x78
 8002944:	f000 fa62 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002948:	2222      	movs	r2, #34	; 0x22
 800294a:	2100      	movs	r1, #0
 800294c:	2078      	movs	r0, #120	; 0x78
 800294e:	f000 fa5d 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002952:	22da      	movs	r2, #218	; 0xda
 8002954:	2100      	movs	r1, #0
 8002956:	2078      	movs	r0, #120	; 0x78
 8002958:	f000 fa58 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800295c:	2212      	movs	r2, #18
 800295e:	2100      	movs	r1, #0
 8002960:	2078      	movs	r0, #120	; 0x78
 8002962:	f000 fa53 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002966:	22db      	movs	r2, #219	; 0xdb
 8002968:	2100      	movs	r1, #0
 800296a:	2078      	movs	r0, #120	; 0x78
 800296c:	f000 fa4e 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002970:	2220      	movs	r2, #32
 8002972:	2100      	movs	r1, #0
 8002974:	2078      	movs	r0, #120	; 0x78
 8002976:	f000 fa49 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800297a:	228d      	movs	r2, #141	; 0x8d
 800297c:	2100      	movs	r1, #0
 800297e:	2078      	movs	r0, #120	; 0x78
 8002980:	f000 fa44 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002984:	2214      	movs	r2, #20
 8002986:	2100      	movs	r1, #0
 8002988:	2078      	movs	r0, #120	; 0x78
 800298a:	f000 fa3f 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800298e:	22af      	movs	r2, #175	; 0xaf
 8002990:	2100      	movs	r1, #0
 8002992:	2078      	movs	r0, #120	; 0x78
 8002994:	f000 fa3a 	bl	8002e0c <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002998:	2000      	movs	r0, #0
 800299a:	f000 f84d 	bl	8002a38 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800299e:	f000 f817 	bl	80029d0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <SSD1306_Init+0x17c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <SSD1306_Init+0x17c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <SSD1306_Init+0x17c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b002      	add	sp, #8
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	00004e20 	.word	0x00004e20
 80029c4:	20000438 	.word	0x20000438
 80029c8:	000009c4 	.word	0x000009c4
 80029cc:	2000042c 	.word	0x2000042c

080029d0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e021      	b.n	8002a22 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	3b50      	subs	r3, #80	; 0x50
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	001a      	movs	r2, r3
 80029e8:	2100      	movs	r1, #0
 80029ea:	2078      	movs	r0, #120	; 0x78
 80029ec:	f000 fa0e 	bl	8002e0c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	2078      	movs	r0, #120	; 0x78
 80029f6:	f000 fa09 	bl	8002e0c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80029fa:	2210      	movs	r2, #16
 80029fc:	2100      	movs	r1, #0
 80029fe:	2078      	movs	r0, #120	; 0x78
 8002a00:	f000 fa04 	bl	8002e0c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	01da      	lsls	r2, r3, #7
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <SSD1306_UpdateScreen+0x64>)
 8002a0c:	18d2      	adds	r2, r2, r3
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	2140      	movs	r1, #64	; 0x40
 8002a12:	2078      	movs	r0, #120	; 0x78
 8002a14:	f000 f96a 	bl	8002cec <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781a      	ldrb	r2, [r3, #0]
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	3201      	adds	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b07      	cmp	r3, #7
 8002a28:	d9d9      	bls.n	80029de <SSD1306_UpdateScreen+0xe>
	}
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b002      	add	sp, #8
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	2000002c 	.word	0x2000002c

08002a38 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	0002      	movs	r2, r0
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <SSD1306_Fill+0x18>
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	e000      	b.n	8002a52 <SSD1306_Fill+0x1a>
 8002a50:	21ff      	movs	r1, #255	; 0xff
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	00da      	lsls	r2, r3, #3
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SSD1306_Fill+0x30>)
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f000 fb5f 	bl	800311c <memset>
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b002      	add	sp, #8
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	2000002c 	.word	0x2000002c

08002a6c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	0004      	movs	r4, r0
 8002a74:	0008      	movs	r0, r1
 8002a76:	0011      	movs	r1, r2
 8002a78:	1dbb      	adds	r3, r7, #6
 8002a7a:	1c22      	adds	r2, r4, #0
 8002a7c:	801a      	strh	r2, [r3, #0]
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	1c02      	adds	r2, r0, #0
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	1cfb      	adds	r3, r7, #3
 8002a86:	1c0a      	adds	r2, r1, #0
 8002a88:	701a      	strb	r2, [r3, #0]
	if (
 8002a8a:	1dbb      	adds	r3, r7, #6
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a90:	d852      	bhi.n	8002b38 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	2b3f      	cmp	r3, #63	; 0x3f
 8002a98:	d84e      	bhi.n	8002b38 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002a9a:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <SSD1306_DrawPixel+0xd4>)
 8002a9c:	791b      	ldrb	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8002aa2:	1cfb      	adds	r3, r7, #3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	425a      	negs	r2, r3
 8002aa8:	4153      	adcs	r3, r2
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	1cfb      	adds	r3, r7, #3
 8002aae:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002ab0:	1cfb      	adds	r3, r7, #3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d11e      	bne.n	8002af6 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ab8:	1dbb      	adds	r3, r7, #6
 8002aba:	881a      	ldrh	r2, [r3, #0]
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	08db      	lsrs	r3, r3, #3
 8002ac2:	b298      	uxth	r0, r3
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	01db      	lsls	r3, r3, #7
 8002ac8:	18d3      	adds	r3, r2, r3
 8002aca:	1dba      	adds	r2, r7, #6
 8002acc:	8811      	ldrh	r1, [r2, #0]
 8002ace:	0002      	movs	r2, r0
 8002ad0:	01d2      	lsls	r2, r2, #7
 8002ad2:	188a      	adds	r2, r1, r2
 8002ad4:	491b      	ldr	r1, [pc, #108]	; (8002b44 <SSD1306_DrawPixel+0xd8>)
 8002ad6:	5c8a      	ldrb	r2, [r1, r2]
 8002ad8:	b251      	sxtb	r1, r2
 8002ada:	1d3a      	adds	r2, r7, #4
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	2007      	movs	r0, #7
 8002ae0:	4002      	ands	r2, r0
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	4090      	lsls	r0, r2
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	b252      	sxtb	r2, r2
 8002aea:	430a      	orrs	r2, r1
 8002aec:	b252      	sxtb	r2, r2
 8002aee:	b2d1      	uxtb	r1, r2
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <SSD1306_DrawPixel+0xd8>)
 8002af2:	54d1      	strb	r1, [r2, r3]
 8002af4:	e021      	b.n	8002b3a <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002af6:	1dbb      	adds	r3, r7, #6
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	08db      	lsrs	r3, r3, #3
 8002b00:	b298      	uxth	r0, r3
 8002b02:	0003      	movs	r3, r0
 8002b04:	01db      	lsls	r3, r3, #7
 8002b06:	18d3      	adds	r3, r2, r3
 8002b08:	1dba      	adds	r2, r7, #6
 8002b0a:	8811      	ldrh	r1, [r2, #0]
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	01d2      	lsls	r2, r2, #7
 8002b10:	188a      	adds	r2, r1, r2
 8002b12:	490c      	ldr	r1, [pc, #48]	; (8002b44 <SSD1306_DrawPixel+0xd8>)
 8002b14:	5c8a      	ldrb	r2, [r1, r2]
 8002b16:	b252      	sxtb	r2, r2
 8002b18:	1d39      	adds	r1, r7, #4
 8002b1a:	8809      	ldrh	r1, [r1, #0]
 8002b1c:	2007      	movs	r0, #7
 8002b1e:	4001      	ands	r1, r0
 8002b20:	2001      	movs	r0, #1
 8002b22:	4088      	lsls	r0, r1
 8002b24:	0001      	movs	r1, r0
 8002b26:	b249      	sxtb	r1, r1
 8002b28:	43c9      	mvns	r1, r1
 8002b2a:	b249      	sxtb	r1, r1
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	b252      	sxtb	r2, r2
 8002b30:	b2d1      	uxtb	r1, r2
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <SSD1306_DrawPixel+0xd8>)
 8002b34:	54d1      	strb	r1, [r2, r3]
 8002b36:	e000      	b.n	8002b3a <SSD1306_DrawPixel+0xce>
		return;
 8002b38:	46c0      	nop			; (mov r8, r8)
	}
}
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b003      	add	sp, #12
 8002b3e:	bd90      	pop	{r4, r7, pc}
 8002b40:	2000042c 	.word	0x2000042c
 8002b44:	2000002c 	.word	0x2000002c

08002b48 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	0002      	movs	r2, r0
 8002b50:	1dbb      	adds	r3, r7, #6
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	1c0a      	adds	r2, r1, #0
 8002b58:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <SSD1306_GotoXY+0x2c>)
 8002b5c:	1dba      	adds	r2, r7, #6
 8002b5e:	8812      	ldrh	r2, [r2, #0]
 8002b60:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <SSD1306_GotoXY+0x2c>)
 8002b64:	1d3a      	adds	r2, r7, #4
 8002b66:	8812      	ldrh	r2, [r2, #0]
 8002b68:	805a      	strh	r2, [r3, #2]
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	2000042c 	.word	0x2000042c

08002b78 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6039      	str	r1, [r7, #0]
 8002b80:	0011      	movs	r1, r2
 8002b82:	1dfb      	adds	r3, r7, #7
 8002b84:	1c02      	adds	r2, r0, #0
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	1dbb      	adds	r3, r7, #6
 8002b8a:	1c0a      	adds	r2, r1, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	; (8002c78 <SSD1306_Putc+0x100>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	001a      	movs	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	18d3      	adds	r3, r2, r3
	if (
 8002b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b9c:	dc07      	bgt.n	8002bae <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <SSD1306_Putc+0x100>)
 8002ba0:	885b      	ldrh	r3, [r3, #2]
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002baa:	2b3f      	cmp	r3, #63	; 0x3f
 8002bac:	dd01      	ble.n	8002bb2 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e05e      	b.n	8002c70 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	e04a      	b.n	8002c4e <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	3b20      	subs	r3, #32
 8002bc2:	6839      	ldr	r1, [r7, #0]
 8002bc4:	7849      	ldrb	r1, [r1, #1]
 8002bc6:	434b      	muls	r3, r1
 8002bc8:	0019      	movs	r1, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	18cb      	adds	r3, r1, r3
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	18d3      	adds	r3, r2, r3
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e02f      	b.n	8002c3c <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	409a      	lsls	r2, r3
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	4013      	ands	r3, r2
 8002be8:	d011      	beq.n	8002c0e <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002bea:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <SSD1306_Putc+0x100>)
 8002bec:	881a      	ldrh	r2, [r3, #0]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	18d3      	adds	r3, r2, r3
 8002bf4:	b298      	uxth	r0, r3
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <SSD1306_Putc+0x100>)
 8002bf8:	885a      	ldrh	r2, [r3, #2]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	18d3      	adds	r3, r2, r3
 8002c00:	b299      	uxth	r1, r3
 8002c02:	1dbb      	adds	r3, r7, #6
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	001a      	movs	r2, r3
 8002c08:	f7ff ff30 	bl	8002a6c <SSD1306_DrawPixel>
 8002c0c:	e013      	b.n	8002c36 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <SSD1306_Putc+0x100>)
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	18d3      	adds	r3, r2, r3
 8002c18:	b298      	uxth	r0, r3
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <SSD1306_Putc+0x100>)
 8002c1c:	885a      	ldrh	r2, [r3, #2]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	18d3      	adds	r3, r2, r3
 8002c24:	b299      	uxth	r1, r3
 8002c26:	1dbb      	adds	r3, r7, #6
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	425a      	negs	r2, r3
 8002c2c:	4153      	adcs	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	001a      	movs	r2, r3
 8002c32:	f7ff ff1b 	bl	8002a6c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	001a      	movs	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d8c9      	bhi.n	8002bdc <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	001a      	movs	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d8ae      	bhi.n	8002bb8 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <SSD1306_Putc+0x100>)
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	18d3      	adds	r3, r2, r3
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <SSD1306_Putc+0x100>)
 8002c6a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002c6c:	1dfb      	adds	r3, r7, #7
 8002c6e:	781b      	ldrb	r3, [r3, #0]
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b006      	add	sp, #24
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000042c 	.word	0x2000042c

08002c7c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	1dfb      	adds	r3, r7, #7
 8002c88:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8002c8a:	e013      	b.n	8002cb4 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	7818      	ldrb	r0, [r3, #0]
 8002c90:	1dfb      	adds	r3, r7, #7
 8002c92:	781a      	ldrb	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	0019      	movs	r1, r3
 8002c98:	f7ff ff6e 	bl	8002b78 <SSD1306_Putc>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d002      	beq.n	8002cae <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	e008      	b.n	8002cc0 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e7      	bne.n	8002c8c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b004      	add	sp, #16
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <ssd1306_I2C_Init+0x20>)
 8002cd0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cd2:	e002      	b.n	8002cda <ssd1306_I2C_Init+0x12>
		p--;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f9      	bne.n	8002cd4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	0003d090 	.word	0x0003d090

08002cec <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b091      	sub	sp, #68	; 0x44
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	0006      	movs	r6, r0
 8002cf4:	0008      	movs	r0, r1
 8002cf6:	623a      	str	r2, [r7, #32]
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	2327      	movs	r3, #39	; 0x27
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	1c32      	adds	r2, r6, #0
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	2326      	movs	r3, #38	; 0x26
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	1c02      	adds	r2, r0, #0
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	2324      	movs	r3, #36	; 0x24
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	1c0a      	adds	r2, r1, #0
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	466b      	mov	r3, sp
 8002d14:	607b      	str	r3, [r7, #4]
	uint8_t dt[count + 1];
 8002d16:	2324      	movs	r3, #36	; 0x24
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	1e5a      	subs	r2, r3, #1
 8002d20:	633a      	str	r2, [r7, #48]	; 0x30
 8002d22:	001a      	movs	r2, r3
 8002d24:	613a      	str	r2, [r7, #16]
 8002d26:	2200      	movs	r2, #0
 8002d28:	617a      	str	r2, [r7, #20]
 8002d2a:	6938      	ldr	r0, [r7, #16]
 8002d2c:	6979      	ldr	r1, [r7, #20]
 8002d2e:	0002      	movs	r2, r0
 8002d30:	0f52      	lsrs	r2, r2, #29
 8002d32:	000e      	movs	r6, r1
 8002d34:	00f6      	lsls	r6, r6, #3
 8002d36:	61fe      	str	r6, [r7, #28]
 8002d38:	69fe      	ldr	r6, [r7, #28]
 8002d3a:	4316      	orrs	r6, r2
 8002d3c:	61fe      	str	r6, [r7, #28]
 8002d3e:	0002      	movs	r2, r0
 8002d40:	00d2      	lsls	r2, r2, #3
 8002d42:	61ba      	str	r2, [r7, #24]
 8002d44:	001a      	movs	r2, r3
 8002d46:	60ba      	str	r2, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60fa      	str	r2, [r7, #12]
 8002d4c:	68b8      	ldr	r0, [r7, #8]
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	0002      	movs	r2, r0
 8002d52:	0f52      	lsrs	r2, r2, #29
 8002d54:	000e      	movs	r6, r1
 8002d56:	00f5      	lsls	r5, r6, #3
 8002d58:	4315      	orrs	r5, r2
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	00d4      	lsls	r4, r2, #3
 8002d5e:	3307      	adds	r3, #7
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	466a      	mov	r2, sp
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	469d      	mov	sp, r3
 8002d6a:	ab02      	add	r3, sp, #8
 8002d6c:	3300      	adds	r3, #0
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	dt[0] = reg;
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	2226      	movs	r2, #38	; 0x26
 8002d74:	18ba      	adds	r2, r7, r2
 8002d76:	7812      	ldrb	r2, [r2, #0]
 8002d78:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8002d7a:	2317      	movs	r3, #23
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4694      	mov	ip, r2
 8002d80:	44bc      	add	ip, r7
 8002d82:	4463      	add	r3, ip
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e01e      	b.n	8002dc8 <ssd1306_I2C_WriteMulti+0xdc>
		dt[i] = data[i-1];
 8002d8a:	2317      	movs	r3, #23
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	4694      	mov	ip, r2
 8002d90:	44bc      	add	ip, r7
 8002d92:	4463      	add	r3, ip
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2217      	movs	r2, #23
 8002d98:	2120      	movs	r1, #32
 8002d9a:	468c      	mov	ip, r1
 8002d9c:	44bc      	add	ip, r7
 8002d9e:	4462      	add	r2, ip
 8002da0:	7812      	ldrb	r2, [r2, #0]
 8002da2:	3a01      	subs	r2, #1
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	188a      	adds	r2, r1, r2
 8002da8:	7811      	ldrb	r1, [r2, #0]
 8002daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dac:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8002dae:	2317      	movs	r3, #23
 8002db0:	2220      	movs	r2, #32
 8002db2:	4694      	mov	ip, r2
 8002db4:	44bc      	add	ip, r7
 8002db6:	4463      	add	r3, ip
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	2317      	movs	r3, #23
 8002dbc:	2120      	movs	r1, #32
 8002dbe:	468c      	mov	ip, r1
 8002dc0:	44bc      	add	ip, r7
 8002dc2:	4463      	add	r3, ip
 8002dc4:	3201      	adds	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	2317      	movs	r3, #23
 8002dca:	2220      	movs	r2, #32
 8002dcc:	4694      	mov	ip, r2
 8002dce:	44bc      	add	ip, r7
 8002dd0:	4463      	add	r3, ip
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	18ba      	adds	r2, r7, r2
 8002dda:	8812      	ldrh	r2, [r2, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d2d4      	bcs.n	8002d8a <ssd1306_I2C_WriteMulti+0x9e>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8002de0:	2327      	movs	r3, #39	; 0x27
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b299      	uxth	r1, r3
 8002de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dea:	2324      	movs	r3, #36	; 0x24
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	881c      	ldrh	r4, [r3, #0]
 8002df0:	4805      	ldr	r0, [pc, #20]	; (8002e08 <ssd1306_I2C_WriteMulti+0x11c>)
 8002df2:	230a      	movs	r3, #10
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	0023      	movs	r3, r4
 8002df8:	f7fd fd6e 	bl	80008d8 <HAL_I2C_Master_Transmit>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	469d      	mov	sp, r3
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b00f      	add	sp, #60	; 0x3c
 8002e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e08:	20000438 	.word	0x20000438

08002e0c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	0004      	movs	r4, r0
 8002e14:	0008      	movs	r0, r1
 8002e16:	0011      	movs	r1, r2
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	1c22      	adds	r2, r4, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	1dbb      	adds	r3, r7, #6
 8002e20:	1c02      	adds	r2, r0, #0
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	1d7b      	adds	r3, r7, #5
 8002e26:	1c0a      	adds	r2, r1, #0
 8002e28:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	1dba      	adds	r2, r7, #6
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8002e34:	230c      	movs	r3, #12
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	1d7a      	adds	r2, r7, #5
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002e3e:	1dfb      	adds	r3, r7, #7
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b299      	uxth	r1, r3
 8002e44:	230c      	movs	r3, #12
 8002e46:	18fa      	adds	r2, r7, r3
 8002e48:	4804      	ldr	r0, [pc, #16]	; (8002e5c <ssd1306_I2C_Write+0x50>)
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2302      	movs	r3, #2
 8002e50:	f7fd fd42 	bl	80008d8 <HAL_I2C_Master_Transmit>
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b005      	add	sp, #20
 8002e5a:	bd90      	pop	{r4, r7, pc}
 8002e5c:	20000438 	.word	0x20000438

08002e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e66:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_MspInit+0x6c>)
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_MspInit+0x6c>)
 8002e6a:	6992      	ldr	r2, [r2, #24]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	619a      	str	r2, [r3, #24]
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_MspInit+0x6c>)
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2201      	movs	r2, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_MspInit+0x6c>)
 8002e80:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <HAL_MspInit+0x6c>)
 8002e82:	69d2      	ldr	r2, [r2, #28]
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	0549      	lsls	r1, r1, #21
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	61da      	str	r2, [r3, #28]
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_MspInit+0x6c>)
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	055b      	lsls	r3, r3, #21
 8002e94:	4013      	ands	r3, r2
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7fd fa94 	bl	80003d0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	425b      	negs	r3, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	2100      	movs	r1, #0
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7fd fa8d 	bl	80003d0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	425b      	negs	r3, r3
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7fd fa86 	bl	80003d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <HAL_I2C_MspInit+0x70>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d12a      	bne.n	8002f38 <HAL_I2C_MspInit+0x68>
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ee2:	230c      	movs	r3, #12
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	22c0      	movs	r2, #192	; 0xc0
 8002ee8:	00d2      	lsls	r2, r2, #3
 8002eea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eec:	230c      	movs	r3, #12
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2212      	movs	r2, #18
 8002ef2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	2201      	movs	r2, #1
 8002efa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002efc:	230c      	movs	r3, #12
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	2203      	movs	r2, #3
 8002f02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f04:	230c      	movs	r3, #12
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	2204      	movs	r2, #4
 8002f0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	18fa      	adds	r2, r7, r3
 8002f10:	2390      	movs	r3, #144	; 0x90
 8002f12:	05db      	lsls	r3, r3, #23
 8002f14:	0011      	movs	r1, r2
 8002f16:	0018      	movs	r0, r3
 8002f18:	f7fd faa4 	bl	8000464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_I2C_MspInit+0x74>)
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_I2C_MspInit+0x74>)
 8002f20:	69d2      	ldr	r2, [r2, #28]
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	0389      	lsls	r1, r1, #14
 8002f26:	430a      	orrs	r2, r1
 8002f28:	61da      	str	r2, [r3, #28]
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_I2C_MspInit+0x74>)
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	039b      	lsls	r3, r3, #14
 8002f32:	4013      	ands	r3, r2
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b008      	add	sp, #32
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40005400 	.word	0x40005400
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_UART_MspInit+0x70>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d129      	bne.n	8002fae <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f5a:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_UART_MspInit+0x74>)
 8002f5c:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_UART_MspInit+0x74>)
 8002f5e:	6992      	ldr	r2, [r2, #24]
 8002f60:	2180      	movs	r1, #128	; 0x80
 8002f62:	01c9      	lsls	r1, r1, #7
 8002f64:	430a      	orrs	r2, r1
 8002f66:	619a      	str	r2, [r3, #24]
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_UART_MspInit+0x74>)
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	01db      	lsls	r3, r3, #7
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f76:	230c      	movs	r3, #12
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	230c      	movs	r3, #12
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	2202      	movs	r2, #2
 8002f84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	230c      	movs	r3, #12
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f8e:	230c      	movs	r3, #12
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	2203      	movs	r2, #3
 8002f94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f96:	230c      	movs	r3, #12
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	18fa      	adds	r2, r7, r3
 8002fa2:	2390      	movs	r3, #144	; 0x90
 8002fa4:	05db      	lsls	r3, r3, #23
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7fd fa5b 	bl	8000464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b008      	add	sp, #32
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fce:	e7fe      	b.n	8002fce <HardFault_Handler+0x4>

08002fd0 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe8:	f7fd f94a 	bl	8000280 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002fec:	f7fd fa2e 	bl	800044c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <SystemInit+0x70>)
 8002ffe:	4a1a      	ldr	r2, [pc, #104]	; (8003068 <SystemInit+0x70>)
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	2101      	movs	r1, #1
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <SystemInit+0x70>)
 800300a:	4a17      	ldr	r2, [pc, #92]	; (8003068 <SystemInit+0x70>)
 800300c:	6852      	ldr	r2, [r2, #4]
 800300e:	4917      	ldr	r1, [pc, #92]	; (800306c <SystemInit+0x74>)
 8003010:	400a      	ands	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <SystemInit+0x70>)
 8003016:	4a14      	ldr	r2, [pc, #80]	; (8003068 <SystemInit+0x70>)
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	4915      	ldr	r1, [pc, #84]	; (8003070 <SystemInit+0x78>)
 800301c:	400a      	ands	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <SystemInit+0x70>)
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <SystemInit+0x70>)
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	4913      	ldr	r1, [pc, #76]	; (8003074 <SystemInit+0x7c>)
 8003028:	400a      	ands	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <SystemInit+0x70>)
 800302e:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <SystemInit+0x70>)
 8003030:	6852      	ldr	r2, [r2, #4]
 8003032:	4911      	ldr	r1, [pc, #68]	; (8003078 <SystemInit+0x80>)
 8003034:	400a      	ands	r2, r1
 8003036:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <SystemInit+0x70>)
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <SystemInit+0x70>)
 800303c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800303e:	210f      	movs	r1, #15
 8003040:	438a      	bics	r2, r1
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <SystemInit+0x70>)
 8003046:	4a08      	ldr	r2, [pc, #32]	; (8003068 <SystemInit+0x70>)
 8003048:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800304a:	490c      	ldr	r1, [pc, #48]	; (800307c <SystemInit+0x84>)
 800304c:	400a      	ands	r2, r1
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <SystemInit+0x70>)
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <SystemInit+0x70>)
 8003054:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003056:	2101      	movs	r1, #1
 8003058:	438a      	bics	r2, r1
 800305a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800305c:	4b02      	ldr	r3, [pc, #8]	; (8003068 <SystemInit+0x70>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]

}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	08ffb80c 	.word	0x08ffb80c
 8003070:	fef6ffff 	.word	0xfef6ffff
 8003074:	fffbffff 	.word	0xfffbffff
 8003078:	ffc0ffff 	.word	0xffc0ffff
 800307c:	fffffeec 	.word	0xfffffeec

08003080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003080:	480d      	ldr	r0, [pc, #52]	; (80030b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003082:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003084:	480d      	ldr	r0, [pc, #52]	; (80030bc <LoopForever+0x6>)
  ldr r1, =_edata
 8003086:	490e      	ldr	r1, [pc, #56]	; (80030c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003088:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <LoopForever+0xe>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800308c:	e002      	b.n	8003094 <LoopCopyDataInit>

0800308e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800308e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003092:	3304      	adds	r3, #4

08003094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003098:	d3f9      	bcc.n	800308e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800309a:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800309c:	4c0b      	ldr	r4, [pc, #44]	; (80030cc <LoopForever+0x16>)
  movs r3, #0
 800309e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a0:	e001      	b.n	80030a6 <LoopFillZerobss>

080030a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a4:	3204      	adds	r2, #4

080030a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a8:	d3fb      	bcc.n	80030a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80030aa:	f7ff ffa5 	bl	8002ff8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80030ae:	f000 f811 	bl	80030d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030b2:	f7ff fa55 	bl	8002560 <main>

080030b6 <LoopForever>:

LoopForever:
    b LoopForever
 80030b6:	e7fe      	b.n	80030b6 <LoopForever>
  ldr   r0, =_estack
 80030b8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80030bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80030c4:	08003f1c 	.word	0x08003f1c
  ldr r2, =_sbss
 80030c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80030cc:	200004f8 	.word	0x200004f8

080030d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030d0:	e7fe      	b.n	80030d0 <ADC1_IRQHandler>
	...

080030d4 <__libc_init_array>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	2600      	movs	r6, #0
 80030d8:	4d0c      	ldr	r5, [pc, #48]	; (800310c <__libc_init_array+0x38>)
 80030da:	4c0d      	ldr	r4, [pc, #52]	; (8003110 <__libc_init_array+0x3c>)
 80030dc:	1b64      	subs	r4, r4, r5
 80030de:	10a4      	asrs	r4, r4, #2
 80030e0:	42a6      	cmp	r6, r4
 80030e2:	d109      	bne.n	80030f8 <__libc_init_array+0x24>
 80030e4:	2600      	movs	r6, #0
 80030e6:	f000 f821 	bl	800312c <_init>
 80030ea:	4d0a      	ldr	r5, [pc, #40]	; (8003114 <__libc_init_array+0x40>)
 80030ec:	4c0a      	ldr	r4, [pc, #40]	; (8003118 <__libc_init_array+0x44>)
 80030ee:	1b64      	subs	r4, r4, r5
 80030f0:	10a4      	asrs	r4, r4, #2
 80030f2:	42a6      	cmp	r6, r4
 80030f4:	d105      	bne.n	8003102 <__libc_init_array+0x2e>
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
 80030f8:	00b3      	lsls	r3, r6, #2
 80030fa:	58eb      	ldr	r3, [r5, r3]
 80030fc:	4798      	blx	r3
 80030fe:	3601      	adds	r6, #1
 8003100:	e7ee      	b.n	80030e0 <__libc_init_array+0xc>
 8003102:	00b3      	lsls	r3, r6, #2
 8003104:	58eb      	ldr	r3, [r5, r3]
 8003106:	4798      	blx	r3
 8003108:	3601      	adds	r6, #1
 800310a:	e7f2      	b.n	80030f2 <__libc_init_array+0x1e>
 800310c:	08003f14 	.word	0x08003f14
 8003110:	08003f14 	.word	0x08003f14
 8003114:	08003f14 	.word	0x08003f14
 8003118:	08003f18 	.word	0x08003f18

0800311c <memset>:
 800311c:	0003      	movs	r3, r0
 800311e:	1882      	adds	r2, r0, r2
 8003120:	4293      	cmp	r3, r2
 8003122:	d100      	bne.n	8003126 <memset+0xa>
 8003124:	4770      	bx	lr
 8003126:	7019      	strb	r1, [r3, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	e7f9      	b.n	8003120 <memset+0x4>

0800312c <_init>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr

08003138 <_fini>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr
